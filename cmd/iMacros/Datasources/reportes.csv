name,description,report_query,datasource_id
"Club Cupon - Cantidad de cupones vendidos por deal (ultimos 30 dias)","Cantidad de cupones vendidos por deal","select *
from (
(
SELECT e.start_date,
       cast(c.name as char) company,
       cast(e.name as char) deal,
       e.discounted_price precio_cupon,
       sum(d.quantity) cupones_vendidos,
       e.discounted_price * sum(d.quantity) facturacion_empresa,
       sum(e.discounted_price * (e.commission_percentage / 100) ) comision,
       CASE e.pay_by_redeemed
            WHEN 0 then 'No'
            WHEN 1 then 'Si'
                   else 'N/A'
       END 'Pago por Redimidos'
FROM deal_users d, deals e, companies c
where d.deal_id = e.id
and e.company_id = c.id
and start_date > ADDDATE(now(), -30)
and start_date < now()
group by e.start_date, c.name, e.name
)
UNION
(
select now(), 'TOTAL', 'TOTAL', null, sum(d.quantity),
      sum(e.discounted_price * d.quantity) facturacion_empresa,
      sum(e.discounted_price * d.quantity * (e.commission_percentage / 100))  ganancia, null
from deal_users d, deals e, companies c
where d.deal_id = e.id
and e.company_id = c.id
and start_date > ADDDATE(now(), -30)
and start_date < now()
)
) t
order by t.start_date desc
;
",1
"ClubCupon - Reporte diario de subscripciones y registros (AGC)","Reporte diario de subscripciones y registros (AGC)","select * from ((
select 'TOTAL SUBSCRIPCIONES' entidad, c.name, 'TOTAL' fecha, count(*) cantidad_total, sum(s.is_subscribed) activos
from subscriptions s, cities c
where s.city_id = c.id
and not exists ( select 1 from subscription_origin so where so.subscription_id = s.id )
group by c.name
)
union
(
select 'TOTAL USUARIOS' entidad, 'GENERAL', 'TOTAL', count(*) cantidad_total, sum(u.is_active) activos
from users u
)
union
(
select 'SUBSCRIPCIONES x DIA', c.name, date_format(s.created,'%Y/%m/%d'), count(*), sum(s.is_subscribed)
from subscriptions s, cities c
where s.city_id = c.id
and date(s.created) >= date(concat(year(now()),'-',month(now()),'-01'))
and date(s.created) < date(concat(year(now()),'-',(month(now())+1),'-01'))
and not exists ( select 1 from subscription_origin so where so.subscription_id = s.id )
group by c.name, date(s.created)
order by 2,3
)
UNION
(
select 'REGISTROS x DIA', 'GENERAL', date_format(s.created,'%Y/%m/%d'), count(*), sum(s.is_active)
from users s, cities c
where date(s.created) >= date(concat(year(now()),'-',month(now()),'-01'))
and date(s.created) < date(concat(year(now()),'-',(month(now())+1),'-01'))
group by date(s.created)
order by 2,3
)
) t;",1
"Club Cupon - Ofertas de hoy y proximas","Ofertas de hoy y proximas","select * from (
select d.id, cast(d.name as char) deal, date(d.start_date) desde, date(d.end_date) hasta,
       cast(c.name as char) comercio, d.original_price precio_original, d.discounted_price precio_descuento,
       d.discount_percentage porcentaje_descuento, CASE d.pay_by_redeemed WHEN 0 then 'No' WHEN 1 then 'Si' else 'N/A' END 'Pago por Redimidos',
       i.name ciudad, bitly_short_url_prefix url
from deals d, companies c, cities i
where date(start_date) >= date(now())
and d.company_id = c.id
and d.city_id = i.id
order by start_date
) t
;",1
"MO - AvisosModeradosDiaAnterior","Avisos Moderados el dia anterior","select MODERADOR, CANTIDAD, Categoria 
from ( 
select  'TOTAL' as MODERADOR, count(*) CANTIDAD, '-' as Categoria
from    sacar.sac_aviso
where   trunc(AV_FECHA_APROBACION) = trunc(sysdate)-1
        and (AV_CREADO_POR = 'MIG BROKERS' or AV_CREADO_POR = 'WEB' or AV_CREADO_POR = 'CARGADOR')
        and AV_MODERADO = 'S'
UNION        
select av.AV_USUARIO_APROBACION MODERADOR, count(*) as CANTIDAD,  c.descripcion_L1 as Categoria  
from    sacar.sac_aviso av, SACAR.BSQ_AGRUPADOR_CATEGORIA c
where   trunc(av.AV_FECHA_APROBACION) = trunc(sysdate)-1
        and (av.AV_CREADO_POR = 'MIG BROKERS' or av.AV_CREADO_POR = 'WEB' or av.AV_CREADO_POR = 'CARGADOR')
        and av.AV_MODERADO = 'S'
        and av.cate_id = c.categoria_id
group by av.AV_USUARIO_APROBACION, c.descripcion_L1 
UNION
select  a1.AV_USUARIO_APROBACION MODERADOR, count (*) CANTIDAD, '---  TOTAL' as Categoria
from    sacar.sac_aviso a1
where   trunc(a1.AV_FECHA_APROBACION) = trunc(sysdate)-1
        and (a1.AV_CREADO_POR = 'MIG BROKERS' or a1.AV_CREADO_POR = 'WEB' or a1.AV_CREADO_POR = 'CARGADOR')
        and a1.AV_MODERADO = 'S'
group by a1.AV_USUARIO_APROBACION
) 
order by moderador, categoria ",2
"MO - Avisos que faltan Moderar","Avisos que faltan Moderar","select Categoria, sum(CANTIDAD) as Cantidad
from (
select '--> TOTAL' as Categoria, count(*) CANTIDAD
from    sacar.sac_aviso
where   AV_MODERADO = 'N' and AV_ESTADO = 3  
UNION
select c.descripcion_L1 as Categoria, count(*) as CANTIDAD  
from    sacar.sac_aviso av, SACAR.BSQ_AGRUPADOR_CATEGORIA c
where   av.AV_MODERADO = 'N' and av.AV_ESTADO = 3 and av.cate_id = c.categoria_id
group by c.descripcion_L1
) group by Categoria
order by Categoria",2
"MO - Cargos generados el dia de ayer ($) (Reporte Diario 10)","MO-Cargos generados el dia de ayer ($) (Reporte Diario 10)","select ct.DESCRIPCION,sum(monto) monto
from sacar.cce_cargo ce, sacar.cce_tipo_cargo ct
where 0=0
and trunc(ce.GENERACION)=trunc(sysdate)-1
and ct.ID=ce.TIPO_CARGO_ID
group by ct.descripcion",2
"MO - Controles - Avisos con muchas compras","Muestra los avisos que obtuvieron mas de 7 compras en los ultimos 5 dias","SELECT   usu.usu_apodo, to_char(trunc(usu.usu_fecha_ingreso)) fecha_ingreso, mov.aviso_id, mov.cantidad_compras,
         usu.usu_suspendido suspendido
    FROM sacar.sac_usuario usu,
         sacar.sac_aviso av,
         (SELECT   mov.av_id aviso_id, SUM (mov.mov_cantidad) cantidad_compras
              FROM sacar.sac_movimiento mov
             WHERE mov.mov_fecha_creacion > SYSDATE - 5
          GROUP BY mov.av_id
            HAVING SUM (mov.mov_cantidad) > 7) mov
   WHERE mov.aviso_id = av.av_id AND av.usuario_id = usu.usuario_id
ORDER BY usu_apodo",2
"MO - Controles - Compras con usuarios recientes","Compras de usuarios con menos de un mes en el sitio","SELECT mov.usuario_id_vendedor vendedor, mov.av_id aviso_id,
       to_char(mov.mov_fecha_creacion) fecha_operacion, mov.mov_cantidad cantidad,
       usu.usu_apodo apodo_comprador, to_char(usu.usu_fecha_ingreso) ingreso_comprador
  FROM sacar.sac_movimiento mov, sacar.sac_usuario usu
 WHERE mov.usuario_id = usu.usuario_id
   AND mov_fecha_creacion > SYSDATE - 3
   AND av_id IN (SELECT   mov.av_id aviso_id
                     FROM sacar.sac_movimiento mov
                    WHERE mov.mov_fecha_creacion > SYSDATE - 5
                 GROUP BY mov.av_id
                   HAVING SUM (mov.mov_cantidad) > 7)",2
"MO - GMS Total de Ayer x Tipo vendedor (Reporte Diario 1)","GMS Total de Ayer x Tipo vendedor (Reporte Diario 1)","select /*+ PARALLEL(a,4) */ /*+ PARALLEL(m,4) */ /*+ PARALLEL(u,4) */
        t.tius_descripcion GMS_TIPO_USUARIO,
        a.av_moneda MONEDA,
        sum(m.mov_precio) MONTO
from sacar.sac_aviso a,
     sacar.sac_usuario u,
     sacar.sac_movimiento m,
     sacar.sac_tipo_usuario t
where   a.av_id = m.av_id
and a.usuario_id = u.usuario_id
and a.portal_id = u.portal_id
and trunc(m.mov_fecha_creacion) = trunc(sysdate - 1)
and u.tius_id = t.tius_id
group by t.tius_descripcion, a.av_moneda
order by MONTO desc",2
"MO - GMS VENTAS SMS","GMS VENTAS SMS - semanal","select  to_char(h.fecha,'dd/mm/yyyy') as Fecha
, sum(PrecioT) as Total 
,sum(cantidad) as Cantidad
,h.moneda
from    (select trunc(m.generacion) fecha, m.monto PrecioU, m.aviso_cantidad cantidad, (m.aviso_cantidad * m.aviso_precio) PrecioT,
m.aviso_moneda moneda, m.origen
from    sacar.cce_cargo m
where   0=0
and trunc(m.generacion) between trunc(sysdate) -8 and trunc(sysdate) -1
and     m.tipo_cargo_id = 1
and m.aviso_id <> 4063393
and     m.origen like '%SMS%' ) h
group by h.fecha, h.moneda
order by fecha asc",2
"MO - GMS VENTAS SMS sin autos","GMS VENTAS SMS SIN AUTOS, INMUEBLES Y SERVICIOS - semanal","select  to_char(h.fecha,'dd/mm/yyyy') as Fecha
, sum(PrecioT) as Total
, sum(cantidad) as Cantidad
,h.moneda
from    (select trunc(m.generacion) fecha, m.monto PrecioU, m.aviso_cantidad cantidad, (m.aviso_cantidad * m.aviso_precio) PrecioT,
m.aviso_moneda moneda, m.origen
from sacar.cce_cargo m
where       0=0
and trunc(m.generacion) between trunc(sysdate) -8 and trunc(sysdate) -1
and     m.tipo_cargo_id = 1
and not exists (select av_id
from sacar.sac_aviso a, ( select cate_id categoria
from sacar.sac_categoria
START WITH cate_id in (220,209,247)
CONNECT BY PRIOR cate_id = cate_padre_id) categorias
where a.cate_id = categorias.categoria
and a.av_id = m.aviso_id)
and m.origen like '%SMS%') h
group by h.fecha, h.moneda
order by fecha asc",2
"MO - GMS VENTAS WEB","GMS VENTAS WEB - semanal","select  to_char(h.fecha,'dd/mm/yyyy') as fecha
, sum(PrecioT) as Total 
, sum(cantidad) as Cantidad
, h.moneda
from (select trunc(m.generacion) fecha, m.monto PrecioU, m.aviso_cantidad cantidad, (m.aviso_cantidad * m.aviso_precio) PrecioT, m.aviso_moneda moneda, m.origen from sacar.cce_cargo m
where   0=0
and trunc(m.generacion) between trunc(sysdate) -8 and trunc(sysdate) -1
and m.tipo_cargo_id = 1
and m.origen not like '%SMS%'
) h
group by h.fecha, h.moneda
order by fecha asc",2
"MO - GMS VENTAS WEB sin autos","GMS VENTAS WEB SIN AUTOS, INMUEBLES Y NEGOCIOS - semanal","select  to_char(h.fecha,'dd/mm/yyyy') as Fecha
, sum(PrecioT) as Total
, sum(cantidad) as Cantidad
,h.moneda
from    (select trunc(m.generacion) fecha, m.monto PrecioU, m.aviso_cantidad cantidad, (m.aviso_cantidad * m.aviso_precio) PrecioT, m.aviso_moneda moneda, m.origen
from  sacar.cce_cargo m
where 0=0
and trunc(m.generacion) between trunc(sysdate) -8 and trunc(sysdate) -1
and     m.tipo_cargo_id = 1
and not exists (select av_id
from sacar.sac_aviso a, ( select cate_id categoria
from sacar.sac_categoria
START WITH cate_id in (220,209,247)
CONNECT BY PRIOR cate_id = cate_padre_id) categorias
where a.cate_id = categorias.categoria
and a.av_id = m.aviso_id)
and m.origen not like '%SMS%') h
group by h.fecha, h.moneda
order by fecha asc",2
"MO - Ingreso por primera vez crear un apodo-Exc Brokers(Registro Usuario 2)","Exc. Brokers","select to_char(u.USU_FECHA_ingreso,'rrrr/mm/dd') FechaIngreso, tu.tius_descripcion, count(1) cantidad
from sacar.sac_usuario u, sacar.sac_tipo_usuario tu
where 0=0
and u.TIUS_ID=tu.TIUS_ID
and u.TIUS_ID <> 1 
and trunc(u.USU_FECHA_ingreso) between trunc(sysdate)-22 and trunc(sysdate)-1
group by to_char(u.USU_FECHA_ingreso,'rrrr/mm/dd'), tu.tius_descripcion
order by to_char(u.USU_FECHA_ingreso,'rrrr/mm/dd')",2
"MO - Ingresos No validados-Exc SMS(Registro Usuario 3)","Excluido SMS","select to_char(u.USU_FECHA_INGRESO,'rrrr/mm/dd') FechaIngreso, count(1) cantidad
from sacar.sac_usuario u, sacar.sac_usuario_registro ur
where 0=0
and u.USUARIO_ID=ur.USUARIO_ID
and ur.ESTADO_REGISTRO_ID=1
and u.TIUS_ID <> 3 --Excluimos los SMS
and trunc(u.USU_FECHA_ingreso) between trunc(sysdate)-22 and trunc(sysdate)-1
group by to_char(u.USU_FECHA_INGRESO,'rrrr/mm/dd')
order by to_char(u.USU_FECHA_INGRESO,'rrrr/mm/dd')",2
"MO - Monitoreo - Apellidos monitoreados","Apellidos monitoreados","select  u.USU_APODO APODO, u.USUARIO_ID, u.USU_SUSPENDIDO SUSPENDIDO, 
        u.USU_COD_AREA_TEL COD_AREA, u.USU_TELEFONO TELEFONO, u.USU_APELLIDO APELLIDO
from  sacar.sac_usuario u
where exists (
    select 1
    from sacar.mon_apellido
    where lower(apellido) = lower(u.usu_apellido)
) 
and trunc(u.USU_ULTIMA_ACTUALIZACION) = trunc(sysdate) -1
order by u.USU_TELEFONO, u.USU_SUSPENDIDO",2
"MO - Monitoreo - Direcciones de mail de servicios anonimos","Direcciones de mail de servicios anonimos","select usuario_id, usu_apodo, usu_email
from sacar.sac_usuario
where usu_email like '%mailinator%'
or usu_email like '%bugmenot%'
or usu_email like '%guerrillamail%'
",2
"MO - Monitoreo - Direcciones de mail duplicadas","MO - Monitoreo - Direcciones de mail duplicadas","select usu_email, count(*) cantidad
from sacar.sac_usuario
where usu_email <> 'sinmail@masoportunidades.clarin.com'
group by usu_email
having count(*) > 1 ",2
"MO - Monitoreo - IPs monitoreadas","IPs monitoreadas","  SELECT   u.usuario_id,
           u.usu_apodo,
           ip.usuario_ip,
           u.usu_suspendido,
           COUNT (1) Accesos
    FROM   sacar.SAC_REG_USRIP ip, sacar.sac_usuario u, sacar.mon_ip monip
   WHERE   ip.usuario_ip = monip.ip
           AND u.usuario_id = ip.usuario_id
           AND TRUNC (ip.creacion) = TRUNC (SYSDATE) - 1
GROUP BY   u.usuario_id,
           u.usu_apodo,
           ip.usuario_ip,
           u.usu_suspendido",2
"MO - Monitoreo - Passwords monitoreadas","Passwords monitoreadas","select  ( select max(passwd_dec) from sacar.MON_PASSWORD WHERE PASSWD_ENC = ur.usu_clave) clave,
        u.USU_APODO APODO, u.USUARIO_ID,u.USU_SUSPENDIDO SUSPENDIDO,
        u.USU_COD_AREA_TEL COD_AREA, u.USU_TELEFONO TELEFONO
from sacar.sac_usuario u, sacar.sac_usuario_registro ur
where u.USUARIO_ID = ur.USUARIO_ID
and exists ( select 1 from sacar.MON_PASSWORD WHERE PASSWD_ENC = ur.usu_clave)
and trunc(u.USU_ULTIMA_ACTUALIZACION) = trunc(sysdate) -1
order by clave, apodo",2
"MO - Monitoreo - Telefonos monitoreados","Telefonos monitoreados","select u.USU_APODO APODO, u.USUARIO_ID, u.USU_SUSPENDIDO SUSPENDIDO, 
        u.USU_COD_AREA_TEL COD_AREA, u.USU_TELEFONO TELEFONO, ur.USU_TELEFONO2 TELEFONO_2
from sacar.sac_usuario u, sacar.sac_usuario_registro ur
where u.usuario_id = ur.usuario_id     
and EXISTS (
    SELECT 1 FROM sacar.MON_TELEFONO
    where TELEFONO = u.usu_telefono
    or TELEFONO = ur.USU_TELEFONO2
) 
and trunc(u.USU_ULTIMA_ACTUALIZACION) = trunc(sysdate) -1
order by u.USU_TELEFONO, u.USU_SUSPENDIDO
",2
"MO - Monitoreo - Usuarios con mas de 3 compras en el dia","Usuarios con mas de 3 compras en el día","select m.USUARIO_ID, count(*) COMPRAS
from sacar.sac_movimiento m
where trunc(m.MOV_FECHA_CREACION) = trunc(sysdate)-1
group by m.USUARIO_ID
having count(*)>3",2
"MO - Q Articulos Activos (Reporte diario 3)","Cantidad Articulos Activos en total (Reporte diario 3)","select  AV_CREADO_POR AVISOS_ACTIVOS,
        count(*) CANTIDAD
from sacar.sac_aviso
where   AV_ESTADO = 3
group by AV_CREADO_POR",2
"MO - Monitoreo - Usuarios que se loguean multiples veces por día","Usuarios que se loguean multiples veces por día","select usuario_ip, usuario_id, count(*) cantidad
from sacar.SAC_REG_USRIP
where trunc(creacion) = trunc(sysdate-1)
group by usuario_ip, usuario_id
having count(*) > 20",2
"MO - Monitoreo - Usuarios registrados ayer con nombre igual a su apellido","Usuarios registrados ayer con nombre igual a su apellido","select usu_apodo, usu_nombre, usu_apellido
from sacar.sac_usuario u, sacar.sac_usuario_registro ur
where trunc(u.usu_fecha_ingreso) = trunc(sysdate-1)
and u.usuario_id = ur.usuario_id
and estado_registro_id = 2
and trim(u.USU_APELLIDO) = trim(u.usu_nombre)",2
"MO - OperacionesPS>500$(16pm)","Operaciones de PS > 500$ (entre las 8am del dia de hoy y las 16pm)","select cargo.id cargo, cargo.monto, to_char(cargo.generacion,'dd/mm/yyyy hh24:mi:ss') generacion, cargo.estado, cargo.origen, cargo.aviso_id, 
        cargo.transaccion_id, cargo.aviso_precio, cargo.aviso_moneda, cargo.aviso_cantidad, cargo.aviso_titulo, 
        cargo.aviso_origen,
        comprador.usuario_id comprador, comprador.usu_apodo apodo_comprador, comprador.usu_email mail_comprador,
        vendedor.usuario_id vendedor, vendedor.usu_apodo apodo_vendedor, vendedor.usu_email mail_vendedor,
        DECODE (vendedor.tius_id, 1, 'BK', 2, 'WEB') tuv
from sacar.pgs_operacion operacion, sacar.cce_cargo cargo,
     sacar.sac_usuario comprador, sacar.sac_usuario vendedor
where operacion.cargo_id = cargo.id
and operacion.vendedor_id = vendedor.usuario_id
and operacion.comprador_id = comprador.usuario_id
AND cargo.aviso_precio_pesos >= 500
and operacion.generacion >  TO_DATE (to_char(sysdate,'DD/MM/RRRR')||' 08:00','DD/MM/RRRR hh24:mi')
and operacion.generacion <=  TO_DATE (to_char(sysdate,'DD/MM/RRRR')||' 16:00','DD/MM/RRRR hh24:mi')",2
"MO - OperacionesPS500$(8am)","Operaciones de PS > 500$ (entre las 16pm del dia anterior y las 8am de hoy)","select cargo.id cargo, cargo.monto, to_char(cargo.generacion,'dd/mm/yyyy hh24:mi:ss') generacion, cargo.estado, cargo.origen, cargo.aviso_id, 
        cargo.transaccion_id, cargo.aviso_precio, cargo.aviso_moneda, cargo.aviso_cantidad, cargo.aviso_titulo, 
        cargo.aviso_origen,
        comprador.usuario_id comprador, comprador.usu_apodo apodo_comprador, comprador.usu_email mail_comprador,
        vendedor.usuario_id vendedor, vendedor.usu_apodo apodo_vendedor, vendedor.usu_email mail_vendedor,
        DECODE (vendedor.tius_id, 1, 'BK', 2, 'WEB') tuv
from sacar.pgs_operacion operacion, sacar.cce_cargo cargo,
     sacar.sac_usuario comprador, sacar.sac_usuario vendedor
where operacion.cargo_id = cargo.id
and operacion.vendedor_id = vendedor.usuario_id
and operacion.comprador_id = comprador.usuario_id
AND cargo.aviso_precio_pesos >= 500
and operacion.generacion >  TO_DATE (to_char(sysdate-1,'DD/MM/RRRR')||' 16:00','DD/MM/RRRR hh24:mi')
and operacion.generacion <=  TO_DATE (to_char(sysdate,'DD/MM/RRRR')||' 08:00','DD/MM/RRRR hh24:mi')",2
"MO - Pago Seguro transacciones realizadas Ayer","MO-Pago Seguro transacciones realizadas Ayer","SELECT padre.*, u2.usu_apodo apodo_vendedor, u2.usu_email mail_vendedor
FROM (SELECT u.usuario_id comprador, u.usu_apodo , u.usu_email, to_char(o.GENERACION,'DD/MM/RRRR') generacion, ca.transaccion_id, ca.aviso_id, ca.aviso_titulo, ca.aviso_precio, o.vendedor_id vendedor
   FROM sacar.pgs_operacion o, sacar.sac_usuario u, sacar.cce_cargo ca
   WHERE trunc(o.generacion) = trunc(sysdate-1)
      AND o.estado = 'PENDIENTE'
      AND o.comprador_id = u.usuario_id
      AND ca.ID = o.cargo_id
      AND ca.aviso_precio >= 500) padre,
sacar.sac_usuario u2
WHERE 0 = 0 AND padre.vendedor = u2.usuario_id",2
"MO - Stock de Usuarios (Reporte diario 9)","MO-Stock de Usuarios (Reporte diario 9)","select  decode(TIUS_ID,1,'Usuario Broker',2,'Usuario Web',3,'Usuario SMS') STOCK_USUARIOS, count(*) CANTIDAD
from  sacar.sac_usuario a
group by TIUS_ID",2
"MO - Q Articulos Con Destaque Pago Ayer (Reporte diario 6)","Cantidad Articulos Con Destaque Pago Ayer (Reporte diario 6)","select sum(monto) monto,count(1) cantidad_destaques,count(distinct(ce.aviso_id)) avisos
from sacar.cce_cargo ce, sacar.cce_tipo_cargo ct
where 0=0
and trunc(ce.GENERACION)=trunc(sysdate)-1
and ct.ID=ce.TIPO_CARGO_ID
and ct.id=2",2
"MO - Q Articulos Dados de Baja Ayer (Reporte diario 5)","Cantidad Articulos Dados de Baja Ayer (Reporte diario 5)","select  ESAV_ESTADO ESTADO, decode(esav_estado, 4, 'Vencidos', 5, 'Cerrados') DESCRIPCION, count(*) CANTIDAD
from sacar.sac_estado_aviso
where   trunc(ESAV_FECHA_CREACION) = trunc(sysdate) -1
        and     ESAV_ESTADO in (4,5)
group by ESAV_ESTADO",2
"MO - Q Articulos Publicados Ayer (Reporte Diario 4)","Cantidad Articulos Publicados Ayer (Reporte Diario 4)","select  AV_CREADO_POR ARTICULOS_PUBLICADOS,
        count(*) CANTIDAD
from sacar.sac_aviso
where trunc(AV_FECHA_CREACION) = trunc (sysdate - 1)
group by AV_CREADO_POR",2
"MO - Q Mail (Reporte Diario 11)","MO-Q Mail (Reporte Diario 11)","select 'Sin Enviar' Mail , count(*) Cantidad
from sacar.mail_registro
where mail_estado_id = 1
union
select 'Con Error' Mail, count(*) Cantidad
from sacar.mail_registro
where mail_estado_id <> 1
and mail_estado_id <> 2",2
"MO - Q Usuarios Certificados (Reporte diario 8)","Cantidad Usuarios Certificados (Reporte diario 8)","select  'Ayer' USUARIOS_CERTIFICADOS, count(*) Cantidad 
from    sacar.sac_usuario_registro
where   USU_CERTIFICADO = 'S'
        and     trunc(USU_FECHA_CERTIFICACION) = trunc (sysdate - 1)
        and     ESTADO_REGISTRO_ID = 2
UNION
select  'Total' USUARIOS_CERTIFICADOS, count(*) Cantidad
from   sacar.sac_usuario_registro
where   USU_CERTIFICADO = 'S'
        and ESTADO_REGISTRO_ID = 2",2
"MO - Q Usuarios Registrados Ayer (Reporte diario 7)","Cantidad Usuarios Registrados Ayer (Reporte diario 7)","select  'Total' USUARIOS_REGISTRADOS_AYER, count(*) cantidad 
from    sacar.sac_usuario
where   trunc(USU_FECHA_INGRESO) = trunc (sysdate - 1)
union
select  '@live.com.ar' USUARIOS_REGISTRADOS_AYER, count(*) cantidad
from    sacar.sac_usuario
where   trunc(USU_FECHA_INGRESO) = trunc (sysdate - 1)
and lower(usu_email) like'%@live.com.ar'",2
"MO - Reporte Diario Suspendidos-Ayer","MO-Reporte Diario Suspendidos","select descripcion, apodo, Tipo_suspencion from (
select descripcion,     to_char(count(1)) apodo, 'Total por descripcion' as Tipo_suspencion   
from sacar.sac_usuario u, sacar.sac_usuario_registro ur, sacar.CRM_SUSPENSION_USUARIO s, sacar.crm_regla r
where 0=0
and u.usuario_id=ur.usuario_id
and u.usuario_id=s.USUARIO_ID
and r.ID=s.REGLA_ID
and trunc(s.generacion) = trunc(sysdate)-1 
and lower (u.usu_apodo) <> 'testmo'
group by descripcion
union
select r.descripcion as descripcion , u.usu_apodo as apodo ,s.TIPO_SUSPENSION as Tipo_suspencion
from sacar.sac_usuario u, sacar.sac_usuario_registro ur, sacar.CRM_SUSPENSION_USUARIO s, sacar.crm_regla r
where 0=0
and u.usuario_id=ur.usuario_id
and u.usuario_id=s.USUARIO_ID
and r.ID=s.REGLA_ID
and trunc(s.generacion) = trunc(sysdate)-1
and lower (u.usu_apodo) <> 'testmo'
) order by Tipo_suspencion",2
"MO - Reporte mensual Usuarios",reporte_mensual_Usuarios,"select 'Usuarios Reg. (Stock)'  as Descripcion, count(1) as cantidad from sacar.sac_usuario u, sacar.sac_usuario_registro ur  where 0=0  and u.usuario_id=ur.usuario_id  and trunc(u.usu_fecha_ingreso) <  trunc(sysdate)  union  select  'Usuarios Cert. (Stock)'  as Descripcion, count(1) as cantidad from sacar.sac_usuario u, sacar.sac_usuario_registro ur  where 0=0  and u.usuario_id=ur.usuario_id  and trunc(ur.usu_fecha_certificacion) <  trunc(sysdate)  and ur.USU_CERTIFICADO='S'  union  select 'Usuarios Cert. (Stock) validados (cuenta y suspension)' as descripcion, count(1) as cantidad from sacar.sac_usuario u, sacar.sac_usuario_registro ur  where 0=0  and u.usuario_id=ur.usuario_id  and ur.USU_CERTIFICADO='S'  and u.usu_suspendido='N'  and u.usuario_id not in (select usuario_id from sacar.cta_cuenta where ESTADO = 'INHABILITADA')  union  select  'Usuarios No Cert. (Stock)' as descripcion,  (max(usuarios_registrados)-min(usuarios_registrados)) as cantidad from  (select count(1) usuarios_registrados from sacar.sac_usuario u, sacar.sac_usuario_registro ur  where 0=0  and u.usuario_id=ur.usuario_id  and trunc(u.usu_fecha_ingreso) <  trunc(sysdate)  union  select count(2) Usuarios_Cert from sacar.sac_usuario u, sacar.sac_usuario_registro ur  where 0=0  and u.usuario_id=ur.usuario_id  and trunc(ur.usu_fecha_certificacion) <  trunc(sysdate)  and ur.USU_CERTIFICADO='S')  union  select 'Usuarios No Val (Stock)' as descripcion, count(1) as cantidad from sacar.sac_usuario u, sacar.sac_usuario_registro ur  where 0=0  and u.usuario_id=ur.usuario_id  and ur.ESTADO_REGISTRO_ID=1  union  SELECT 'Suspendidos (Stock)' || r.TIPO_SUSPENSION as descripcion, count(1) as cantidad  FROM SACAR.CTA_CUENTA C, SACAR.CRM_SUSPENSION_USUARIO S, SACAR.CRM_REGLA R  WHERE C.USUARIO_ID=S.USUARIO_ID  AND S.REGLA_ID=R.ID  group by r.tipo_suspension  union  select 'Inhabilitados (Stock)' as descripcion, count(1) as cantidad  from sacar.sac_usuario u, sacar.sac_usuario_registro ur  where 0=0  and u.usuario_id=ur.usuario_id  and trunc(u.usu_fecha_ingreso) <  trunc(sysdate)  and u.usuario_id  in (select usuario_id from sacar.cta_cuenta where ESTADO = 'INHABILITADA')  union  select 'Brokers (Stock)' as descripcion, count(1) as cantidad from sacar.sac_usuario u, sacar.sac_usuario_registro ur  where 0=0  and u.usuario_id=ur.usuario_id  and trunc(u.usu_fecha_ingreso) <  trunc(sysdate)  and u.tius_id=1  union  select 'Brokers suspendidos' as descripcion, count(1) as cantidad  from sacar.sac_usuario u, sacar.sac_usuario_registro ur  where 0=0  and u.usuario_id=ur.usuario_id  and u.tius_id=1  and u.usu_suspendido = 'S'  union  select 'Brokers Inhabilitados' as descripcion, count(1) as cantidad  from sacar.sac_usuario u, sacar.sac_usuario_registro ur , sacar.cta_cuenta c  where 0=0  and u.usuario_id=ur.usuario_id  and trunc(u.usu_fecha_ingreso) <  trunc(sysdate)  and u.TIUS_ID=1  and c.usuario_id=u.usuario_id  and c.ESTADO='INHABILITADA'  union  select '18 a 20 años' as descripcion, count(1) as cantidad  from sacar.sac_usuario u, sacar.sac_usuario_registro ur  where 0=0  and u.usuario_id=ur.usuario_id  and u.usu_suspendido='N'  and u.usuario_id not in (select usuario_id from sacar.cta_cuenta where ESTADO = 'INHABILITADA')  and ur.USU_CERTIFICADO = 'S'  and trunc(months_between( trunc(sysdate),trunc(usu_fecha_nac)))>=(18*12)  and trunc(months_between( trunc(sysdate),trunc(usu_fecha_nac)))< (21*12)  union  select '21 a 30 años' as descripcion, count(1) as cantidad  from sacar.sac_usuario u, sacar.sac_usuario_registro ur  where 0=0  and u.usuario_id=ur.usuario_id  and u.usu_suspendido='N'  and u.usuario_id not in (select usuario_id from sacar.cta_cuenta where ESTADO = 'INHABILITADA')  and ur.USU_CERTIFICADO = 'S'  and trunc(months_between( trunc(sysdate),trunc(usu_fecha_nac)))>=(21*12)  and trunc(months_between( trunc(sysdate),trunc(usu_fecha_nac)))< (31*12)  union  select '31 a 40 años' as descripcion, count(1) as cantidad  from sacar.sac_usuario u, sacar.sac_usuario_registro ur...",2
"MO - RepublicacionAvisos","Muesta la republicacion de avisos del dia anterior","select to_char(esav_fecha_creacion,'dd/mm/yyyy') as Fecha, esav_creado_por, count(*) as Cantidad
from sacar.SAC_ESTADO_AVISO 
where trunc(esav_fecha_creacion) = trunc(sysdate)-1
and esav_creado_por = 'AVISO REPUBLICACION'
group by to_char(esav_fecha_creacion,'dd/mm/yyyy'), esav_creado_por",2
"MO - SEMANAL GMS Semanal","Semanal - GMS","select bsq.l1 ID_CATEGORIA, cat.CATE_DESCRIPCION DESCRIPCION, a.av_moneda MONEDA
, sum(ca.aviso_cantidad)CANTIDAD, sum(ca.aviso_precio*ca.aviso_cantidad)GMS
from sacar.bsq_agrupador_categoria bsq, sacar.sac_categoria cat
,REPORTE_SACAR_AVISO a, sacar.cce_cargo ca
where 0=0
and bsq.l1 = cat.CATE_ID
and bsq.CATEGORIA_ID = a.cate_id
and ca.AVISO_ID = a.AV_ID
and ca.TIPO_CARGO_ID = 1
and ca.GENERACION between
sysdate -7 and sysdate -1 
group by bsq.l1, cat.CATE_DESCRIPCION, a.av_moneda
order by id_categoria asc",2
"MO - SEMANAL Grandes Vendedores con Avisos Activos","Semanal - Grandes Vendedores con Avisos Activos","select u.usuario_id,u.usu_apodo, u.usu_nombre, u.usu_apellido, u.usu_email, u.USU_TELEFONO
,count(a.av_id) as contador,cu.ESTADO, cu.CONDICION
from sacar.sac_usuario u, sacar.sac_aviso a, sacar.cce_cuenta cu
where 0=0
and u.TIUS_ID = 1
and a.AV_ESTADO = 3
and u.USUARIO_ID = cu.USUARIO_ID
and u.USUARIO_ID = a.USUARIO_ID
group by u.usuario_id,u.usu_apodo, u.usu_nombre, u.usu_apellido, u.usu_email, u.USU_TELEFONO
,cu.ESTADO, cu.CONDICION
",2
"MO - SEMANAL Grandes Vendedores sin Avisos","Semanal - GV sin avisos","select u2.usuario_id,u2.usu_Apodo, u2.usu_nombre, u2.usu_apellido, u2.usu_email, u2.USU_TELEFONO
,cu.ESTADO, cu.CONDICION
from sacar.sac_usuario u2, sacar.cce_cuenta cu,
(select u.usuario_id
from sacar.sac_usuario u
where 0=0
and u.tius_id = 1
minus
select distinct a.USUARIO_ID
from sacar.sac_aviso a
where a.av_estado = 3) u3
where u2.usuario_id=u3.usuario_id
and u2.usuario_id = cu.USUARIO_ID",2
"MO - SEMANAL Grandes Vendedores sin Cuentas","Semanal - Grandes Vendedores sin Cuentas","select u.usuario_id,u.usu_apodo, u.usu_nombre, u.usu_apellido, u.usu_email, u.USU_TELEFONO
from sacar.sac_usuario u
where 0=0
and u.usuario_id in(select usuario_id from sacar.sac_usuario where tius_id = 1
MINUS
select distinct a.USUARIO_ID from sacar.sac_aviso a where a.av_estado = 3)
MINUS
((select u2.usuario_id,u2.usu_Apodo, u2.usu_nombre, u2.usu_apellido, u2.usu_email, u2.USU_TELEFONO
from sacar.sac_usuario u2, sacar.cce_cuenta cu,
(select u.usuario_id
from sacar.sac_usuario u
where 0=0
and u.tius_id = 1
minus
select distinct a.USUARIO_ID
from sacar.sac_aviso a
where a.av_estado = 3) u3
where u2.usuario_id=u3.usuario_id
and u2.usuario_id = cu.USUARIO_ID
))",2
"MO - SEMANAL GrandesVendedoresReputacionAvisosActivos ","Semanal -  Reporte GV Reputacion y Categorias","select u.usuario_id USUID, u.usu_apodo APODO, u.usu_email EMAIL
, cat.DESCRIPCION_L1 DESCR,count(a.av_id)AVISOS, rep.PUNTAJE REPUTACION
from sacar.sac_usuario u, sacar.bsq_agrupador_categoria cat,sacar.sac_aviso a
,sacar.cal_reputacion rep
where 0=0
and a.av_estado = 3
and u.usuario_id = a.usuario_id 
and u.tius_id = 1
and cat.CATEGORIA_ID = a.CATE_ID
and rep.usuario_id = u.usuario_id
and a.av_fecha_creacion between (sysdate -7) and (sysdate -1)
group by u.usuario_id, u.usu_apodo, u.usu_email, cat.descripcion_l1, rep.puntaje
order by u.usuario_id asc,avisos desc",2
"MO - SEMANAL GrandesVendedoresReputacionVentas L1",Semanal_GrandesVendedoresReputacionVentas,"select USUARIO_ID,APODO,NOMBRE,APELLIDO,AREA_TEL,TEL,EMAIL,LOC,PROVINCIA
,TIPO_USU,ESTADO,CATEGORIA,max(ventas)as Ventas,REPUTACION from (
select u.usuario_id USUARIO_ID, u.usu_apodo APODO, u.usu_nombre NOMBRE, u.usu_apellido APELLIDO
, u.USU_COD_AREA_TEL AREA_TEL,u.USU_TELEFONO TEL, u.USU_EMAIL EMAIL,u.usu_localidad LOC
,pr.prv_nombre PROVINCIA, tu.TIUS_DESCRIPCION TIPO_USU, cu.ESTADO ESTADO, cat.descripcion_l1 CATEGORIA
, count(ca.id)VENTAS, rep.PUNTAJE REPUTACION
from sacar.sac_usuario u, sacar.sac_tipo_usuario tu, sacar.cce_cuenta cu
,sacar.cce_cargo ca, sacar.sac_provincias pr, sacar.cal_reputacion rep
,sacar.bsq_agrupador_categoria cat, REPORTE_SACAR_AVISO a
where 0=0
and u.usuario_id = cu.USUARIO_ID
and u.TIUS_ID = tu.TIUS_ID
and ca.TIPO_CARGO_ID = 1
and cu.id=ca.cuenta_id
and u.PRV_ID = pr.PRV_ID
and u.usuario_id = rep.USUARIO_ID
and cat.categoria_id = a.cate_id
and a.av_id = ca.aviso_id
and u.tius_id = 1
and ca.GENERACION between (sysdate -7) and (sysdate -1) 
group by u.usuario_id, u.usu_apodo, u.usu_nombre, u.usu_apellido, u.USU_COD_AREA_TEL
,u.USU_TELEFONO, u.USU_EMAIL,u.usu_localidad,pr.prv_nombre
, tu.TIUS_DESCRIPCION, cu.ESTADO, rep.PUNTAJE
,cat.descripcion_l1 
order by u.usuario_id asc)
group by USUARIO_ID,APODO,NOMBRE,APELLIDO,AREA_TEL,TEL,EMAIL,LOC,PROVINCIA
,TIPO_USU,ESTADO,CATEGORIA,REPUTACION
order by usuario_id",2
"MO - SEMANAL Stock Avisos Activos Totales por Categoría","Semanal - Stock Avisos Activos Totales por Categoría","select bsq.l1 ID_CATEGORIA, cat.CATE_DESCRIPCION DESCRIPCION, count(a.av_id)Avisos_Activos
from sacar.bsq_agrupador_categoria bsq, sacar.sac_categoria cat, sacar.sac_usuario u
,sacar.sac_aviso a
where 0=0
and bsq.l1 = cat.CATE_ID
and a.av_estado = 3
and a.usuario_id = u.usuario_id
and bsq.CATEGORIA_ID = a.cate_id
group by bsq.l1, cat.CATE_DESCRIPCION
",2
"MO - SEMANAL Stock Avisos Activos de GV","Semanal - Stock Avisos Activos de GV","select bsq.l1 ID_CATEGORIA, cat.CATE_DESCRIPCION DESCRIPCION, count(a.av_id)Avisos_Activos
from sacar.bsq_agrupador_categoria bsq, sacar.sac_categoria cat, sacar.sac_usuario u
,sacar.sac_aviso a
where 0=0
and bsq.l1 = cat.CATE_ID
and a.av_estado = 3
and a.usuario_id = u.usuario_id
and u.tius_id = 1
and bsq.CATEGORIA_ID = a.cate_id
group by bsq.l1, cat.CATE_DESCRIPCION",2
"MO - SEMANAL Stock de Avisos Activos (todos los usuarios)","Semanal - Stock de Avisos Activos (todos los usuarios)","select bsq.l1 ID_CATEGORIA, cat.CATE_DESCRIPCION DESCRIPCION, count(a.av_id)Avisos_Activos
from sacar.bsq_agrupador_categoria bsq, sacar.sac_categoria cat
,sacar.sac_aviso a
where 0=0
and bsq.l1 = cat.CATE_ID
and a.av_estado = 3
and bsq.CATEGORIA_ID = a.cate_id
group by bsq.l1, cat.CATE_DESCRIPCION",2
"MO - SEMANAL Usuarios Avisos Activos con Tipo Producto","Semanal - Usuarios Avisos Activos con Tipo Producto","select u.usuario_id,u.usu_apodo, u.usu_nombre, u.usu_apellido Apellido, u.usu_email, u.usu_telefono
,a.av_producto_estado, count(a.av_id) as Avisos,cu.ESTADO, cu.CONDICION
from sacar.sac_usuario u, sacar.sac_aviso a, sacar.cce_cuenta cu
where a.av_estado = 3
and u.usuario_id = cu.usuario_id
and u.usuario_id = a.usuario_id
group by u.usuario_id,u.usu_apodo, u.usu_nombre, u.usu_apellido, u.usu_email, u.usu_telefono
, a.av_producto_estado,cu.estado, cu.condicion",2
"MO - usuarios certificados en el dia de ingreso-Exc SMS(Registro Usuario 5)","Exc. SMS","select to_char(ur.USU_FECHA_CERTIFICACION,'rrrr/mm/dd') FechaCertificacion, count(1) cantidad
from sacar.sac_usuario u, sacar.sac_usuario_registro ur
where 0=0
and u.USUARIO_ID=ur.USUARIO_ID
and u.TIUS_ID <> 3 
and trunc(ur.USU_FECHA_CERTIFICACION) between trunc(sysdate)-22 and trunc(sysdate)-1
and trunc(u.USU_FECHA_INGRESO)=trunc(ur.USU_FECHA_CERTIFICACION)
group by to_char(ur.USU_FECHA_CERTIFICACION,'rrrr/mm/dd')
order by to_char(ur.USU_FECHA_CERTIFICACION,'rrrr/mm/dd')",2
"MO - Usuarios Certificados en el dia-Exc SMS(Registro Usuario 1)","excluidos SMS","select to_char(ur.USU_FECHA_CERTIFICACION,'rrrr/mm/dd') FechaCertificacion, count(1) cantidad
from sacar.sac_usuario u, sacar.sac_usuario_registro ur
where 0=0
and u.USUARIO_ID=ur.USUARIO_ID
and u.TIUS_ID <> 3 
and trunc(ur.USU_FECHA_CERTIFICACION) between trunc(sysdate)-22 and trunc(sysdate)-1
group by to_char(ur.USU_FECHA_CERTIFICACION,'rrrr/mm/dd')
order by to_char(ur.USU_FECHA_CERTIFICACION,'rrrr/mm/dd')",2
"MO - usuarios no certificados en el dia que ingreso-Exc SMS(Registro Usuario 4)","Exc. SMS","select to_char(u.USU_FECHA_ingreso,'rrrr/mm/dd') FechaIngreso, count(1) cantidad
from sacar.sac_usuario u, sacar.sac_usuario_registro ur
where 0=0
and u.USUARIO_ID=ur.USUARIO_ID
and ur.USU_FECHA_CERTIFICACION is null
and u.TIUS_ID <> 3 
and trunc(u.USU_FECHA_INGRESO)  between trunc(sysdate)-22 and trunc(sysdate)-1
group by to_char(u.USU_FECHA_ingreso,'rrrr/mm/dd')
order by to_char(u.USU_FECHA_ingreso,'rrrr/mm/dd')",2
"MO - Ventas de Ayer x Tipo Usuario (Reporte Diario 2)","Ventas de Ayer x Tipo Usuario (Reporte Diario 2)","select  t.tius_descripcion TIPO_USR, count(*) CANTIDAD
from sacar.sac_usuario a,
     sacar.sac_movimiento b,
     sacar.sac_aviso c,
     sacar.sac_tipo_usuario t
where   0=0 
and b.av_id = c.av_id
and a.usuario_id = c.usuario_id
and a.portal_id = c.portal_id
and a.tius_id = t.tius_id
and trunc(b.mov_fecha_creacion) = trunc(sysdate - 1)
group by t.tius_descripcion",2
"MO - Registro usuario mensual",Registro_usuario_mensual,"select to_char(trunc(sysdate-5,'MONTH'),'dd/mm/yyyy') Primer_DIA
,to_char((round(sysdate,'MONTH')-1),'dd/mm/yyyy')ULTIMO_DIA
,count(1) cantidad
from sacar.sac_usuario u,sacar.sac_usuario_registro ur
where 0=0
and u.USUARIO_ID=ur.USUARIO_ID
and ur.ESTADO_REGISTRO_ID=1
and u.TIUS_ID <> 3 --Excluimos los SMS
and trunc(u.USU_FECHA_ingreso) between trunc(sysdate-5,'MM') and last_day (sysdate-1)
order by 1",2
"Club Cupon - Altas de usuarios por día","Altas de usuarios por día","select * from (
(
select 'TOTAL' fecha_alta, count(*) cantidad
from users
)

UNION
(
select DATE_FORMAT(created, '%Y-%m-%d') fecha_alta, count(*) cantidad
from users
group by DATE_FORMAT(created, '%Y-%m-%d')
)
) t
order by 1 desc
",1
"Club Cupon - Altas de usuarios por día - TODOS","Altas de usuarios por día","select * from (
(
select 'TOTAL' fecha_alta, count(*) cantidad
from users
)

UNION
(
select DATE_FORMAT(created, '%Y-%m-%d') fecha_alta, count(*) cantidad
from users
group by DATE_FORMAT(created, '%Y-%m-%d')
)
) t
order by 1 desc
",1
"Club Cupon - Apertura de pagos pendientes","Apertura de pagos pendientes","select *
from (
select date(de.created) fecha_pago, case pt.gateway_key when 'dim' then 'MP' else gateway_key end as gateway, pt.name medio_pago, count(*) transacciones_pendientes, sum(de.quantity) cupones_pendientes,
  (select count(*) from deal_externals de1 where external_status = 'A' and de1.payment_type_id = de.payment_type_id and date(de1.created) = date(de.created)) transacciones_acreditadas,
  (select sum(quantity) from deal_externals de1 where external_status = 'A' and de1.payment_type_id = de.payment_type_id and date(de1.created) = date(de.created)) cupones_acreditados,
  (select count(*) from deal_externals de1 where external_status = 'C' and de1.payment_type_id = de.payment_type_id and date(de1.created) = date(de.created)) transacciones_canceladas,
  (select sum(quantity) from deal_externals de1 where external_status = 'C' and de1.payment_type_id = de.payment_type_id and date(de1.created) = date(de.created)) cupones_cancelados
from deal_externals de, payment_types pt
where external_status = 'P'
and de.payment_type_id = pt.id
group by date(de.created), pt.gateway_key, pt.name
order by 1,2
) t;",1
"Club Cupon - Apertura de pagos pendientes por oferta","Apertura de pagos pendientes por oferta","select *
from (
select date(de.created) fecha_pago, case pt.gateway_key when 'dim' then 'MP' else gateway_key end as gateway, pt.name medio_pago, count(*) transacciones_pendientes, sum(de.quantity) cupones_pendientes,
  (select count(*) from deal_externals de1 where external_status = 'A' and de1.payment_type_id = de.payment_type_id and date(de1.created) = date(de.created) and de1.deal_id = $P{CC_Deal_Pending}) transacciones_acreditadas,
  (select sum(quantity) from deal_externals de1 where external_status = 'A' and de1.payment_type_id = de.payment_type_id and date(de1.created) = date(de.created) and de1.deal_id = $P{CC_Deal_Pending}) cupones_acreditados,
  (select count(*) from deal_externals de1 where external_status = 'C' and de1.payment_type_id = de.payment_type_id and date(de1.created) = date(de.created) and de1.deal_id = $P{CC_Deal_Pending}) transacciones_canceladas,
  (select sum(quantity) from deal_externals de1 where external_status = 'C' and de1.payment_type_id = de.payment_type_id and date(de1.created) = date(de.created) and de1.deal_id = $P{CC_Deal_Pending}) cupones_cancelados
from deal_externals de, payment_types pt
where external_status = 'P'
and de.payment_type_id = pt.id
and de.deal_id = $P{CC_Deal_Pending}
group by date(de.created), pt.gateway_key, pt.name
order by 1,2
) t;",1
"Club Cupon - Cantidad de cupones redimidos por deal","Cantidad de cupones redimidos por deal","(
SELECT e.start_date,
       cast(c.name as char) company,
       cast(e.name as char) deal,
       e.discounted_price precio_cupon,
       sum(d.quantity) cupones_vendidos,
       sum(d.is_used) cupones_redimidos,
       CASE e.risk
            WHEN 1 then 'Bajo'
            WHEN 2 then 'Medio'
            WHEN 3 then 'Alto'
                   else 'N/A'
       END 'Riesgo',
       e.discounted_price * sum(d.quantity) facturacion_empresa,
       sum(e.discounted_price * (e.commission_percentage / 100) ) comision,
       CASE e.pay_by_redeemed
            WHEN 0 then 'No'
            WHEN 1 then 'Si'
                   else 'N/A'
       END 'Pago por Redimidos'
FROM deal_users d, deals e, companies c
where d.deal_id = e.id
and e.company_id = c.id
AND e.start_date BETWEEN $P{CC_fecha_desde} AND $P{CC_fecha_hasta}
group by e.start_date, c.name, e.name
order by start_date desc
)
UNION
(
select now(), 'TOTAL', 'TOTAL', null, sum(d.quantity), sum(d.is_used), null, null,
      sum(e.discounted_price * (e.commission_percentage / 100))  ganancia, null
from deal_users d, deals e, companies c
where d.deal_id = e.id
and d.is_used = 1
and e.company_id = c.id
AND e.start_date BETWEEN $P{CC_fecha_desde} AND $P{CC_fecha_hasta}
);",1
"Club Cupon - Cantidad de cupones vendidos por deal","Cantidad de cupones vendidos por deal","(
SELECT e.start_date,
       cast(c.name as char) company,
       cast(e.name as char) deal,
       e.discounted_price precio_cupon,
       sum(d.quantity) cupones_vendidos,
       CASE e.risk
            WHEN 1 then 'Bajo'
            WHEN 2 then 'Medio'
            WHEN 3 then 'Alto'
                   else 'N/A'
       END 'Riesgo',
       e.discounted_price * sum(d.quantity) facturacion_empresa,
       sum(e.discounted_price * (e.commission_percentage / 100) ) comision,
       CASE e.pay_by_redeemed
            WHEN 0 then 'No'
            WHEN 1 then 'Si'
                   else 'N/A'
       END 'Pago por Redimidos'
FROM deal_users d, deals e, companies c
where d.deal_id = e.id
and e.company_id = c.id
AND e.start_date BETWEEN $P{CC_fecha_desde} AND $P{CC_fecha_hasta}
group by e.start_date, c.name, e.name
order by start_date desc
)
UNION
(
select now(), 'TOTAL', 'TOTAL', null, sum(d.quantity), null, null,
      sum(e.discounted_price * (e.commission_percentage / 100))  ganancia, null
from deal_users d, deals e, companies c
where d.deal_id = e.id
and e.company_id = c.id
AND e.start_date BETWEEN $P{CC_fecha_desde} AND $P{CC_fecha_hasta}
);",1
"Club Cupon - Cantidad de cupones vendidos por deal con q de suscriptores (ultimos 30 dias)","Cantidad de cupones vendidos por deal","select *
from (
(
SELECT e.start_date,
       cast(c.name as char) company,
       cast(e.name as char) deal,
       e.discounted_price precio_cupon,
       sum(d.quantity) cupones_vendidos,
       e.discounted_price * sum(d.quantity) facturacion_empresa,
       sum(e.discounted_price * (e.commission_percentage / 100) ) comision,
       CASE e.pay_by_redeemed
            WHEN 0 then 'No'
            WHEN 1 then 'Si'
                   else 'N/A'
       END 'Pago por Redimidos',
( select count(*) from subscriptions where created < e.start_date and (is_subscribed = 1 or  ( is_subscribed = 0 and modified > e.start_date ) ) ) suscriptores
FROM deal_users d, deals e, companies c
where d.deal_id = e.id
and e.company_id = c.id
and start_date > ADDDATE(now(), -30)
and start_date < now()
group by e.start_date, c.name, e.name
)
UNION
(
select now(), 'TOTAL', 'TOTAL', null, sum(d.quantity), null,
      sum(e.discounted_price * (e.commission_percentage / 100))  ganancia, null, null
from deal_users d, deals e, companies c
where d.deal_id = e.id
and e.company_id = c.id
and start_date > ADDDATE(now(), -30)
and start_date < now()
)
) t
order by t.start_date desc
;
",1
"Club Cupon - Cantidad de cupones vendidos por origen de suscripcion y oferta","Cantidad de cupones vendidos por origen de suscripcion y oferta","select *
from (
select origenes.name, date(sii.created) fecha, sii.name origen, origenes.cantidad
from (
select substr(cast(concat(date_format(d.start_date, '%Y/%m/%d'),' - ',c.name,' - ',d.name) AS char),1,60) name, import_instance_id, count(*) cantidad
FROM subscription_origin so, subscriptions s, deal_users du, deals d, companies c
where so.subscription_id = s.id
and s.user_id = du.user_id
and du.deal_id = d.id
and s.user_id is not null
and d.company_id = c.id
and d.id = $P{CC_Deal}
group by d.name, import_instance_id
) origenes, subscription_import_instances sii
where origenes.import_instance_id = sii.id
union
select substr(cast(concat(date_format(d.start_date, '%Y/%m/%d'),' - ',c.name,' - ',d.name) AS char),1,60) name, null, 'Voluntaria', count(*)
from subscriptions s, deal_users du, deals d, companies c
where not exists (
  select 1 from subscription_origin o
  where s.id = o.subscription_id
  )
and s.user_id is not null
and s.user_id = du.user_id
and du.deal_id = d.id
and d.company_id = c.id
and d.id = $P{CC_Deal}
group by d.name
union
select substr(cast(concat(date_format(d.start_date, '%Y/%m/%d'),' - ',c.name,' - ',d.name) AS char),1,60) name, null, 'Total', count(*)
from subscriptions s, deal_users du, deals d, companies c
where s.user_id is not null
and s.user_id = du.user_id
and du.deal_id = d.id
and d.company_id = c.id
and d.id = $P{CC_Deal}
group by d.name
) t
order by 1,2,3
;",1
"Club Cupon - Cantidad de suscriptos por antigüedad de suscripcion","Cantidad de suscriptos por antigüedad de suscripcion","select PERIOD_DIFF(EXTRACT(YEAR_MONTH FROM now()),EXTRACT(YEAR_MONTH FROM created)) antiguedad_suscripcion, count(*) cantidad
from subscriptions
where date(created) >= $P{CC_fecha_desde}
and date(created) <= $P{CC_fecha_hasta}
group by PERIOD_DIFF(EXTRACT(YEAR_MONTH FROM now()),EXTRACT(YEAR_MONTH FROM created))
order by 1
;",1
"Club Cupon - Cantidad de suscriptos y cupones acumulados y por periodo","Cantidad de suscriptos y cupones acumulados y por periodo","select fechas.antiguedad_suscripcion, fechas.mes,         (select count(*) from subscriptions s where EXTRACT(YEAR_MONTH FROM s.created) = fechas.ym           and ((s.city_id = $P{CC_City}) or ($P{CC_City} = -1) or ($P{CC_City} = -2) )           and ( $P{CC_Suscripcion} = 'TODOS'               or ( $P{CC_Suscripcion} = 'VOLUNTARIA' and not exists (select 1 from subscription_origin so where s.id = so.subscription_id) )               or ( $P{CC_Suscripcion} = 'FORZADA' and exists (select 1 from subscription_origin so where s.id = so.subscription_id) )           )           and date(s.created) <= $P{CC_fecha_hasta}) subscripciones,         (select count(*) from subscriptions s where is_subscribed = 0 and EXTRACT(YEAR_MONTH FROM s.modified) = fechas.ym           and ( $P{CC_Suscripcion} = 'TODOS'               or ( $P{CC_Suscripcion} = 'VOLUNTARIA' and not exists (select 1 from subscription_origin so where s.id = so.subscription_id) )               or ( $P{CC_Suscripcion} = 'FORZADA' and exists (select 1 from subscription_origin so where s.id = so.subscription_id) )           )           and date(s.created) <= $P{CC_fecha_hasta} ) bajas_del_mes,         (select count(*) from subscriptions s           where ( ( is_subscribed = 1 and EXTRACT(YEAR_MONTH FROM s.created) <= fechas.ym )              or ( is_subscribed = 0 and EXTRACT(YEAR_MONTH FROM s.created) <= fechas.ym and EXTRACT(YEAR_MONTH FROM s.modified) > fechas.ym ) )              and ( $P{CC_Suscripcion} = 'TODOS'               or ( $P{CC_Suscripcion} = 'VOLUNTARIA' and not exists (select 1 from subscription_origin so where s.id = so.subscription_id) )               or ( $P{CC_Suscripcion} = 'FORZADA' and exists (select 1 from subscription_origin so where s.id = so.subscription_id) )           )           and date(s.created) <= $P{CC_fecha_hasta} ) base_activa,         (select sum(du.quantity) from deal_users du, users u, subscriptions s where du.user_id = u.id and u.id = s.user_id           and EXTRACT(YEAR_MONTH FROM s.created) = fechas.ym           and ((s.city_id = $P{CC_City}) or ($P{CC_City} = -1) or ($P{CC_City} = -2) )           and ( $P{CC_Suscripcion} = 'TODOS'               or ( $P{CC_Suscripcion} = 'VOLUNTARIA' and not exists (select 1 from subscription_origin so where s.id = so.subscription_id) )               or ( $P{CC_Suscripcion} = 'FORZADA' and exists (select 1 from subscription_origin so where s.id = so.subscription_id) )           )           and date(s.created) <= $P{CC_fecha_hasta}) cupones_acumulados,         (select count(distinct u.id) from deal_users du, users u, subscriptions s where du.user_id = u.id and u.id = s.user_id           and EXTRACT(YEAR_MONTH FROM s.created) = fechas.ym           and ((s.city_id = $P{CC_City}) or ($P{CC_City} = -1) or ($P{CC_City} = -2) )           and ( $P{CC_Suscripcion} = 'TODOS'               or ( $P{CC_Suscripcion} = 'VOLUNTARIA' and not exists (select 1 from subscription_origin so where s.id = so.subscription_id) )               or ( $P{CC_Suscripcion} = 'FORZADA' and exists (select 1 from subscription_origin so where s.id = so.subscription_id) )           )           and date(s.created) <= $P{CC_fecha_hasta}) subscriptos_que_compraron,         (select sum(du.quantity) from deal_users du, users u, subscriptions s where du.user_id = u.id and u.id = s.user_id           and EXTRACT(YEAR_MONTH FROM du.created) = fechas.ym           and EXTRACT(YEAR_MONTH FROM s.created) = fechas.ym           and ((s.city_id = $P{CC_City}) or ($P{CC_City} = -1) or ($P{CC_City} = -2) )           and ( $P{CC_Suscripcion} = 'TODOS'               or ( $P{CC_Suscripcion} = 'VOLUNTARIA' and not exists (select 1 from subscription_origin so where s.id = so.subscription_id) )               or ( $P{CC_Suscripcion} = 'FORZADA' and exists (select 1 from subscription_origin so where s.id = so.subscription_id) )           )           and date(s.created) <= $P{CC_fecha_hasta}) cupones_periodo,         (select sum(du.quantity) from deal_users du, users...",1
"Club Cupon - Comercios",Comercios,"SELECT *
FROM companies c
where date(created) >= date($P{CC_fecha_desde})
and date(created) <= date($P{CC_fecha_hasta})
;",1
"Club Cupon - Consistencia - Pagos acreditados con montos inconsistentes","Pagos tales que el monto final no se corresponde con la cantidad por el monto descontado (menos el monto interno)","SELECT t.name,
       t.id,
       CAST(d.id AS CHAR) deal_external_id,
       CAST(d.deal_id AS CHAR) deal_id,
       CAST(u.id AS CHAR) user_id,
       u.email,
       u.username,
       CASE u.user_type_id WHEN 1 THEN 'admin' WHEN 2 THEN 'web' WHEN 3 then 'company' WHEN 4 then 'agency' END user_type_id,
       CAST(u.fb_user_id AS CHAR) fb_user_id,
       CAST(u.bac_user_id AS CHAR) bac_user_id,
       CAST(d.payment_type_id AS CHAR) payment_type_id,
       d.quantity,
       e.discounted_price * d.quantity - d.internal_amount monto,
       d.final_amount,
       CASE d.external_status WHEN 'C' then 'Cancelado' WHEN 'A' then 'Acreditado' WHEN 'P' then 'Pendiente' END external_status,
       d.created,
       d.updated,
       d.is_gift,
       d.payment_type_id
FROM deal_externals d, users u, deals e, cities t
where e.city_id = t.id
and d.user_id = u.id
and d.deal_id = e.id
and deal_id = $P{CC_Deal}
and d.created >= $P{CC_fecha_desde}
and d.created <= $P{CC_fecha_hasta}
and ( $P{CC_Estado_Pago} = 'Todos'
or $P{CC_Estado_Pago} = (CASE d.external_status WHEN 'C' then 'Cancelado' WHEN 'A' then 'Acreditado' WHEN 'P' then 'Pendiente' END) )
and (d.quantity * e.discounted_price - d.internal_amount) <> d.final_amount;",1
"Club Cupon - Consistencia - Pagos acreditados vs cupones","Deals con distinta cantidad de pagos acreditados y cupones generados","SELECT *
FROM   (SELECT d.id DEAL,
               date_format(d.start_date, '%Y/%m/%d') AS Fecha,
               d.name AS Descripcion,
               p.user_id,
               u.username,
               u.email,
               p.cantidad AS Cupones_pagos,
               ifnull((SELECT sum(quantity) cantidad
                       FROM   deal_users du
                       WHERE  du.deal_id = d.id AND du.user_id = u.id),
                      0)
                 AS Cupones_disponibles,
               ifnull((SELECT sum(quantity) cantidad
                       FROM   anulled_coupons du
                       WHERE  du.deal_id = d.id AND du.user_id = u.id),
                      0)
                 AS Cupones_anulados
        FROM   deals d,
               users u,
               (SELECT   deal_id, user_id, sum(quantity) AS cantidad
                FROM     deal_externals de
                WHERE    1 = 1 AND external_status = 'A'
                GROUP BY deal_id, user_id) p
        WHERE  1 = 1 AND p.user_id = u.id AND d.id = p.deal_id AND date(d.start_date) >= $P{CC_fecha_desde} AND  date(d.start_date) <= $P{CC_fecha_hasta}) as x
WHERE  (cupones_disponibles = 0 OR Cupones_pagos <> cupones_disponibles);",1
"Club Cupon - Consulta de pagos por id","Consulta de pagos por id","select * from (
select
      (select count(*) from deal_users where deal_external_id = de.id) cupones,
      de.id id_pago,
      d.id id_oferta,
      d.name oferta,
      d.start_date fecha_oferta,
      u.id id_usuario,
      u.username username,
      u.email,
      (select name from payment_types where id = de.payment_type_id) payment_type,
      de.internal_amount,
      de.final_amount,
      de.parcial_amount,
      de.external_status estado_pago
from deal_externals de, deals d, users u
where de.deal_id = d.id
and de.user_id = u.id
and de.id = $P{CC_Deal_External_Id}
) t",1
"Club Cupon - Cupones anulados por fecha","Cupones anulados por fecha","SELECT u.username,
       u.email,
       u.bac_user_id,
       date_format(e.start_date,'%Y/%m/%d') start_date,
       substr(cast(c.name as char),1,60) company,
       substr(cast(e.name as char),1,60) deal,
       CASE e.risk
            WHEN 1 then 'Bajo'
            WHEN 2 then 'Medio'
            WHEN 3 then 'Alto'
                   else 'N/A'
       END 'Riesgo',
       CASE e.pay_by_redeemed
            WHEN 0 then 'No'
            WHEN 1 then 'Si'
                   else 'N/A'
       END 'Pago por Redimidos',
       d.coupon_code, d.pin_code, d.quantity, e.discounted_price, d.created, d.modified, d.is_paid, d.is_gift, d.gift_to, d.is_used, d.emailed, d.email_to_company
FROM anulled_coupons d, users u, deals e, companies c
WHERE d.user_id = u.id
and d.deal_id = e.id
and e.company_id = c.id
and e.start_date >= $P{CC_fecha_desde}
and e.start_date <= $P{CC_fecha_hasta}",1
"Club Cupon - Cupones generados en meses posteriores","Cupones generados en meses posteriores","select * from (
select d.id id_oferta, d.start_date fecha_promocion, c.name nombre_fantasia, c.fiscal_name razon_social,
       c.fiscal_cuit cuit, e.name localidad, d.name nombre_promocion,
       ( select count(*) from deal_users du where d.id = du.deal_id and month(d.start_date) = month (du.created)) cupones_generados_mes_oferta,
       ( select count(*) from deal_users du where d.id = du.deal_id and month(d.start_date) <> month (du.created)) cupones_generados_mes_posterior,
concat('<form method=""get"" name=""reportDetail"" action=""http://openreports.masoportunidades.int.clarin.com:1983/openreports/reportDetail.action""><input type=""hidden"" value=""',d.id,'"" name=""CC_Deal""><input type=""submit"" name=""submitType"" value=""Ok"" class=""standardButton""><input type=""hidden"" value=""128514"" name=""reportId""><input type=""hidden"" value=""0"" name=""step""><input type=""hidden"" value=""false"" name=""displayInline""></form>') ver
from deals d, companies c, cities e
where d.company_id = c.id
and d.city_id = e.id
and exists (
  select 1
  from deal_externals de
  where d.id = de.deal_id
  and month(d.start_date) <> month (de.updated)
  and external_status = 'A'
)
) t
;",1
"Club Cupon - Cupones generados por día de un deal determinado","Cupones generados por día de un deal determinado","select date(du.created) fecha, count(*) cupones
from deal_users du
where du.deal_id = $P{CC_Deal}
group by date(du.created)
;",1
"Club Cupon - Cupones por medio de pago","Cupones por medio de pago","select * from (
select pt.name medio_pago,
       case de.external_status when 'A' then 'Acreditado' when 'C' then 'Cancelado' else 'Pendiente' end estado,
       sum(de.quantity) cantidad_cupones, sum(final_amount) monto_total, avg(final_amount) monto_promedio
from deal_users du, deal_externals de, payment_types pt
where du.deal_external_id = de.id
and de.payment_type_id = pt.id
and de.created >= $P{CC_fecha_desde}
and de.created <= $P{CC_fecha_hasta}
group by pt.name, de.external_status
order by 1,2
) t",1
"Club Cupon - Cupones vendidos","Cupones vendidos","(SELECT u.username, u.email, u.bac_user_id,
       date_format(e.start_date,'%Y/%m/%d') start_date,
       substr(cast(c.name as char),1,60) company,
       substr(cast(e.name as char),1,60) deal,
       d.coupon_code, d.pin_code, d.quantity, e.discounted_price, d.created, d.modified, d.is_paid, d.is_gift, d.gift_to, d.is_used, d.emailed, d.email_to_company,
       'VALIDO' condicion,
       ( select bac_id from deal_externals de where de.id = d.deal_external_id ) id_pago_bac
FROM deal_users d, users u, deals e, companies c
WHERE d.user_id = u.id
and d.deal_id = e.id
and e.company_id = c.id
and ( u.username like concat('%',$P{CC_username},'%') or $P{CC_username} = 'Todos' )
and ( u.email like concat('%',$P{CC_user_email},'%') or $P{CC_user_email} = 'Todos' )
and ( c.name like concat('%',$P{CC_company_like},'%') or $P{CC_company_like} = 'Todas' )
and e.id = $P{CC_Deal})
UNION ALL
(SELECT u.username, u.email, u.bac_user_id,
       date_format(e.start_date,'%Y/%m/%d') start_date,
       substr(cast(c.name as char),1,60) company,
       substr(cast(e.name as char),1,60) deal,
       a.coupon_code, a.pin_code, a.quantity, e.discounted_price, a.created, a.modified, a.is_paid, a.is_gift, a.gift_to, a.is_used, a.emailed, a.email_to_company,
       'ANULADO' condicion,
       ( select bac_id from deal_externals de where de.id = a.deal_external_id ) id_pago_bac
FROM anulled_coupons a, users u, deals e, companies c
WHERE a.user_id = u.id
and a.deal_id = e.id
and e.company_id = c.id
and ( u.username like concat('%',$P{CC_username},'%') or $P{CC_username} = 'Todos' )
and ( u.email like concat('%',$P{CC_user_email},'%') or $P{CC_user_email} = 'Todos' )
and ( c.name like concat('%',$P{CC_company_like},'%') or $P{CC_company_like} = 'Todas' )
and e.id = $P{CC_Deal})
;",1
"Club Cupon - Cupones vendidos por fecha","Cupones vendidos por fecha","(SELECT d.deal_id deal_id, date_format(e.start_date,'%Y/%m/%d') start_date,
        date_format(x.created,'%Y/%m/%d %H:%i') buy_date,
       u.username,
       u.email,
       substr(cast(e.name as char),1,60) deal,
       e.discounted_price,
       CASE e.risk
            WHEN 1 then 'Bajo'
            WHEN 2 then 'Medio'
            WHEN 3 then 'Alto'
                   else 'N/A'
       END 'Riesgo',
       substr(cast(c.name as char),1,60) company,
       u.bac_user_id,
       d.coupon_code,
       d.pin_code,
       d.quantity,
       d.created,
       d.modified,
       d.is_paid,
       d.is_gift,
       d.gift_to,
       d.is_used,
       d.emailed,
       d.email_to_company,
       'VALIDO' condicion,
        d.paid_date fecha_facturacion_comision
FROM deal_users d, users u, deals e, companies c, deal_externals x
WHERE d.user_id = u.id
and d.deal_id = e.id
and e.company_id = c.id
and d.deal_external_id = x.id
AND e.start_date BETWEEN $P{CC_fecha_desde} AND $P{CC_fecha_hasta}
and ( c.name like concat('%',$P{CC_company_like},'%') or $P{CC_company_like} = 'Todas' )
order by e.start_date asc)
UNION ALL
(SELECT e.id deal_id, date_format(e.start_date,'%Y/%m/%d') start_date,
        date_format(x.created,'%Y/%m/%d %H:%i') buy_date,
       u.username,
       u.email,
       substr(cast(e.name as char),1,60) deal,
       e.discounted_price,
       CASE e.risk
            WHEN 1 then 'Bajo'
            WHEN 2 then 'Medio'
            WHEN 3 then 'Alto'
                   else 'N/A'
       END 'Riesgo',
       substr(cast(c.name as char),1,60) company,
       u.bac_user_id,
       a.coupon_code,
       a.pin_code,
       a.quantity,
       a.created,
       a.modified,
       a.is_paid,
       a.is_gift,
       a.gift_to,
       a.is_used,
       a.emailed,
       a.email_to_company,
       'ANULADO' condicion,
       a.paid_date
FROM anulled_coupons a, users u, deals e, companies c, deal_externals x
WHERE a.user_id = u.id
and a.deal_id = e.id
and e.company_id = c.id
and a.deal_external_id = x.id
AND e.start_date BETWEEN $P{CC_fecha_desde} AND $P{CC_fecha_hasta}
and ( c.name like concat('%',$P{CC_company_like},'%') or $P{CC_company_like} = 'Todas' )
order by e.start_date asc)
;
",1
"Club Cupon - Deals por medio de pago","Deals por medio de pago","select *
from (
select d.deal_id, e.start_date, e.name deal,
CASE e.risk
     WHEN 1 then 'Bajo'
     WHEN 2 then 'Medio'
     WHEN 3 then 'Alto'
            else 'N/A'
END 'Riesgo',
p.name tipo_pago, count(*) cantidad,
       CASE e.pay_by_redeemed
            WHEN 0 then 'No'
            WHEN 1 then 'Si'
                   else 'N/A'
       END 'Pago por Redimidos'
from deal_externals d, payment_types p, deals e
where d.payment_type_id = p.id
and d.deal_id = e.id
and external_status = 'A'
group by d.deal_id, e.start_date, e.name, p.name
) t
order by start_date desc, deal_id, cantidad",1
"Club Cupon - Empresas",Empresas,"SELECT c.id, c.created, c.modified, c.name, c.address1, c.address2, i.name city, c.phone, c.zip, c.url,
          c.fiscal_city_id, c.fiscal_name, c.fiscal_address, c.fiscal_phone, c.fiscal_fax, c.fiscal_cuit, c.fiscal_iibb,
          c.fiscal_cond_iva, c.fiscal_bank, c.fiscal_bank_account, c.fiscal_bank_cbu, c.bac_user_id, u.email
FROM companies c, users u, cities i
where c.user_id = u.id
and c.city_id = i.id
;",1
"Club Cupon - Listado de cupones no enviados","Club Cupon - Listado de cupones no enviados","SELECT d.created,
       u.email,
       u.username,
       dd.name,
       CASE dd.risk
            WHEN 1 then 'Bajo'
            WHEN 2 then 'Medio'
            WHEN 3 then 'Alto'
                   else 'N/A'
       END 'Riesgo',
       d.coupon_code
FROM deal_users d, users u, deals dd
where emailed = 0
and d.user_id = u.id
and d.deal_id = dd.id;",1
"Club Cupon - Listado de empresas con datos de facturación incompletos o inconsistentes","Listado de empresas con datos de facturación incompletos o inconsistentes","select *
from companies c1
where fiscal_city_id is null
or fiscal_address is null
or fiscal_state_id is null
or fiscal_phone is null
or fiscal_cuit is null
or fiscal_iibb is null
or fiscal_cond_iva is null
or fiscal_bank is null
or fiscal_bank_account is null
or fiscal_bank_cbu is null
or fiscal_bank_cbu = ''
or fiscal_iibb is null
or fiscal_iibb = ''
or 1 < (select count(*) from companies c2 where c2.fiscal_iibb = c1.fiscal_iibb )
or 1 < (select count(*) from companies c2 where c2.fiscal_bank_cbu = c1.fiscal_bank_cbu )
;",1
"Club Cupon - Mail diario","Mail diario","select * from (
select
substr( cast( concat(date_format(d.start_date, '%Y/%m/%d'),
                          ' - ',
                          c.name,
                          ' - ',
                          d.name) as char), 1,50) oferta,
i.name localidad,
d.is_side_deal destacado_lateral,
      d.start_date fecha_inicio,
d.end_date fecha_finalizacion,
      d.original_price precio_original,
d.discounted_price precio_con_descuento,
      d.discount_percentage porcentaje_a_descontar,
d.discount_amount importe_a_descontar,
      d.min_limit minimo, d.max_limit maximo,
      d.deal_user_count cantidad_vendida,
      d.total_purchased_amount monto_total_de_la_compra,
      d.bonus_amount costo_fijo,
      d.commission_percentage porcentaje_de_comision,
      CASE d.pay_by_redeemed
           WHEN 0 then 'No'
           WHEN 1 then 'Si'
                  else 'N/A'
      END 'Pago por Redimidos'
from deals d, users u, companies c, cities i
where d.user_id = u.id
and d.company_id = c.id
and d.city_id = i.id
and start_date > ADDDATE(now(), -30)
and start_date < now()
) t
order by fecha_inicio desc;",1
"Club Cupon - Ofertas",Ofertas,"select * from (  select  d.id deal_id,  d.created,  d.name oferta,  u.username usuario,  c.name empresa,  c.fiscal_name razon_social,  c.fiscal_cuit cuit,  i.name localidad,  d.is_side_deal destacado_lateral,        d.start_date fecha_inicio, d.end_date fecha_finalizacion,        d.original_price precio_original, d.discounted_price precio_con_descuento,        d.discount_percentage porcentaje_a_descontar, d.discount_amount importe_a_descontar,        CASE d.risk             WHEN 1 then 'Bajo'             WHEN 2 then 'Medio'             WHEN 3 then 'Alto'                    else 'N/A'        END 'Riesgo',        d.min_limit minimo, d.max_limit maximo,        (select sum(quantity) from deal_users du1 where du1.deal_id = d.id )  cantidad_vendida,        (select sum(quantity)*d.discounted_price from deal_users du1 where du1.deal_id = d.id )  monto_total_de_la_compra,        (select sum(internal_amount) from deal_externals du1 where du1.deal_id = d.id and external_status = 'A' )  monto_pagado_monedero,        d.bonus_amount costo_fijo,        d.commission_percentage porcentaje_de_comision,        CASE d.pay_by_redeemed             WHEN 0 then 'No'             WHEN 1 then 'Si'                    else 'N/A'        END 'Pago por Redimidos',        d.comment notas_privadas,        d.downpayment_percentage 'Fondo de garantia',        (select sum(quantity) from deal_users du1 where du1.deal_id = d.id and paid_date is not null ) cupones_ya_facturados,        (select sum(quantity) from deal_users du1 where du1.deal_id = d.id and paid_date is null ) cupones_a_facturar,        (select count(*) from anulled_coupons ac where ac.deal_id = d.id) cupones_anulados  from deals d, users u, companies c, cities i  where d.user_id = u.id  and d.company_id = c.id  and d.city_id = i.id  and ( d.deal_status_id = $P{CC_deal_status} or $P{CC_deal_status} = 0 )  ) t;",1
"Club Cupon - Ofertas TODOS",Ofertas,"select
deals.created,
deals.name,
users.username,
companies.empresas,
cities.localidad,
deals.is_side_deal,
deals.start_date,
deals.end_date,
deals.original_price,
deals.discounted_price,
deals.discount_percentage,
deals.discount_amount,
deals.min_limit,
deals.max_limit,
deals.deal_user_count,
deals.total_purchased_amount,
deals.bonus_amount,
deals.commission_percentage,
CASE deals.pay_by_redeemed
WHEN 0 then 'No'
WHEN 1 then 'Si'
else 'N/A'
END 'Pago por Redimidos',
deals.comment
from deals,users,(select companies.id, companies.name as empresas from companies) companies,(select cities.id, cities.name as localidad from cities) cities
where deals.user_id = users.id
and deals.company_id = companies.id
and deals.city_id = cities.id
and start_date > ADDDATE(now(), -30)
and start_date < now()
order by start_date desc
;",1
"Club Cupon - Ofertas de mañana","Ofertas de mañana","select * from
(
select d.id, d.name oferta,
       co.name empresa,
       ci.name loc,
       u.username vend,
       d.start_date inicio,
       d.end_date fin,
       d.coupon_duration validez,
       d.max_limit max_comp,
       d.buy_max_quantity_per_user max_compra,
       d.is_side_deal lateral,
       d.is_tourism turismo,
       d.hide_price oculta_precio,
       d.only_price solo_precio,
       d.original_price poriginal,
       d.discounted_price pdescuento,
       d.discount_percentage descuento,
       d.commission_percentage comision
from deals d, companies co, cities ci, deal_categories dc, users u
where d.company_id = co.id
and d.city_id = ci.id
and u.id = d.seller_id
and dc.id = d.deal_category_id
and date(d.start_date) = date(DATE_ADD(now(), INTERVAL 1 DAY))
order by ci.name
) t
;",1
"Club Cupon - Ofertas faltas de PINes","Ofertas faltas de PINes","select * from
  (
    select
      d.id,
      d.created,
      d.name oferta, 
      u.username usuario, 
      c.name empresa, 
      i.name localidad, 
      d.is_side_deal destacado_lateral,
      d.start_date fecha_inicio, d.end_date fecha_finalizacion,
      d.original_price precio_original, d.discounted_price precio_con_descuento,
      d.discount_percentage porcentaje_a_descontar, d.discount_amount importe_a_descontar,
      CASE d.risk
        WHEN 1 then 'Bajo'
        WHEN 2 then 'Medio'
        WHEN 3 then 'Alto'
        else 'N/A'
      END 'Riesgo',
      d.min_limit minimo, d.max_limit maximo,
      d.deal_user_count cantidad_vendida,
      d.total_purchased_amount monto_total_de_la_compra,
      d.bonus_amount costo_fijo,
      d.commission_percentage porcentaje_de_comision,
      CASE d.pay_by_redeemed
           WHEN 0 then 'No'
           WHEN 1 then 'Si'
                  else 'N/A'
      END 'Pago por Redimidos',
      d.comment notas_privadas
    from deals d, users u, companies c, cities i
    where d.user_id = u.id
      and d.company_id = c.id
      and d.city_id = i.id
      and d.has_pins = true
      and not exists (select * from pins where deal_id = d.id)
) t;",1
"Club Cupon - Pagos",Pagos,"select
  *
from
  (select
     c.id as company_id,
     c.`name` as company_name,
     d.id as deal_id,
     d.`name` as deal_name,
     date(d.start_date) as deal_start_date,
     d.discounted_price as deal_price,
     u.id as user_id,
     u.bac_user_id as user_bac_id,
     u.username as user_username,
     u.email as user_email,
     t.id as payment_type_id,
     t.name as payment_type_name,
     e.id as deal_external_id,
     e.external_status as deal_external_status,
     e.quantity as deal_external_quantity,
     d.discounted_price * e.quantity - e.internal_amount as dea_external_amount,
     e.created as deal_external_created,
     e.created_by as deal_external_created_by,
     e.updated as deal_external_modified,
     e.modified_by as deal_external_modified_by,
     e.buy_ip as deal_external_buy_ip
   from
     deals d
     inner join deal_externals e
       on e.deal_id = d.id
     inner join companies c
       on c.id = d.company_id
     inner join users u
       on u.id = e.user_id
     inner join payment_types t
       on t.id = e.payment_type_id) p
where
  p.user_email like $P{CC_email_like}
and p.user_username like $P{CC_username_like}
and p.user_id like $P{CC_user_id_like}
and ifnull(p.deal_external_buy_ip,'{null}') like $P{CC_buy_ip}
and ifnull(p.deal_external_modified_by,'{null}') like $P{CC_modified_by}
and p.deal_external_created >= $P{CC_fecha_desde}
and p.deal_external_created <= $P{CC_fecha_hasta}",1
"Club Cupon - Pagos por deal","Pagos por deal","select * from (
SELECT
        date_format(e.start_date,'%Y-%m-%d') 'Fecha promocion',
        c.name 'Nombre fantasia',
        c.fiscal_name 'Razon social',
        c.fiscal_cuit 'CUIT',
        t.name 'Localidad',
        t.name 'Nombre promocion',
        e.original_price 'Precio original',
        e.discount_percentage 'Descuento %',
        e.discounted_price 'Precio oferta',
        (select IFNULL (sum(quantity),0) from deal_users where deal_id = e.id ) 'Cantidad vendida',
        e.commission_percentage 'Comision %',
        CASE e.pay_by_redeemed
             WHEN 0 then 'No'
             WHEN 1 then 'Si'
                    else 'N/A'
        END 'Pago por Redimidos',
        e.comment 'Nota privada',
        date_format(e.coupon_expiry_date,'%Y-%m-%d') 'Vencimiento cupon',
        CAST(d.id AS CHAR) deal_external_id,
        CAST(u.id AS CHAR) user_id,
        u.email user_email,
        u.username,
        CASE u.user_type_id WHEN 1 THEN 'admin' WHEN 2 THEN 'web' WHEN 3 then 'company' WHEN 4 then 'agency' END user_type_id,
        CAST(u.fb_user_id AS CHAR) fb_user_id,
        CAST(u.bac_user_id AS CHAR) bac_user_id,
        CAST(d.payment_type_id AS CHAR) payment_type_id1,
pt.name medio_pago,
case d.payment_type_id WHEN 60 then 'MP' WHEN 7 then 'MP' WHEN 8 then 'MP' else pt.gateway_key end gateway,
        d.quantity,
        e.discounted_price * d.quantity - d.internal_amount monto,
        CASE d.external_status WHEN 'C' then 'Cancelado' WHEN 'A' then 'Acreditado' WHEN 'P' then 'Pendiente' END external_status,
        d.created,
        d.updated,
        d.is_gift
FROM deal_externals d, users u, deals e, cities t, companies c, payment_types pt
where e.city_id = t.id
and d.user_id = u.id
and d.deal_id = e.id
and e.company_id = c.id
and d.payment_type_id = pt.id
and deal_id = $P{CC_Deal}
and ( $P{CC_Estado_Pago} = 'Todos'
or $P{CC_Estado_Pago} = (CASE d.external_status WHEN 'C' then 'Cancelado' WHEN 'A' then 'Acreditado' WHEN 'P' then 'Pendiente' END) )
) t;",1
"Club Cupon - Pagos por fecha de deal","Pagos por fecha de deal","select * from (
SELECT
        e.id deal_id,
        date_format(e.start_date,'%Y-%m-%d') 'Fecha promocion',
        c.name 'Nombre fantasia',
        c.fiscal_name 'Razon social',
        c.fiscal_cuit 'CUIT',
        t.name 'Localidad',
        t.name 'Nombre promocion',
        e.original_price 'Precio original',
        e.discount_percentage 'Descuento %',
        CASE e.pay_by_redeemed
             WHEN 0 then 'No'
             WHEN 1 then 'Si'
                    else 'N/A'
        END 'Pago por Redimidos',
        e.discounted_price 'Precio oferta',
        (select IFNULL (sum(quantity),0) from deal_users where deal_id = e.id ) 'Cantidad vendida',
        e.commission_percentage 'Comision %',
        e.comment 'Nota privada',
        date_format(e.coupon_expiry_date,'%Y-%m-%d') 'Vencimiento cupon',
        CAST(d.id AS CHAR) deal_external_id,
        CAST(u.id AS CHAR) user_id,
        u.email user_email,
        u.username,
        CASE u.user_type_id WHEN 1 THEN 'admin' WHEN 2 THEN 'web' WHEN 3 then 'company' WHEN 4 then 'agency' END user_type_id,
        CAST(u.fb_user_id AS CHAR) fb_user_id,
        CAST(u.bac_user_id AS CHAR) bac_user_id,
        CAST(d.payment_type_id AS CHAR) payment_type_id1,
        d.quantity,
        e.discounted_price * d.quantity - d.internal_amount monto,
        CASE d.external_status WHEN 'C' then 'Cancelado' WHEN 'A' then 'Acreditado' WHEN 'P' then 'Pendiente' END external_status,
        d.created,
        d.updated,
        d.is_gift
FROM deal_externals d, users u, deals e, cities t, companies c
where e.city_id = t.id
and d.user_id = u.id
and d.deal_id = e.id
and e.company_id = c.id
and date(e.start_date) >= date($P{CC_fecha_desde})
and date(e.start_date) <= date($P{CC_fecha_hasta})
) t
;
",1
"Club Cupon - Pareto de cupones comprados por usuarios","Pareto de cupones comprados por usuarios","select * from (
select `SALES`.`aaa` as cantidad_cupones, count(`SALES`.`user_id`) as cantidad_usuarios
from (
SELECT d.user_id, count(*) as `aaa`
FROM deal_users d
where date(created) >= date($P{CC_fecha_desde})
and date(created) <= date($P{CC_fecha_hasta})
and
(
  $P{CC_City} >= 0
  and
  (
    exists (
    select 1
    from subscriptions s
    where s.user_id = d.user_id
    and city_id = $P{CC_City}
    )
  )
)
or
(
    $P{CC_City} = -1
    and
    ( select count(*) from cities where is_approved = 1 )
    =
    (
    select count(distinct id)
    from subscriptions s
    where s.user_id = d.user_id
    )
)
or
(
    $P{CC_City} = -2
    and
    1
    >=
    (
    select count(distinct id)
    from subscriptions s
    where s.user_id = d.user_id
    )
)
group by d.user_id
) `SALES`
group by 1
) resultado",2
"Club Cupon - Perfiles de compradores (por oferta)","Perfiles de compradores (por oferta)","select * from
(
select d.start_date, c.name company, d.name deal, q.name, a.content, sum(du.quantity) cantidad
from users u, deal_users du, deals d, companies c, user_answers ua, questions q, answers a
where u.id = du.user_id
and du.deal_id = d.id
and d.company_id = c.id
and u.id = ua.user_id
and ua.question_id = q.id
and ua.answer_id = a.id
and d.id = $P{CC_Deal}
group by d.start_date, c.name, d.name, q.name, a.content
UNION
select d.start_date, c.name company, d.name deal, 'TOTAL', 'TOTAL', sum(du.quantity) cantidad
from users u, deal_users du, deals d, companies c
where u.id = du.user_id
and du.deal_id = d.id
and d.company_id = c.id
and d.id = $P{CC_Deal}
group by d.start_date, c.name, d.name
) r
order by 1,2,3,4,5
",1
"Club Cupon - Perfiles de usuarios","Perfiles de usuarios","select u.id, u.username,
    (select a.content from answers a, user_answers ua where ua.user_id = u.id and a.id = ua.answer_id and ua.question_id = 1 ) estado_civil,
    (select a.content from answers a, user_answers ua where ua.user_id = u.id and a.id = ua.answer_id and ua.question_id = 2 ) comida_favorita,
    (select a.content from answers a, user_answers ua where ua.user_id = u.id and a.id = ua.answer_id and ua.question_id = 3 ) salidas,
    (select a.content from answers a, user_answers ua where ua.user_id = u.id and a.id = ua.answer_id and ua.question_id = 4 ) deportes,
    (select a.content from answers a, user_answers ua where ua.user_id = u.id and a.id = ua.answer_id and ua.question_id = 5 ) tiempo_libre,
    (select a.content from answers a, user_answers ua where ua.user_id = u.id and a.id = ua.answer_id and ua.question_id = 6 ) ofertas_interes
from users u
where
(
  $P{CC_City} >= 0
  and
  (
    exists (
    select 1
    from subscriptions s
    where s.user_id = u.id
    and city_id = $P{CC_City}
    )
  )
)
or
(
    $P{CC_City} = -1
    and
    ( select count(*) from cities where is_approved = 1 )
    =
    (
    select count(distinct id)
    from subscriptions s
    where s.user_id = u.id
    )
)
or
(
    $P{CC_City} = -2
    and
    1
    >=
    (
    select count(distinct id)
    from subscriptions s
    where s.user_id = u.id
    )
)

",1
"Club Cupon - Perfiles de usuarios (por atributo)","Perfiles de usuarios (por atributo)","select * from (
(
select q.name, a.content, count(*) cantidad
from user_answers ua, questions q, answers a
where 1=1
and q.id = $P{CC_questions}
and ua.question_id = q.id
and ua.answer_id = a.id
group by q.name, a.content
order by 1,2
)
UNION
(
select 'TOTAL', 'TOTAL', count(*) cantidad
from users u
)) r
;",1
"Club Cupon - Perfiles de usuarios agrupado","Perfiles de usuarios agrupado","select * from (
select 'TODOS LOS USUARIOS' variable, 'TODOS LOS USUARIOS' valor, count(*) cantidad
from users u
where
(
  $P{CC_City} >= 0
  and
  (
    exists (
    select 1
    from subscriptions s
    where s.user_id = u.id
    and city_id = $P{CC_City}
    )
  )
)
or
(
    $P{CC_City} = -1
    and
    ( select count(*) from cities where is_approved = 1 )
    =
    (
    select count(distinct id)
    from subscriptions s
    where s.user_id = u.id
    )
)
or
(
    $P{CC_City} = -2
    and
    1
    >=
    (
    select count(distinct id)
    from subscriptions s
    where s.user_id = u.id
    )
)
UNION
select q.name variable, a.content valor, count(*) cantidad
from answers a, user_answers ua, questions q
where 1=1
and a.id = ua.answer_id
and ua.question_id = q.id
and q.id = $P{CC_questions}
and a.creator = 'backend'
and
(
  $P{CC_City} >= 0
  and
  (
    exists (
    select 1
    from subscriptions s
    where s.user_id = ua.user_id
    and city_id = $P{CC_City}
    )
  )
)
or
(
    $P{CC_City} = -1
    and
    ( select count(*) from cities where is_approved = 1 )
    =
    (
    select count(distinct id)
    from subscriptions s
    where s.user_id = ua.user_id
    )
)
or
(
    $P{CC_City} = -2
    and
    1
    >=
    (
    select count(distinct id)
    from subscriptions s
    where s.user_id = ua.user_id
    )
)
group by q.name, a.content
UNION
select q.name variable, 'Otro', count(*) cantidad
from answers a, user_answers ua, questions q
where 1=1
and a.id = ua.answer_id
and ua.question_id = q.id
and a.creator = 'user'
and q.id = $P{CC_questions}
and
(
  $P{CC_City} >= 0
  and
  (
    exists (
    select 1
    from subscriptions s
    where s.user_id = ua.user_id
    and city_id = $P{CC_City}
    )
  )
)
or
(
    $P{CC_City} = -1
    and
    ( select count(*) from cities where is_approved = 1 )
    =
    (
    select count(distinct id)
    from subscriptions s
    where s.user_id = ua.user_id
    )
)
or
(
    $P{CC_City} = -2
    and
    1
    >=
    (
    select count(distinct id)
    from subscriptions s
    where s.user_id = ua.user_id
    )
)
group by q.name
) t
order by variable desc, valor
;
",1
"Club Cupon - Perfiles por año de nacimiento y genero","Perfiles por año de nacimiento y genero","select * from
(SELECT year(dob) anio_nacimiento, gender genero, count(*) cantidad
FROM user_profiles u
where
(
  $P{CC_City} >= 0
  and
  (
    exists (
    select 1
    from subscriptions s
    where s.user_id = u.id
    and city_id = $P{CC_City}
    )
  )
)
or
(
    $P{CC_City} = -1
    and
    ( select count(*) from cities where is_approved = 1 )
    =
    (
    select count(distinct id)
    from subscriptions s
    where s.user_id = u.id
    )
)
or
(
    $P{CC_City} = -2
    and
    1
    >=
    (
    select count(distinct id)
    from subscriptions s
    where s.user_id = u.id
    )
)
group by year(dob), gender
order by 1, 2
) t
;

",1
"Club Cupon - Reporte Vendedores - Julieta","Reporte Vendedores - Julieta","select * from (
select s.username vendedor, c.id id_comercio, c.name comercio, c.fiscal_cuit, d.id id_oferta, d.name oferta, d.start_date, d.end_date, d.discounted_price,
        (select sum(quantity) from deal_users du where du.deal_id = d.id ) cupones,
        (select d.discounted_price * sum(quantity) from deal_users du where du.deal_id = d.id ) facturacion,
        (start_date <=all (select start_date from deals where company_id = c.id)) primera_oferta,
        e.name ciudad
from deals d, users s, companies c, cities e
where d.seller_id = s.id
and d.company_id = c.id
and d.city_id = e.id
and d.deal_status_id not in (11,10,9)
and date(d.start_date) >= date($P{CC_fecha_desde})
and date(d.start_date) <= date($P{CC_fecha_hasta})
and s.username like $P{CC_username_like}
) t
;

",1
"Club Cupon - Reporte diario Administracion","Reporte diario Administracion","select * from (
SELECT
        date_format(e.start_date,'%Y-%m-%d') 'Fecha promocion',
        c.name 'Nombre fantasia',
        c.fiscal_name 'Razon social',
        c.fiscal_cuit 'CUIT',
        t.name 'Localidad',
        e.name 'Nombre promocion',
        e.original_price 'Precio original',
        e.discount_percentage 'Descuento %',
        e.discounted_price 'Precio oferta',
        CASE e.risk
             WHEN 1 then 'Bajo'
             WHEN 2 then 'Medio'
             WHEN 3 then 'Alto'
                    else 'N/A'
        END 'Riesgo',
        (select IFNULL (sum(quantity),0) from deal_users where deal_id = e.id ) 'Cupones generados',
        e.commission_percentage 'Comision %',
        CASE e.pay_by_redeemed
             WHEN 0 then 'No'
             WHEN 1 then 'Si'
                    else 'N/A'
        END 'Pago por Redimidos',
        e.comment 'Nota privada',
        date_format(e.coupon_expiry_date,'%Y-%m-%d') 'Vencimiento cupon',
        p.name 'Medio de pago',
        CASE d.external_status WHEN 'C' then 'Cancelado' WHEN 'A' then 'Acreditado' else 'Pendiente' END external_status,
        sum(d.quantity) cantidad,
        sum(e.discounted_price * d.quantity - d.internal_amount) monto
FROM deal_externals d, deals e, cities t, companies c, payment_types p
where e.city_id = t.id
and d.deal_id = e.id
and e.company_id = c.id
and d.payment_type_id = p.id
and e.start_date >= $P{CC_fecha_desde}
and e.start_date <= $P{CC_fecha_hasta}
and e.is_tourism = $P{CC_turismo}
group by date_format(e.start_date,'%Y-%m-%d'),
        c.name ,
        c.fiscal_name,
        c.fiscal_cuit ,
        t.name ,
        e.name ,
        e.original_price ,
        e.discount_percentage,
        e.discounted_price ,
        (select IFNULL (sum(quantity),0) from deal_users where deal_id = e.id ) ,
        e.commission_percentage ,
        e.comment ,
        date_format(e.coupon_expiry_date,'%Y-%m-%d') ,
        CAST(d.payment_type_id AS CHAR) ,
        CASE d.external_status WHEN 'C' then 'Cancelado' WHEN 'A' then 'Acreditado' else 'Pendiente' END
UNION
SELECT
        date_format(e.start_date,'%Y-%m-%d') 'Fecha promocion',
        c.name 'Nombre fantasia',
        c.fiscal_name 'Razon social',
        c.fiscal_cuit 'CUIT',
        t.name 'Localidad',
        e.name 'Nombre promocion',
        e.original_price 'Precio original',
        e.discount_percentage 'Descuento %',
        e.discounted_price 'Precio oferta',
        CASE e.risk
             WHEN 1 then 'Bajo'
             WHEN 2 then 'Medio'
             WHEN 3 then 'Alto'
                    else 'N/A'
        END 'Riesgo',
        (select IFNULL (sum(quantity),0) from deal_users where deal_id = e.id ) 'Cupones generados',
        e.commission_percentage 'Comision %',
        CASE e.pay_by_redeemed
             WHEN 0 then 'No'
             WHEN 1 then 'Si'
                    else 'N/A'
        END 'Pago por Redimidos',
        e.comment 'Nota privada',
        date_format(e.coupon_expiry_date,'%Y-%m-%d') 'Vencimiento cupon',
        '-' medio_pago,
        '-' external_status,
        0 cantidad,
        0 monto
FROM deals e, cities t, companies c
where e.city_id = t.id
and e.company_id = c.id
and not exists (
  select 1 from deal_externals de
  where de.deal_id = e.id
)
and e.start_date >= $P{CC_fecha_desde}
and e.start_date <= $P{CC_fecha_hasta}
and e.is_tourism = $P{CC_turismo}
) t
order by 1,6;",1
"Club Cupon - Reporte diario Administracion sin medios de pago","Reporte diario Administracion sin medios de pago","SELECT *
FROM   (SELECT e.id 'Id Oferta',
               date_format(e.start_date, '%Y-%m-%d') 'Fecha promocion',
               c.name 'Nombre fantasia',
               c.fiscal_name 'Razon social',
               c.fiscal_cuit 'CUIT',
               t.name 'Localidad',
               e.name 'Nombre promocion',
               (select name from deal_categories dc where dc.id = e.deal_category_id) 'Categoria',
               e.original_price 'Precio original',
               e.discount_percentage 'Descuento %',
               e.discounted_price 'Precio oferta',
               CASE e.risk WHEN 1 THEN 'Bajo' WHEN 2 THEN 'Medio' WHEN 3 THEN 'Alto' ELSE 'N/A' END 'Riesgo',
               (SELECT IFNULL(sum(quantity), 0)
                FROM   deal_users
                WHERE  deal_id = e.id)
                 'Cupones generados',
               e.commission_percentage 'Comision %',
               CASE e.pay_by_redeemed WHEN 0 THEN 'No' WHEN 1 THEN 'Si' ELSE 'N/A' END 'Pago por Redimidos',
               e.comment 'Nota privada',
               e.downpayment_percentage 'Fondo de garantía',
               date_format(e.coupon_expiry_date, '%Y-%m-%d') 'Vencimiento cupon',
               CASE d.external_status WHEN 'C' THEN 'Cancelado' WHEN 'A' THEN 'Acreditado' ELSE 'Pendiente' END external_status,
               sum(d.quantity) cantidad,
               sum(e.discounted_price * d.quantity - d.internal_amount) monto,
               e.private_note,
               vendedor.username
        FROM   deal_externals d, deals e, cities t, companies c, users vendedor
        WHERE  e.deal_status_id <> 11 AND e.city_id = t.id AND d.deal_id = e.id AND e.company_id = c.id
and e.seller_id = vendedor.id
AND e.start_date >= $P{CC_fecha_desde}
and e.start_date <= $P{CC_fecha_hasta}
and e.is_tourism = $P{CC_turismo}
group by date_format(e.start_date,'%Y-%m-%d'),
        c.name ,
        c.fiscal_name,
        c.fiscal_cuit ,
        t.name ,
        e.name ,
        e.original_price ,
        e.discount_percentage,
        e.discounted_price ,
        e.downpayment_percentage,
        (select IFNULL (sum(quantity),0) from deal_users where deal_id = e.id ) ,
        e.commission_percentage ,
        e.comment ,
        date_format(e.coupon_expiry_date,'%Y-%m-%d') ,
        CASE d.external_status WHEN 'C' then 'Cancelado' WHEN 'A' then 'Acreditado' else 'Pendiente' END,
        e.private_note,
        vendedor.username
UNION
SELECT
        e.id 'Id Oferta',
        date_format(e.start_date,'%Y-%m-%d') 'Fecha promocion',
        c.name 'Nombre fantasia',
        c.fiscal_name 'Razon social',
        c.fiscal_cuit 'CUIT',
        t.name 'Localidad',
        e.name 'Nombre promocion',
        (select name from deal_categories dc where dc.id = e.deal_category_id) 'Categoria',
        e.original_price 'Precio original',
        e.discount_percentage 'Descuento %',
        e.discounted_price 'Precio oferta',
        CASE e.risk
             WHEN 1 then 'Bajo'
             WHEN 2 then 'Medio'
             WHEN 3 then 'Alto'
                    else 'N/A'
        END 'Riesgo',
        (select IFNULL (sum(quantity),0) from deal_users where deal_id = e.id ) 'Cupones generados',
        e.commission_percentage 'Comision %',
        CASE e.pay_by_redeemed
             WHEN 0 then 'No'
             WHEN 1 then 'Si'
                    else 'N/A'
        END 'Pago por Redimidos',
        e.comment 'Nota privada',
        e.downpayment_percentage 'Fondo de garantía',
        date_format(e.coupon_expiry_date,'%Y-%m-%d') 'Vencimiento cupon',
        '-' external_status,
        0 cantidad,
        0 monto,
        e.private_note,
        vendedor.username
FROM deals e, cities t, companies c, users vendedor
where e.deal_status_id <> 11 and e.city_id = t.id
and e.company_id = c.id
and e.seller_id = vendedor.id
and not exists (
  select 1 from deal_externals de
  where de.deal_id = e.id
)
and e.start_date >= $P{CC_fecha_desde}
and e.start_date <= $P{CC_fecha_hasta}
and e.is_tourism = $P{CC_turismo}
) t
order by 2,7;
",1
"Club Cupon - Resumen de ventas por deal","Resumen de ventas por deal","select start_date,
       name,
       is_side_deal,
       discounted_price,
       discount_percentage,
       CASE risk
            WHEN 1 then 'Bajo'
            WHEN 2 then 'Medio'
            WHEN 3 then 'Alto'
                   else 'N/A'
       END 'Riesgo',
       CASE pay_by_redeemed
            WHEN 0 then 'No'
            WHEN 1 then 'Si'
                   else 'N/A'
       END 'Pago por Redimidos',
       (select count(*) from deal_externals de where external_status = 'A' and de.deal_id = d.id) pagos_acreditados
from deals d
order by start_date desc, is_side_deal
;",1
"Club Cupon - Resumen diario de suscripciones","Resumen diario de suscripciones","select date(now()) dia, count(*) suscriptos_total,
      ( select count(*) from subscriptions s where s.created <= date(now()) and is_subscribed = 1
          and not exists ( select 1 from subscription_origin so where so.subscription_id = s.id ) ) suscriptos_voluntarios,
      count(*) - ( select count(*) from subscriptions s where s.created <= date(now()) and is_subscribed = 1
          and not exists ( select 1 from subscription_origin so where so.subscription_id = s.id ) ) suscriptos_forzados,
      ( select count(*) from users s where s.created <= date(now())  ) registrados,
      ( select count(*) from subscriptions s where s.created <= date(now()) and is_subscribed = 0 and s.modified <= date(now()) ) desuscriptos
from subscriptions t
where is_subscribed = 1",1
"Club Cupon - Subscripciones","Base de subscriptos","SELECT *
FROM subscriptions s
where 
(
    (city_id = $P{CC_City})
    or
    ($P{CC_City} = -1)
    or
      (
        ($P{CC_City} = -2)
        and
        2<= (select count(distinct city_id) from subscriptions s2 where s.email = s2.email)
      )
    )
and date(created) >= date($P{CC_fecha_desde})
and date(created) <= date($P{CC_fecha_hasta})
and ( 
  ( $P{CC_Is_Subscribed} = 'NO' and is_subscribed = 0 ) or
  ( $P{CC_Is_Subscribed} = 'SI' and is_subscribed = 1 ) or
  ( $P{CC_Is_Subscribed} = 'Todos'  )
);
",1
"Club Cupon - Subscripciones diarias","Subscripciones diarias","select * from
(
(
select 'TOTAL' fecha_suscripcion, null receptores_mail,
       count(*) altas,
      (select count(*) from subscriptions s1 where is_subscribed = 0 and (
    (city_id = $P{CC_City})
    or
    ($P{CC_City} = -1)
    or
      (
        ($P{CC_City} = -2)
        and
        2<= (select count(distinct city_id) from subscriptions s2 where s1.email = s2.email)
      )
    )) bajas_segun_fecha_de_baja,
      (select count(*) from subscriptions s1 where is_subscribed = 0 and (
    (city_id = $P{CC_City})
    or
    ($P{CC_City} = -1)
    or
      (
        ($P{CC_City} = -2)
        and
        2<= (select count(distinct city_id) from subscriptions s2 where s1.email = s2.email)
      )
    )) bajas_segun_fecha_de_alta
from subscriptions s
where (
    (city_id = $P{CC_City})
    or
    ($P{CC_City} = -1)
    or
      (
        ($P{CC_City} = -2)
        and
        2<= (select count(distinct city_id) from subscriptions s2 where s.email = s2.email)
      )
    )
)
UNION
(
  select DATE_FORMAT(s.fecha_suscripcion, '%Y-%m-%d'),
          ( select count(*) from subscriptions s1 where created < DATE(s.fecha_suscripcion) and ( is_subscribed = 1 or  ( is_subscribed = 0 and modified > DATE(s.fecha_suscripcion) ) ) and (
    (city_id = $P{CC_City})
    or
    ($P{CC_City} = -1)
    or
      (
        ($P{CC_City} = -2)
        and
        2<= (select count(distinct city_id) from subscriptions s2 where s1.email = s2.email)
      )
    )) receptores_mail,
          s.altas, s.bajas_segun_fecha_de_baja, s.bajas_segun_fecha_de_alta
  from
  (
  SELECT created fecha_suscripcion,
      count(*) altas,
      ( SELECT count(*) FROM subscriptions s2 where is_subscribed = 0 and DATE_FORMAT(s2.modified, '%Y-%m-%d') = DATE_FORMAT(s.created, '%Y-%m-%d') and (
    (city_id = $P{CC_City})
    or
    ($P{CC_City} = -1)
    or
      (
        ($P{CC_City} = -2)
        and
        2<= (select count(distinct city_id) from subscriptions s4 where s4.email = s2.email)
      )
    )) bajas_segun_fecha_de_baja,
      ( SELECT count(*) FROM subscriptions s3 where is_subscribed = 0 and DATE_FORMAT(s3.created, '%Y-%m-%d') = DATE_FORMAT(s.created, '%Y-%m-%d') and (
    (city_id = $P{CC_City})
    or
    ($P{CC_City} = -1)
    or
      (
        ($P{CC_City} = -2)
        and
        2<= (select count(distinct city_id) from subscriptions s2 where s3.email = s2.email)
      )
    )) bajas_segun_fecha_de_alta
  FROM subscriptions s
  where date(s.created) >= date($P{CC_fecha_desde})
  and date(s.created) <= date($P{CC_fecha_hasta})
  and (
    (city_id = $P{CC_City})
    or
    ($P{CC_City} = -1)
    or
      (
        ($P{CC_City} = -2)
        and
        2<= (select count(distinct city_id) from subscriptions s2 where s.email = s2.email)
      )
    )
  group by DATE_FORMAT(created, '%Y-%m-%d')
  ) s
)
) t
order by 1 desc;",1
"Club Cupon - Subscripciones diarias voluntarias","Subscripciones diarias voluntarias","select * from  (  (  select 'TOTAL' fecha_suscripcion, null receptores_mail, count(*) altas,        (select count(*) from subscriptions s1 where is_subscribed = 0 and (      (city_id = $P{CC_City})      or      ($P{CC_City} = -1)      or        (          ($P{CC_City} = -2)          and          2<= (select count(distinct city_id) from subscriptions s2 where s1.email = s2.email)        )      ) and not exists (select 1 from subscription_origin s2 where s1.id = s2.subscription_id) ) bajas_segun_fecha_de_baja,        (select count(*) from subscriptions s1 where is_subscribed = 0 and (      (city_id = $P{CC_City})      or      ($P{CC_City} = -1)      or        (          ($P{CC_City} = -2)          and          2<= (select count(distinct city_id) from subscriptions s2 where s1.email = s2.email)        )      ) and not exists (select 1 from subscription_origin s2 where s1.id = s2.subscription_id) ) bajas_segun_fecha_de_alta  from subscriptions s  where not exists (select 1 from subscription_origin s2 where s.id = s2.subscription_id)  and (      (city_id = $P{CC_City})      or      ($P{CC_City} = -1)      or        (          ($P{CC_City} = -2)          and          2<= (select count(distinct city_id) from subscriptions s2 where s.email = s2.email)        )      )  )  UNION  (    select DATE_FORMAT(s.fecha_suscripcion, '%Y-%m-%d'),            ( select count(*) from subscriptions s1              where created < DATE(s.fecha_suscripcion)              and (      (city_id = $P{CC_City})      or      ($P{CC_City} = -1)      or        (          ($P{CC_City} = -2)          and          2<= (select count(distinct city_id) from subscriptions s2 where s1.email = s2.email)        )      )              and ( is_subscribed = 1 or  ( is_subscribed = 0 and modified > DATE(s.fecha_suscripcion) ) )              and not exists (select 1 from subscription_origin s2 where s1.id = s2.subscription_id)            ) receptores_mail,            s.altas, s.bajas_segun_fecha_de_baja, s.bajas_segun_fecha_de_alta    from    (    SELECT created fecha_suscripcion,        count(*) altas,        ( SELECT count(*) FROM subscriptions s2 where is_subscribed = 0 and (      (city_id = $P{CC_City})      or      ($P{CC_City} = -1)      or        (          ($P{CC_City} = -2)          and          2<= (select count(distinct city_id) from subscriptions s3 where s3.email = s2.email)        )      ) and DATE_FORMAT(s2.modified, '%Y-%m-%d') = DATE_FORMAT(s.created, '%Y-%m-%d')          and not exists (select 1 from subscription_origin s1 where s2.id = s1.subscription_id) ) bajas_segun_fecha_de_baja,        ( SELECT count(*) FROM subscriptions s3 where is_subscribed = 0 and (      (city_id = $P{CC_City})      or      ($P{CC_City} = -1)      or        (          ($P{CC_City} = -2)          and          2<= (select count(distinct city_id) from subscriptions s2 where s3.email = s2.email)        )      ) and DATE_FORMAT(s3.created, '%Y-%m-%d') = DATE_FORMAT(s.created, '%Y-%m-%d')          and not exists (select 1 from subscription_origin s2 where s3.id = s2.subscription_id)) bajas_segun_fecha_de_alta    FROM subscriptions s    where  (      (city_id = $P{CC_City})      or      ($P{CC_City} = -1)      or        (          ($P{CC_City} = -2)          and          2<= (select count(distinct city_id) from subscriptions s2 where s.email = s2.email)        )      )    and date(s.created) >= date($P{CC_fecha_desde})    and date(s.created) <= date($P{CC_fecha_hasta})    and not exists (select 1 from subscription_origin s2 where s.id = s2.subscription_id)    group by DATE_FORMAT(created, '%Y-%m-%d')    ) s  )  ) t  order by 1 desc  ;    ",1
"Club Cupon - Subscripciones diarias voluntarias - Gonzalo","Subscripciones diarias voluntarias","select * from (
select s.name, DATE_FORMAT(s.fecha_suscripcion, '%Y-%m-%d') fecha,
( select count(*) from subscriptions s1
            where created < DATE(s.fecha_suscripcion)
            and s1.city_id = s.id
            and ( is_subscribed = 1 or  ( is_subscribed = 0 and modified > DATE(s.fecha_suscripcion) ) )
            and not exists (select 1 from subscription_origin s2 where s1.id = s2.subscription_id)
            and city_id in (select id from cities where is_approved=1 and is_group=0 )
          ) receptores_mail,
          s.altas, s.bajas_segun_fecha_de_baja, s.bajas_segun_fecha_de_alta
from
  (
  SELECT c.id, c.name, s.created fecha_suscripcion,
      count(*) altas,
      ( SELECT count(*) FROM subscriptions s2 where is_subscribed = 0 and s2.city_id = s.city_id
        and DATE_FORMAT(s2.modified, '%Y-%m-%d') = DATE_FORMAT(s.created, '%Y-%m-%d')
        and not exists (select 1 from subscription_origin s1 where s2.id = s1.subscription_id) ) bajas_segun_fecha_de_baja,
      ( SELECT count(*) FROM subscriptions s3 where is_subscribed = 0 and s3.city_id = s.city_id
        and DATE_FORMAT(s3.created, '%Y-%m-%d') = DATE_FORMAT(s.created, '%Y-%m-%d')
        and not exists (select 1 from subscription_origin s2 where s3.id = s2.subscription_id)) bajas_segun_fecha_de_alta
  FROM subscriptions s, cities c
  where date(s.created) >= date($P{CC_fecha_desde})
  and date(s.created) <= date($P{CC_fecha_hasta})
  and c.id = s.city_id
  and not exists (select 1 from subscription_origin s2 where s.id = s2.subscription_id)
  and city_id in (select id from cities where is_approved=1 and is_group=0 )
  group by c.id, c.name, DATE_FORMAT(s.created, '%Y-%m-%d')
) s
) t",1
"Club Cupon - Subscripciones fake","Subscripciones fake","select *
from subscription_fakes
",1
"Club Cupon - Subscripciones por dominio","Subscripciones por dominio","(
select 'TOTAL', count(*) cantidad_total
from subscriptions
)
UNION
(
select t.dominio, t.cantidad_total
from (
select substr(email,instr(email,'@')+1) dominio, count(*) cantidad_total
from subscriptions u
group by substr(email,instr(email,'@')+1)
) t
)
order by 2 desc
;",1
"Club Cupon - Subscripciones por origen","Subscripciones por origen","select date(sii.created) fecha, sii.name origen, origenes.altas, origenes.subscriptos base_activa, (origenes.altas - origenes.subscriptos) bajas, origenes.registrados, origenes.con_compras
from (
select import_instance_id, count(*) altas, sum(is_subscribed) subscriptos, count(distinct user_id) registrados,
    (select count(distinct dui.user_id)
     from deal_users dui, subscriptions si, subscription_origin soi
     where dui.user_id = si.user_id
     and si.id = soi.subscription_id
     and soi.import_instance_id = so.import_instance_id) as con_compras
FROM subscription_origin so, subscriptions s
where so.subscription_id = s.id
and (
    (city_id = $P{CC_City})
    or
    ($P{CC_City} = -1)
    or
      (
        ($P{CC_City} = -2)
        and
        2<= (select count(distinct city_id) from subscriptions s2 where s.email = s2.email)
      )
    )
group by import_instance_id
) origenes, subscription_import_instances sii
where origenes.import_instance_id = sii.id
union
select null, 'Voluntaria', count(*) altas, sum(is_subscribed), (count(*) - sum(is_subscribed)) bajas, count(distinct user_id) registrados,
      (select count(distinct dui.user_id)
     from deal_users dui, subscriptions si
     where dui.user_id = si.user_id
    and (
    (city_id = $P{CC_City})
    or
    ($P{CC_City} = -1)
    or
      (
        ($P{CC_City} = -2)
        and
        2<= (select count(distinct city_id) from subscriptions s2 where si.email = s2.email)
      )
    )
     and not exists (
        select 1 from subscription_origin oi
        where si.id = oi.subscription_id
     )
     ) as con_compras
from subscriptions s
where not exists (
  select 1 from subscription_origin o
  where s.id = o.subscription_id
  )
and (
    (city_id = $P{CC_City})
    or
    ($P{CC_City} = -1)
    or
      (
        ($P{CC_City} = -2)
        and
        2<= (select count(distinct city_id) from subscriptions s2 where s.email = s2.email)
      )
    )
union
select null, 'Total', count(*), sum(is_subscribed), (count(*) - sum(is_subscribed)) bajas, null, null
from subscriptions s
where (
    (city_id = $P{CC_City})
    or
    ($P{CC_City} = -1)
    or
      (
        ($P{CC_City} = -2)
        and
        2<= (select count(distinct city_id) from subscriptions s2 where s.email = s2.email)
      )
    )
;",1
"Club Cupon - Suscripciones por origen a xx fecha (a día cerrado)","Suscripciones por origen a xx fecha (a día cerrado)","select DATE_FORMAT($P{CC_fecha}, '%Y-%m-%d') fecha, concat ( name, ' - ', date(created) ) origen,  ( select count(*) from subscriptions s where created < DATE($P{CC_fecha})           and ((city_id = $P{CC_City}) or ($P{CC_City} = -1) or ( ($P{CC_City} = -2) and 2<= (select count(distinct city_id) from subscriptions s2 where s.email = s2.email)))           and ( is_subscribed = 1 or  ( is_subscribed = 0 and modified > DATE($P{CC_fecha}))  )           and exists ( select 1 from subscription_origin so1 where so1.import_instance_id = sii.id and so1.subscription_id = s.id ) ) base_activa,  ( select count(*) from subscriptions s where date(created) <= DATE($P{CC_fecha})           and ((city_id = $P{CC_City}) or ($P{CC_City} = -1) or ( ($P{CC_City} = -2) and 2<= (select count(distinct city_id) from subscriptions s2 where s.email = s2.email)))          and exists ( select 1 from subscription_origin so1 where so1.import_instance_id = sii.id and so1.subscription_id = s.id ) ) altas_acumuladas,        ( SELECT count(*) FROM subscriptions s2 where is_subscribed = 0 and DATE(modified) <= DATE($P{CC_fecha})          and ((city_id = $P{CC_City}) or ($P{CC_City} = -1) or ( ($P{CC_City} = -2) and 2<= (select count(distinct city_id) from subscriptions s3 where s3.email = s2.email)))          and exists ( select 1 from subscription_origin so1 where so1.import_instance_id = sii.id and so1.subscription_id = s2.id ) ) bajas_acumuladas,        ( select count(*) from subscriptions s where date(created) <= DATE($P{CC_fecha}) and user_id is not null          and ((city_id = $P{CC_City}) or ($P{CC_City} = -1) or ( ($P{CC_City} = -2) and 2<= (select count(distinct city_id) from subscriptions s2 where s.email = s2.email)))          and exists ( select 1 from subscription_origin so1 where so1.import_instance_id = sii.id and so1.subscription_id = s.id ) ) registros,        ( select count(*) from subscriptions s where date(created) <= DATE($P{CC_fecha}) and user_id is not null          and ((city_id = $P{CC_City}) or ($P{CC_City} = -1) or ( ($P{CC_City} = -2) and 2<= (select count(distinct city_id) from subscriptions s2 where s.email = s2.email)))          and exists ( select 1 from subscription_origin so1 where so1.import_instance_id = sii.id and so1.subscription_id = s.id )          and exists ( select 1 from deal_users du where s.user_id = du.user_id)) con_compras  from subscription_import_instances sii  union  SELECT DATE_FORMAT(date(now()), '%Y-%m-%d'), 'Voluntaria' origen,        ( select count(*) from subscriptions s where created < DATE($P{CC_fecha})           and ((city_id = $P{CC_City}) or ($P{CC_City} = -1) or ( ($P{CC_City} = -2) and 2<= (select count(distinct city_id) from subscriptions s2 where s.email = s2.email)))           and ( is_subscribed = 1 or  ( is_subscribed = 0 and modified > DATE($P{CC_fecha}) ) )           and not exists ( select 1 from subscription_origin so1 where so1.subscription_id = s.id ) ) base_activa,        count(*) altas_acumuladas,        ( SELECT count(*) FROM subscriptions s2 where is_subscribed = 0 and DATE(s2.modified) <= DATE($P{CC_fecha})          and ((city_id = $P{CC_City}) or ($P{CC_City} = -1) or ( ($P{CC_City} = -2) and 2<= (select count(distinct city_id) from subscriptions s3 where s3.email = s2.email)))          and not exists ( select 1 from subscription_origin so1 where so1.subscription_id = s2.id ) ) bajas_acumuladas,        (select count(*) from subscriptions s3          where not exists (select 1 from subscription_origin so where so.subscription_id = s3.id )          and date(s.created) <= date($P{CC_fecha})          and ((city_id = $P{CC_City}) or ($P{CC_City} = -1) or ( ($P{CC_City} = -2) and 2<= (select count(distinct city_id) from subscriptions s2 where s3.email = s2.email)))          and user_id is not null) registros,        (select count(*) from subscriptions s3          where not exists (select 1 from subscription_origin so where so.subscription_id = s3.id )          and date(s.created) <= date...",1
"Club Cupon - Transacciones","Listado de transacciones con filtro por fecha","SELECT *
  FROM ( 
  SELECT t.created AS Fecha,
         u.username AS Usuario,
         u.email,
         CASE tt.name
                  WHEN 'Oferta adquirida ##DEAL_LINK##'
                  THEN
                     (SELECT concat('Oferta adquirida ', d.name)
                        FROM deals d
                       WHERE d.id = t.foreign_id)
                  WHEN 'Premio por amigo recomendado pagado al usuario ##USER_LINK##'
                  THEN
                     (SELECT concat(
                                'Premio por amigo recomendado pagado al usuario ',
                                u2.username)
                        FROM users u2
                       WHERE u2.id = t.foreign_id)
                  ELSE
                      tt.name
          END AS Descripcion,
          CASE tt.is_credit WHEN 1 THEN t.amount ELSE 0 END AS Credito,
          CASE tt.is_credit WHEN 0 THEN t.amount ELSE 0 END AS Debito,
          0 AS Comision,
          CASE tt.name WHEN 'Premio por amigo recomendado pagado al usuario ##USER_LINK##' THEN (SELECT u2.username from users u2 where u2.id = t.foreign_id) END as usuario_contraparte,
          CASE tt.name WHEN 'Premio por amigo recomendado pagado al usuario ##USER_LINK##' THEN (SELECT u2.email from users u2 where u2.id = t.foreign_id) END as email_contraparte
 FROM transactions t, transaction_types tt, users u
 WHERE     t.transaction_type_id = tt.id
    AND t.user_id = u.id
    AND t.created BETWEEN $P{CC_fecha_desde}
    AND $P{CC_fecha_hasta}
    AND ( $P{CC_transaction_type} = -1 OR $P{CC_transaction_type} = t.transaction_type_id)
    AND u.username like $P{CC_username_like}
) as x;",1
"Club Cupon - Transacciones (Referidos)","Transacciones generadas por pago de premio por referidos.","select *
 from
(select cast(t.created as char) as Fecha,
         u.username as Recomendante,
         u.id as ID,
         u.email as Email,
         t.amount as Monto
    from transactions t, users u
   where t.transaction_type_id = 6
     and t.user_id = u.id
     and u.username like $P{CC_username_like}
order by Recomendante) as x;",1
"Club Cupon - Transacciones por día y hora","Transacciones por día y hora","select * from (
select case DAYOFWEEK(created)
          when 1 then 'Domingo'
          when 2 then 'Lunes'
          when 3 then 'Martes'
          when 4 then 'Miercoles'
          when 5 then 'Jueves'
          when 6 then 'Viernes'
          when 7 then 'Sabado'
       end día_semana,
       extract( HOUR from created ) hora,
       external_status estado, count(*) cantidad
from deal_externals
where date(created) >= date($P{CC_fecha_desde})
and date(created) <= date($P{CC_fecha_hasta})
group by DAYOFWEEK(created), extract( HOUR from created ), external_status
) t ;",1
"Club Cupon - Transacciones, cupones y usuarios por deal","Transacciones, cupones y usuarios por deal","SELECT substr(cast(concat(date_format(d.start_date, '%Y/%m/%d'),
                          ' - ',
                          c.name,
                          ' - ',
                          d.name) AS char),
              1,
              60) deal_name,
              CASE risk
                   WHEN 1 then 'Bajo'
                   WHEN 2 then 'Medio'
                   WHEN 3 then 'Alto'
                          else 'N/A'
              END 'Riesgo',
              agrupador.*
FROM deals d, companies c, (select deal_id, count(*) transacciones, sum(quantity) cupones, count(distinct user_id) usuarios
from deal_externals
where external_status = 'A'
group by deal_id) agrupador
 WHERE d.company_id = c.id
and agrupador.deal_id = d.id
ORDER BY start_date DESC;",1
"Club Cupon - Usuarios","Filtros por IP, username, email, mínimo de compras... ","SELECT *  FROM   (SELECT id,                 date_format(created, '%Y-%m-%d %H:%i:%s') as created,                 date_format(modified, '%Y-%m-%d %H:%i:%s') as modified,                 CASE user_type_id WHEN 1 THEN 'admin' WHEN 2 THEN 'ususario' WHEN 3 THEN 'empresa' WHEN 4 THEN 'agencia' END                   AS user_type,                 username,                 email,                 (select r.email from users r where u.referred_by_user_id = r.id) as referring_email,                 (select p.dni from user_profiles p where p.user_id = u.id) as DNI,                 fb_user_id,                 user_login_count,                 user_view_count,                 is_agree_terms_conditions,                 is_active,                 is_email_confirmed,                 bac_user_id,                 (SELECT sum(quantity)                  FROM   deal_users                  WHERE  user_id = u.id)                  compras,                 last_login_ip,                 signup_ip          FROM   users u) t  WHERE  t.compras > $P{CC_cantidad}  and t.last_login_ip like $P{CC_last_login_ip}  and t.last_login_ip like $P{CC_signup_ip}  and t.email like $P{CC_email_like}  and t.username like $P{CC_username_like}  and t.last_login_ip like $P{CC_signup_ip}  and t.id like $P{CC_user_id}  and t.bac_user_id like $P{CC_bac_user_id}  order by t.compras desc;",1
"Club Cupon - Usuarios no validados","Usuarios no validados","select id, user_type_id, created, modified, username, email,         cast(concat('http://www.clubcupon.com.ar/users/activation/',id,'/',md5(concat(id,'-e9a5561e42c5ab47c6c81c14f06c0b8281cfc3ce'))) as char) link_activacion  from users  where is_email_confirmed = 0  and fb_user_id is null;",1
"Club Cupon - Usuarios por origen","Usuarios por origen","select date(sii.created) fecha, sii.name origen, origenes.cantidad
from (
select import_instance_id, count(*) cantidad
FROM subscription_origin so, subscriptions s
where so.subscription_id = s.id
and s.user_id is not null
and (
    (city_id = $P{CC_City})
    or
    ($P{CC_City} = -1)
    or
      (
        ($P{CC_City} = -2)
        and
        2<= (select count(distinct city_id) from subscriptions s2 where s.email = s2.email)
      )
    )
group by import_instance_id
) origenes, subscription_import_instances sii
where origenes.import_instance_id = sii.id
union
select null, 'Voluntaria', count(*)
from subscriptions s
where not exists (
  select 1 from subscription_origin o
  where s.id = o.subscription_id
  )
and s.user_id is not null
and (
    (city_id = $P{CC_City})
    or
    ($P{CC_City} = -1)
    or
      (
        ($P{CC_City} = -2)
        and
        2<= (select count(distinct city_id) from subscriptions s2 where s.email = s2.email)
      )
    )
union
select null, 'Total', count(*)
from subscriptions s
where s.user_id is not null
and (
    (city_id = $P{CC_City})
    or
    ($P{CC_City} = -1)
    or
      (
        ($P{CC_City} = -2)
        and
        2<= (select count(distinct city_id) from subscriptions s2 where s.email = s2.email)
      )
    )
;",1
"Club Cupon - Usuarios que se desuscribieron","Usuarios que se desuscribieron","select u.id, u.user_type_id, u.username, u.email
from subscriptions s, users u
where s.user_id is not null
and s.is_subscribed = 0
and s.user_id = u.id
",1
"Club Cupon - Validacion de usuarios ","Validacion de usuarios ","(
select 'TOTAL', count(*) cantidad_total, (select count(*) from users where is_email_confirmed = 0) cantidad_no_validada
from users
)
UNION
(
select t.dominio, t.cantidad_total,
    (select count(*) from users u2 where u2.email like concat('%@',t.dominio) and u2.is_email_confirmed = 0) cantidad_no_validada
from (
select substr(email,instr(email,'@')+1) dominio, count(*) cantidad_total
from users u
group by substr(email,instr(email,'@')+1)
) t
)
order by 2 desc
;
",1
"Club Cupon - Ventas (administracion)","Ventas (administracion)","select * from (
SELECT
        date_format(e.start_date,'%Y-%m-%d') 'Fecha promocion',
        c.name 'Nombre fantasia',
        c.fiscal_name 'Razon social',
        c.fiscal_cuit 'CUIT',
        t.name 'Localidad',
        t.name 'Nombre promocion',
        e.original_price 'Precio original',
        e.discount_percentage 'Descuento %',
        e.discounted_price 'Precio oferta',
        (select IFNULL (sum(quantity),0) from deal_users where deal_id = e.id ) 'Cantidad vendida',
        e.commission_percentage 'Comision %',
        CASE e.pay_by_redeemed
             WHEN 0 then 'No'
             WHEN 1 then 'Si'
                    else 'N/A'
        END 'Pago por Redimidos',
        e.comment 'Nota privada',
        date_format(e.coupon_expiry_date,'%Y-%m-%d') 'Vencimiento cupon'
FROM deals e, cities t, companies c
where e.city_id = t.id
and e.company_id = c.id
and e.start_date >= $P{CC_fecha_desde}
and e.start_date <= $P{CC_fecha_hasta}
) t;",1
"Club Cupon - Ventas de Ayer","Ventas de Ayer","SELECT u.username, 
       substr(cast(d.coupon_code as char),1,60) coupon_code,
       substr(cast(c.name as char),1,20) company,
       substr(cast(e.name as char),1,30) deal
FROM deal_users d, users u, deals e, companies c
WHERE d.user_id = u.id
and d.deal_id = e.id
and e.company_id = c.id
and date(e.start_date) + INTERVAL 2 DAY > curdate()
and date(e.end_date) <= CURDATE()
order by start_date desc
;
",1
"Club Cupon - Ventas de los ultimos 30 días con info de suscripcion","Ventas de los ultimos 30 días con info de suscripcion","select t.*,
      ( select count(*) from subscriptions s where s.created <= date(t.start_date) ) cant_suscriptos,
      ( select count(*) from subscriptions s where s.created <= date(t.start_date)
          and not exists ( select 1 from subscription_origin so where so.subscription_id = s.id ) ) cant_suscriptos_voluntarios,
      ( select count(*) from users s where s.created <= date(t.start_date)  ) cant_registrados,
      ( select count(*) from subscriptions s where s.created <= date(t.start_date)  and is_subscribed = 0 and s.modified <= date(t.start_date) ) cant_desuscriptos
from (
(
SELECT e.start_date,
       cast(c.name as char) company,
       cast(e.name as char) deal,
       e.discounted_price precio_cupon,
       sum(d.quantity) cupones_vendidos,
       e.discounted_price * sum(d.quantity) facturacion_empresa,
       sum(e.discounted_price * (e.commission_percentage / 100) ) comision
FROM deal_users d, deals e, companies c
where d.deal_id = e.id
and e.company_id = c.id
and start_date > ADDDATE(now(), -30)
and start_date < now()
group by e.start_date, c.name, e.name
)
UNION
(
select now(), 'TOTAL', 'TOTAL', null, sum(d.quantity),
      sum(e.discounted_price * d.quantity) facturacion_empresa,
      sum(e.discounted_price * d.quantity * (e.commission_percentage / 100))  ganancia
from deal_users d, deals e, companies c
where d.deal_id = e.id
and e.company_id = c.id
and start_date > ADDDATE(now(), -30)
and start_date < now()
)
) t
order by t.start_date desc
;
",1
"Club cupon - Compradores unicos por mes","Club cupon - Compradores unicos por mes","select year(d.created) anio, month(d.created) mes, sum(d.quantity) cupones, count(distinct u.id) compradores
from deal_externals d, users u
where d.user_id = u.id
and d.external_status = 'A'
group by year(d.created), month(d.created)
",1
"ClubCupon - Cupones por pagos","ClubCupon - Cupones por pagos","select * from  deal_users du,deal_externals de where
du.deal_external_id= de.id
and 
de.bac_id=$P{CC_pago}",1
"ClubCupon - Recomendaciones","ClubCupon - Recomendaciones","select * from (
select recomendado.id recomendado_id, recomendado.created recomendado_creacion, recomendado.modified recomendado_modificacion,
        recomendado.username recomendado_username, recomendado.email recomendado_email,
        recomendador.id recomendador_id, recomendador.username recomendador_username, recomendador.email recomendador_email
from users recomendado, users recomendador
where recomendado.referred_by_user_id = recomendador.id
and recomendado.email like $P{CC_email_recomendado_like}
and recomendador.email like $P{CC_email_recomendador_like}
) t;
",1
"Club Cupon - Cantidad de cupones vendidos por origen de suscripcion","Cantidad de cupones vendidos por origen de suscripcion","select date(sii.created) fecha, sii.name origen, origenes.cupones, origenes.transacciones
from (
select import_instance_id, sum(quantity) cupones, count(*) transacciones
FROM subscription_origin so, subscriptions s, deal_externals du
where so.subscription_id = s.id
and s.user_id = du.user_id
and s.user_id is not null
and du.external_status = 'A'
and (
    (city_id = $P{CC_City})
    or
    ($P{CC_City} = -1)
    or
      (
        ($P{CC_City} = -2)
        and
        2<= (select count(distinct city_id) from subscriptions s2 where s.email = s2.email)
      )
    )
and date(du.created) >= date($P{CC_fecha_desde})
and date(du.created) <= date($P{CC_fecha_hasta})
group by import_instance_id
) origenes, subscription_import_instances sii
where origenes.import_instance_id = sii.id
union
select null, 'Voluntaria', sum(quantity) cupones, count(*) transacciones
from subscriptions s, deal_externals du
where not exists (
  select 1 from subscription_origin o
  where s.id = o.subscription_id
  )
and du.external_status = 'A'
and date(du.created) >= date($P{CC_fecha_desde})
and date(du.created) <= date($P{CC_fecha_hasta})
and s.user_id is not null
and s.user_id = du.user_id
and (
    (city_id = $P{CC_City})
    or
    ($P{CC_City} = -1)
    or
      (
        ($P{CC_City} = -2)
        and
        2<= (select count(distinct city_id) from subscriptions s2 where s.email = s2.email)
      )
    )
union
select null, 'Total', sum(quantity) cupones, count(*) transacciones
from subscriptions s, deal_externals du
where s.user_id is not null
and du.external_status = 'A'
and s.user_id = du.user_id
and (
    (city_id = $P{CC_City})
    or
    ($P{CC_City} = -1)
    or
      (
        ($P{CC_City} = -2)
        and
        2<= (select count(distinct city_id) from subscriptions s2 where s.email = s2.email)
      )
    )
and date(du.created) >= date($P{CC_fecha_desde})
and date(du.created) <= date($P{CC_fecha_hasta})
;
",1
"MO - ACEPTARON CLUB CUPON","Usuarios que aceptaron recibir mails de club cupon","select usuario_id, usu_apodo, usu_nombre, usu_apellido, usu_email
from sacar.sac_usuario 
where acepta_club_cupon is not null
   AND (0 = DECODE($P{DF_filtro_apodo} ,'Ingrese Apodo',0,1) OR usu_apodo = $P{DF_filtro_apodo} )
   AND (0 = DECODE($P{DF_filtro_usuario} ,'Ingrese Usuario',0,1) OR usuario_id = $P{DF_filtro_usuario} )
   AND (0 = DECODE($P{DF_filtro_mail} ,'Ingrese Email',0,1) OR usu_email = $P{DF_filtro_mail} )",2
"Club Cupon - Cupones anulados","Cupones anulados","SELECT u.username, u.email, u.bac_user_id,
       date_format(e.start_date,'%Y/%m/%d') start_date,
       substr(cast(c.name as char),1,60) company,
       substr(cast(e.name as char),1,60) deal,
       d.coupon_code, d.pin_code, d.quantity, e.discounted_price, d.created, d.modified, d.is_paid, d.is_gift, d.gift_to, d.is_used, d.emailed, d.email_to_company
FROM anulled_coupons d, users u, deals e, companies c
WHERE d.user_id = u.id
and d.deal_id = e.id
and e.company_id = c.id
and ( u.username like concat('%',$P{CC_username},'%') or $P{CC_username} = 'Todos' )
and ( u.email like concat('%',$P{CC_user_email},'%') or $P{CC_user_email} = 'Todos' )
and e.id = $P{CC_Deal}",1
"Confronte - Alertas Carolina Foursome","Confronte - Alertas Carolina Foursome"," select distinct   f.html html,  from_unixtime(f.ts) fecha   from feed f  where f.html like 'Carolina%'  and FROM_UNIXTIME(f.ts) > TIMESTAMPADD(MONTH,-1,NOW())   order by f.ts desc",3
"Confronte - Beneficios activos","Beneficios activos","SELECT b.id, b.category_fk, b.bank_fk, b.discount, b.max_ammount, date(from_unixtime(b.start_ts)) start_ts, date(from_unixtime(b.end_ts)) end_ts,
       b.terms_and_conditions, b.days, b.url, b.admin, date(from_unixtime(b.insert_ts)) fecha_carga, date(from_unixtime(b.update_ts)) fecha_actualizacion,
       b.lat, b.lng, b.state_fk, b.country_fk, b.discount_type_fk, b.discount_format_fk, b.description, b.store_fk, b.is_special,
       b.tags, k.*
FROM benefit b, bank k
where b.bank_fk = k.id
and end_ts > unix_timestamp()
and start_ts < unix_timestamp();",3
"Confronte - Busquedas de palabras determinadas","Busquedas de palabras determinadas","SELECT 
      cast( concat('',substr(from_unixtime(last_ts),1,7)) as char) mes,
      phrase, sum(count) busquedas, avg(results) resultados_promedio
FROM search_phrase s
where phrase like concat('%',$P{CO_word},'%')
and country = 'AR'
group by phrase, concat('',substr(from_unixtime(last_ts),1,7)), mid(from_unixtime(last_ts),4,2)
order by 1, 3 desc, 4;",3
"Confronte - Búsquedas sin resultados","Confronte - Búsquedas sin resultados","SELECT search_phrase.phrase, search_phrase.category_fk, from_unixtime(search_phrase.last_ts,'%Y-%m-%d') ultima_fecha_buscada
FROM search_phrase
where search_phrase.results = 0
and search_phrase.country = $P{CO_country}
and category_fk = 0
order by search_phrase.count desc
limit 50",3
"Confronte - Cantidad de Cupones Vendidos","Confronte - Cantidad de Cupones Vendidos","select * from(   select be.bank_fk banco_id,  ba.name banco,  date(from_unixtime(be.start_ts)) fecha_inicio,  date(from_unixtime(be.end_ts)) fecha_fin,  SUM(be.purchased) suma   from benefit be   inner join bank ba on ba.id = be.bank_fk   inner join prom_category pc on pc.id = be.category_fk  left outer join store s on s.id = be.store_fk  where be.discount_type_fk = 5  AND STR_TO_DATE($P{CO_fecha},'%Y-%m-%d') between date(from_unixtime(start_ts)) and DATE_ADD(date(from_unixtime(end_ts)),INTERVAL 0 DAY)         group by be.bank_fk, ba.name, date(from_unixtime(be.start_ts)), date(from_unixtime(be.end_ts))   having sum(be.purchased) > 0   order by date(from_unixtime(be.start_ts)) desc, sum(be.purchased) desc)consulta",3
"Confronte - Cantidad de Cupones Vendidos Agrupado","Confronte - Cantidad de Cupones Vendidos Agrupado","select * from(   select be.bank_fk banco_id,  ba.name banco,  be.description,  be.url,   be.price,   be.real_price,  min(date(from_unixtime(be.start_ts))) min_fecha_start,  max(date(from_unixtime(be.end_ts))) max_fecha_end,  count(*) cupones_agrupados,  GROUP_CONCAT(be.purchased                     ORDER BY be.start_ts SEPARATOR ' - ') vendidos_detalle,  MAX(be.purchased) max_dia_vendido,  SUM(be.purchased) suma_vendido   from benefit be   inner join bank ba on ba.id = be.bank_fk   inner join prom_category pc on pc.id = be.category_fk  left outer join store s on s.id = be.store_fk  where be.discount_type_fk = 5   AND date(from_unixtime(start_ts)) >= STR_TO_DATE($P{CO_filtro_fecha_desde},'%Y-%m-%d')   and DATE_ADD(date(from_unixtime(end_ts)),INTERVAL 0 DAY) <= STR_TO_DATE($P{CO_filtro_fecha_hasta},'%Y-%m-%d')   group by be.bank_fk, ba.name, be.description, be.url, be.price, be.real_price   having sum(be.purchased) > 0   order by be.bank_fk, be.description, be.url, date(from_unixtime(be.start_ts)) desc, sum(be.purchased) desc  )consulta",3
"Confronte - Cantidad de Descuentos","Confronte - Cantidad de Descuentos","select * from (
select bank.id as 'Id', bank.name as 'Establecimiento', count(1) as 'Cantidad'
from benefit,
      bank
where bank.id = benefit.bank_fk
group by bank.id, bank.name
order by bank.id) Descuentos",3
"Confronte - Cantidad de Descuentos Activos","Confronte - Cantidad de Descuentos Activos","select * from (  select bank.id as 'Id', bank.name as 'Establecimiento', count(1) as 'Cantidad'  from benefit,        bank  where bank.id = benefit.bank_fk  AND date(FROM_UNIXTIME(UNIX_TIMESTAMP())) between date(from_unixtime(start_ts)) and DATE_ADD(date(from_unixtime(end_ts)),INTERVAL 0 DAY)        group by bank.id, bank.name  order by bank.id) Descuentos",3
"Confronte - Cantidad de Descuentos Activos (fecha particular)","Confronte - Cantidad de Descuentos Activos (fecha particular)","select * from(   select be.bank_fk banco_id,  ba.name banco,  be.description,  be.url,   be.price,   be.real_price,  min(date(from_unixtime(be.start_ts))) min_fecha_desde,  max(date(from_unixtime(be.end_ts))) max_fecha_desde,  count(*) cantidad,  SUM(be.purchased) suma   from benefit be   inner join bank ba on ba.id = be.bank_fk   inner join prom_category pc on pc.id = be.category_fk  left outer join store s on s.id = be.store_fk  where be.discount_type_fk = 5   AND STR_TO_DATE($P{CO_fecha},'%Y-%m-%d') between date(from_unixtime(start_ts)) and DATE_ADD(date(from_unixtime(end_ts)),INTERVAL 0 DAY)         group by be.bank_fk, ba.name, be.description, be.url, be.price, be.real_price   having sum(be.purchased) > 0   order by be.bank_fk, be.description, be.url, date(from_unixtime(be.start_ts)) desc, sum(be.purchased) desc  )consulta",3
"Confronte - Cantidad de Productos por Categoría","Confronte - Cantidad de Productos por Categoría","select * from(               SELECT c.id 'category_id',  c.name 'category_name',  cl.level  'category_level',  count(p.id) 'cantidad'         FROM product p           INNER JOIN feature_for_product fp ON (fp.product_fk = p.id AND fp.feature_fk=1)   INNER JOIN feature_std_value fv ON (fv.sort = fp.sort and fv.feature_fk = 1)   INNER JOIN category c ON (c.id = p.category_fk)   INNER JOIN categories_level cl ON cl.id = c.id     GROUP BY  c.id, c.name, cl.level  )consulta",3
"Confronte - Cantidad de clicks por Categoría","Confronte - Cantidad de clicks por Categoría","select * from (
select c.id id, c.name categoria, sum(oc.count) cantidad
from offer_click oc 
inner join offer o on o.id = oc.offer_fk
inner join category c on c.id = o.category_fk
where date(FROM_UNIXTIME(ts_2hour)) > date(FROM_UNIXTIME(UNIX_TIMESTAMP()-30*86400))
group by c.id, c.name
order by 3 desc
) consulta",3
"Confronte - Cantidad de clicks y visitas por Categoría","Confronte - Cantidad de clicks y visitas por Categoría","select * from(
SELECT c.id, c.name, sum(rc.total_clicks) total_clicks, sum(rc.total_views) total_views
FROM region_cache rc
inner join product p on p.id = rc.product_fk
inner join category c on c.id = p.category_fk
WHERE rc.country  = 'AR'
and rc.state = 1000
group by  c.id, c.name
)consulta",3
"Confronte - Cantidad de comparaciones","Confronte - Cantidad de comparaciones ejecutadas","SELECT from_unixtime(ts,'%Y %m') mes, count(*) cantidad
FROM page_for_session p
where p.page = 'compare'
group by from_unixtime(ts,'%Y %m')
order by 1 desc",3
"Confronte - Cantidad de descuentos Categoria Electrónica","Confronte - Cantidad de descuentos Categoria Electrónica","select * from(
select st.id as id, st.name as store, count(*) as cantidad
from store st
inner join benefit be on be.store_fk = st.id 
where be.category_fk = 5
group by st.id, st.name
order by cantidad desc
)consulta",3
"Confronte - Cantidad de descuentos por Store","Confronte - Cantidad de descuentos por Store","select * from (
select store.id as 'Id', store.name as 'Establecimiento', count(1) as 'Cantidad'
from benefit
inner join store on store.id = benefit.store_fk
where date(FROM_UNIXTIME(UNIX_TIMESTAMP())) between date(from_unixtime(benefit.start_ts)) and DATE_ADD(date(from_unixtime(benefit.end_ts)),INTERVAL 0 DAY)      
and benefit.showable = 1
group by store.id, store.name
order by 3 desc) Descuentos",3
"Confronte - Cantidad de ofertas por tienda","Confronte - Cantidad de ofertas por tienda","SELECT b.country, b.name, (select count(*) from offer o where seen=true and showable=true and biz_fk = b.id) ofertas
FROM biz b
where exists (select 1 from offer o where seen=true and showable=true and biz_fk = b.id)
group by b.country, b.name
order by 3 desc;",3
"Confronte - Cantidad de productos creados por mes","Confronte - Cantidad de productos creados por mes","SELECT from_unixtime(insert_ts,'%Y %m') mes, count(*) cantidad
FROM product p
group by from_unixtime(insert_ts,'%Y %m')
order by 1 desc
",3
"Confronte - Cantidad de productos creados por mes por usuario","Confronte - Cantidad de productos creados por mes por usuario","SELECT from_unixtime(insert_ts,'%Y %m %d') mes, p.admin, count(*) cantidad
FROM product p
group by from_unixtime(insert_ts,'%Y %m %d'), p.admin
order by 1 desc",3
"Confronte - Cantidad de tiendas con al menos una oferta por pais","Confronte - Cantidad de tiendas con al menos una oferta por pais","SELECT country, count(*) cantidad
FROM biz b
where exists (select 1 from offer o where seen=true and showable=true and biz_fk = b.id)
group by country;
",3
"Confronte - Clicks","Confronte - Cantidad de Clicks en un mes desde el 1ro de mes","call get_click_report()",3
"Confronte - Confronte Offer for banner","Confronte - Confronte Offer for banner","select * from(   select b.id biz_id,  b.name biz_name,  o.id offer_id,  o.str offer_str,  o.flags offer_flags,  if(o.flags & 0x4000, 'S', 'N') offer_for_banner,  if(o.flags & 0x02, 'S', 'N') offer_category_ok,  o.currency_fk offer_currency,  o.price_ic offer_price,  o.brand_fk offer_brand_fk,  o.url offer_url,  o.img_url offer_img_url,  o.from_url offer_from_url,  FROM_UNIXTIME(o.insert_ts) offer_insert_ts,  FROM_UNIXTIME(o.last_mod_ts) offer_last_mod_ts,  FROM_UNIXTIME(o.last_seen_ts) offer_last_seen_ts,  FROM_UNIXTIME(o.associate_ts) offer_associate_ts,  o.weekly_clicks offer_weekly_clicks   from offer o   inner join biz b on b.id = o.biz_fk     where o.showable = 1    and o.seen = 1  and b.type = 1  and b.status = 1  and b.country = 'AR'  and (o.flags & 0x4000)  )consulta",3
"Confronte - Consulta Clementina categoría sin confirmar por tienda","Confronte - Consulta Clementina categoría sin confirmar por tienda","select * from(   select b.id 'biz_id',  b.name 'biz_name',  c.id 'category_id',  c.name 'category_name',  count(1) 'cantidad'   from biz b    inner join offer o on o.biz_fk = b.id  and o.str NOT LIKE '%Ofertas%borradas%' and !(o.flags & 0x02) and o.product_fk IS NULL and o.showable = 1 and o.seen = 1   inner join category c on c.id = o.category_fk     where b.status = 1   and b.country = 'AR'  -- and b.type = 1  and o.category_fk is not null   group by b.id, b.name, c.id, c.name           having count(1) > 5   order by 1,5 desc) consulta",3
"Confronte - Consulta bind job categoría","Confronte - Consulta bind job categoría","select * from(
				 select b.id biz_id,
								b.name biz_name,
								o.id offer_id,
								o.str offer_str,
								if(o.flags & 0x4000, 'S', 'N') offer_for_banner,
								o.currency_fk offer_currency,
								o.price_ic offer_price,
								c.id category_id,
								c.name category_name,
								CONCAT(""<img src='"",o.img_url, ""' width='80px' heigth='80px' />"") offer_img_url
					 from biz b 
		 inner join offer o on o.biz_fk = b.id  and o.str NOT LIKE '%Ofertas%borradas%' and !(o.flags & 0x02) and o.product_fk IS NULL and o.showable = 1 and o.seen = 1
		 inner join category c on c.id = o.category_fk
			 	  where c.id = $P{CO_categoria}
					  and b.status = 1 
						and b.country = 'AR'
				  -- and b.type = 1
/*					 and (o.str like '%camara%digital%')
					and  o.str not like '%funda%'*/
						order by o.category_fk, b.id) consulta",3
"Confronte - Consulta cantidad de descuentos por Categoria","Confronte - Consulta cantidad de descuentos por Categoria","select * from(
select pc.id category_id, pc.name category_name, count(*) cantidad
from benefit b
inner join prom_category pc on pc.id = b.category_fk
group by pc.id 
order by count(*) desc
)consulta",3
"Confronte - Consulta cantidad de descuentos por Store","Confronte - Consulta cantidad de descuentos por Store","select * from(
select s.id store_id, s.name store_name, count(*) cantidad
from benefit b
inner join store s on s.id = b.store_fk
group by s.id
order by count(*) desc
)consulta",3
"Confronte - Consulta de no crawleo cuponeras","Confronte - Consulta de no crawleo cuponeras","			select * 
				from (
								select cr.bank_fk 'bank_id',
											 date(from_unixtime(cr.30_end_ts)) 'fecha_corrida', 
											 count(1) 'cantidad'
									from cuarteto_run cr
								 where cr.status = 2
									 and (cr.20_offers_updated > 0 or cr.20_offers_inserted > 0 )
									 and cr.turn = 30
							group by cr.bank_fk, date(from_unixtime(cr.30_end_ts))
							union
								select cr.bank_fk 'bank_id',
											 a.Date 'fecha_corrida',
											 0 'cantidad'
									from (	select curdate() - INTERVAL (a.a + (10 * b.a) + (100 * c.a)) DAY as Date
														from (select 0 as a union all select 1 union all select 2 union all select 3 union all select 4 union all select 5 union all select 6 union all select 7 union all select 8 union all select 9) as a
											cross join (select 0 as a union all select 1 union all select 2 union all select 3 union all select 4 union all select 5 union all select 6 union all select 7 union all select 8 union all select 9) as b
											cross join (select 0 as a union all select 1 union all select 2 union all select 3 union all select 4 union all select 5 union all select 6 union all select 7 union all select 8 union all select 9) as c
												) a,
												(select DISTINCT bank_fk 
													 from cuarteto_run cr) cr
													where a.Date between STR_TO_DATE($P{CO_filtro_fecha_desde},'%Y-%m-%d') and STR_TO_DATE($P{CO_filtro_fecha_hasta},'%Y-%m-%d')
							) consulta
				where bank_id = $P{CO_bank_id}
		 group by bank_id, fecha_corrida
			 having cantidad = 0
     order by fecha_corrida desc",3
"Confronte - Consulta estado oferta AR","Confronte - Consulta estado oferta AR","select * from(   select CASE b.type  WHEN 1 THEN 'Confronte'   WHEN 2 THEN 'Shop1' ELSE 'Desconocido' END 'Type',  count(1) 'Visibles',    SUM(o.category_fk IS NOT NULL) 'Con Categoria',    SUM(o.category_fk IS NOT NULL && o.flags & 0x02) 'Con Categoria Confirmada',    SUM(o.product_fk IS NOT NULL) 'Con producto' ,    SUM(o.product_fk IS NULL && o.category_fk IS NOT NULL && o.flags & 0x02) 'Sin producto/Con Categoria Confirmada',    SUM(o.product_fk IS NULL && o.brand_fk IS NOT NULL)  'Sin producto/Con Marca',             SUM(o.product_fk IS NULL && o.category_fk IS NULL) 'Sin producto/Sin Categoria',    SUM(o.product_fk IS NULL && o.brand_fk IS NULL)  'Sin producto/Sin Marca',    SUM(o.product_fk IS NULL && o.brand_fk IS NULL && o.category_fk IS NULL)  'Sin producto/Sin Marca/Sin Categoria',    SUM(o.product_fk IS NOT NULL || o.brand_fk IS NOT NULL || o.category_fk IS NOT  NULL)  'Con producto o Marca o Categoria'   from biz b    inner join offer o on o.biz_fk = b.id  and o.showable = 1 and o.seen = 1   left outer join category c on c.id = o.category_fk     where b.status = 1   and b.country = 'AR'  -- and b.id = 5829   group by b.type ) consulta  ",3
"Confronte - Consulta estado oferta por categoría","Confronte - Consulta estado oferta por categoría","select * from(   select c.id 'category_id',  ifnull(c.name,'Categoría nula') 'category_name',  count(1) 'Visibles',    SUM(o.category_fk IS NOT NULL) 'Con Categoria',    SUM(o.category_fk IS NOT NULL && o.flags & 0x02) 'Con Categoria Confirmada',    SUM(o.category_fk IS NOT NULL) - SUM(o.category_fk IS NOT NULL && o.flags & 0x02) 'Con Categoria a Confirmar',    SUM(o.product_fk IS NOT NULL) 'Con producto' ,    SUM(o.product_fk IS NULL && o.category_fk IS NOT NULL && o.flags & 0x02) 'Sin producto/Con Categoria Confirmada',    SUM(o.product_fk IS NULL && o.brand_fk IS NOT NULL)  'Sin producto/Con Marca',             SUM(o.product_fk IS NULL && o.category_fk IS NULL) 'Sin producto/Sin Categoria',    SUM(o.product_fk IS NULL && o.brand_fk IS NULL)  'Sin producto/Sin Marca',    SUM(o.product_fk IS NOT NULL || o.brand_fk IS NOT NULL || o.category_fk IS NOT  NULL)  'Con producto o Marca o Categoria'   from biz as b    inner join offer as  o on o.biz_fk = b.id  and o.str NOT LIKE '%Ofertas%borradas%' and o.showable = 1 and o.seen = 1    left outer join category as c on c.id = o.category_fk     where b.status = 1   and b.country = 'AR'  and b.type = 1   group by c.id, c.name   order by 3 desc) consulta",3
"Confronte - Consulta migración descuentos","Confronte - Consulta migración descuentos","select * from(   select be.bank_fk 'benefit_bank_fk',  ba.name 'bank_name',  ba.url 'bank_url',  ba.is_premium 'bank_is_premium',  be.category_fk 'benefit_category_fk',  pc.desc 'prom_category_desc',  be.id 'benefit_id',  be.discount 'benefit_discount',  be.description 'benefit_description',  be.terms_and_conditions 'benefit_term_and_conditions',  be.is_special 'benefit_is_special',  be.days 'benefit_days',  CONCAT_WS(' ',IF(be.days &  1,'Lu','  ')   ,IF(be.days &  2,'Ma','  ')   ,IF(be.days &  4,'Mi','  ')   ,IF(be.days &  8,'Ju','  ')   ,IF(be.days & 16,'Vi','  ')   ,IF(be.days & 32,'Sa','  ')   ,IF(be.days & 64,'Do','  ')) 'dias',  be.store_fk 'benefit_store_fk',  st.name'store_name',  st.url 'store_url',  st.online_sale 'store_online_sale',  st.shipping 'store_shipping',  st.email 'store_email',  st.hours 'store_hours',  st.biz_fk 'store_biz_fk',  be.url 'benefit_url',  be.max_ammount 'benefit_max_amount',  FROM_UNIXTIME(be.start_ts) 'benefit_start_ts',  FROM_UNIXTIME(be.end_ts) 'benefit_end_ts',  be.tags 'benefit_tags',  be.country_fk 'benefit_country_fk',  co.name 'country_name',  be.state_fk 'benefit_state_fk',  bs.name 'branch_state_name',  be.discount_type_fk 'benefit_discount_type_fk',  dt.name 'discount_type_name',  be.discount_format_fk 'benefit_discount_format_fk',  df.name 'discount_format_name',  FROM_UNIXTIME(be.insert_ts) 'benefit_insert_ts',  FROM_UNIXTIME(be.update_ts) 'benefit_update_ts'   from benefit be  left outer join prom_category pc on pc.id = be.category_fk  left outer join bank ba on ba.id = be.bank_fk  left outer join store st on st.id = be.store_fk  left outer join country co on co.id = be.country_fk  left outer join branch_state bs on bs.id = be.state_fk  left outer join discount_format df on df.id = be.discount_format_fk  left outer join discount_type dt on dt.id = be.discount_type_fk  where (UNIX_TIMESTAMP() between be.start_ts and (be.end_ts + 43200))   order by be.bank_fk, pc.desc, be.id) consulta",3
"Confronte - Crawleo tiendas Carolina 0 lecturas","Confronte - Crawleo tiendas Carolina 0 lecturas","select * from(    select b.id,    b.name,   fs.10_urls_read,   fs.20_offers_read,   fs.20_offers_inserted,   fs.20_offers_updated,   IFNULL(ofertas.cantidad, 0 ) Cant_ofertas_visibles,   IFNULL(ofer_for_banner.cantidad, 0) Cant_Offer_for_banner  from biz b   left join foursome_run fs on fs.biz_fk = b.id and fs.id = (select max(fsr.id) from foursome_run fsr where fsr.biz_fk = b.id)  left outer join (select of.biz_fk, count(1) cantidad from offer of where !(of.flags & 0x4000) and of.showable = 1 and of.seen = 1 GROUP BY of.biz_fk) ofertas  on ofertas.biz_fk = b.id  left outer join (select off.biz_fk, count(1) cantidad from offer off where off.flags & 0x4000 and off.showable = 1 and off.seen = 1 GROUP BY off.biz_fk) ofer_for_banner  on ofer_for_banner.biz_fk = b.id   where b.type = 1   and b.status = 1   and b.country = 'AR'   and !(b.flags & 0x80)   and fs.20_offers_read < 1  order by fs.20_offers_read DESC) consulta",3
"Confronte - Crawleo tiendas Carolina más de 1 lectura","Confronte - Crawleo tiendas Carolina más de 1 lectura","select * from(  select  b.id,          b.name,  if(b.flags & 0x80,'No foursome','') foursome,          fs.10_urls_read,          fs.20_offers_read,          fs.20_offers_inserted,          fs.20_offers_updated  from biz b  left outer join foursome_run fs on fs.biz_fk = b.id and fs.id = (select max(fsr.id) from foursome_run fsr where fsr.biz_fk = b.id)  where b.type = 1  and b.status = 1  and b.country = 'AR'  and !(b.flags & 0x80)  order by 1)consulta",3
"Confronte - Crawler últimas corridas","Confronte - Crawler últimas corridas","  select b.id,    b.name,   fs.10_urls_read,   fs.20_offers_read,   fs.20_offers_inserted,   fs.20_offers_updated,   fs.30_offers_published  from biz b   left join foursome_run fs  on fs.biz_fk = b.id  and fs.id = (select max(fsr.id) from foursome_run fsr where fsr.biz_fk = b.id)   where b.type = 1   and b.status = 1   and b.country = 'AR'  order by fs.20_offers_read DESC",3
"Confronte - Descuentos cantidad por store","Confronte - Descuentos cantidad por store","select * from(  select st.id 'store_id',  ifnull(st.name, 'Sin Store asignado')'store_name',  count(*) 'cantidad'  from benefit be  left outer join prom_category pc on pc.id = be.category_fk  left outer join bank ba on ba.id = be.bank_fk  left outer join store st on st.id = be.store_fk  left outer join country co on co.id = be.country_fk  left outer join branch_state bs on bs.id = be.state_fk  left outer join discount_format df on df.id = be.discount_format_fk  left outer join discount_type dt on dt.id = be.discount_type_fk  where 1 = 1  and (UNIX_TIMESTAMP() between be.start_ts and (be.end_ts + 43200))  -- and st.id = 2870  -- and pc.id = 11  -- and be.terms_and_conditions like '%neumen%'  -- and ba.id = 2  -- and be.id = 7917  group by st.id  order by 3 desc, st.id) consulta",3
"Confronte - Estado oferta tiendas","Confronte - Lista el estado de las ofertas por tienda"," SELECT b.id 'id_Tienda',   b.name 'Tienda',   b.type 'Tipo Tienda',   count(1)'Ofertas',   SUM(o.seen) 'Visibles',           SUM(o.seen && o.product_fk IS NOT NULL) 'Con producto' ,           SUM(o.seen && o.product_fk IS NULL && o.category_fk IS NOT NULL) 'Sin producto/Con Categoria',           SUM(o.seen && o.product_fk IS NULL && o.brand_fk IS NOT NULL)  'Sin producto/Con Marca',                    SUM(o.seen && o.product_fk IS NULL && o.category_fk IS NULL) 'Sin producto/Sin Categoria',           SUM(o.seen && o.product_fk IS NULL && o.brand_fk IS NULL)  'Sin producto/Sin Marca',           SUM(o.seen = FALSE) 'No visibles',           'NO' as 'Paga'     FROM  offer o,     biz b     where b.id = o.biz_fk    and b.country= 'AR'       and b.id not in(      SELECT b.id         FROM biz b      LEFT JOIN budget bg          on bg.biz_fk = b.id      WHERE  b.id != 1000 AND b.country= 'AR'     AND b.status = 1          AND ( premium > 0 or bg.left_budget > 0 ) )  group by b.id, b.name  union   SELECT b.id 'id_Tienda',   b.name 'Tienda',   b.type 'Tipo Tienda',   count(1),   SUM(o.seen) 'Visibles',           SUM(o.seen && o.product_fk IS NOT NULL) 'Con producto' ,           SUM(o.seen && o.product_fk IS NULL && o.category_fk IS NOT NULL) 'Sin producto/Con Categoria',           SUM(o.seen && o.product_fk IS NULL && o.brand_fk IS NOT NULL)  'Sin producto/Con Marca',                    SUM(o.seen && o.product_fk IS NULL && o.category_fk IS NULL) 'Sin producto/Sin Categoria',           SUM(o.seen && o.product_fk IS NULL && o.brand_fk IS NULL)  'Sin producto/Sin Marca',           SUM(o.seen = FALSE) 'No visibles',  'SI' as 'Paga'     FROM  offer o,     biz b     where b.id = o.biz_fk    and b.id in(      SELECT b.id         FROM biz b      LEFT JOIN budget bg          on bg.biz_fk = b.id      WHERE  b.id != 1000 AND b.country= 'AR'     AND b.status = 1          AND ( premium > 0 or bg.left_budget > 0 ) )  group by b.id, b.name          ",3
"Confronte - Facturación  - Consulta cambios presupuesto ","Confronte - Facturación  - Consulta cambios presupuesto ","SELECT b.country, b.id, b.name, FROM_UNIXTIME(bc.ts) Fecha, bc.value, bc.who
FROM biz_change bc,
     biz b
where b.country = $P{CO_country}
and b.id = $P{CO_biz_country}
and b.id = bc.biz_fk
and bc.param = 'premium_set'
order by bc.ts desc",3
"Confronte - Listado contacto Peugeot","Confronte - Listado de registros de contactos de Peugeot","select   nombre,  apellido,  email,  telefono,  comentario,  from_unixtime(ts) creado  from contacto_peugeot",3
"Confronte - Listado de Estado de ofertas para Tiendas no pagas","Confronte - Listado de Estado de ofertas para Tiendas no pagas"," SELECT b.id 'id_Tienda',   b.name 'Tienda',   b.type 'Tipo Tienda',   count(1)'Ofertas',   SUM(o.seen) 'Visibles',           SUM(o.seen && o.product_fk IS NOT NULL) 'Con producto' ,           SUM(o.seen && o.product_fk IS NULL && o.category_fk IS NOT NULL) 'Sin producto/Con Categoria',           SUM(o.seen && o.product_fk IS NULL && o.brand_fk IS NOT NULL)  'Sin producto/Con Marca',                    SUM(o.seen && o.product_fk IS NULL && o.category_fk IS NULL) 'Sin producto/Sin Categoria',           SUM(o.seen && o.product_fk IS NULL && o.brand_fk IS NULL)  'Sin producto/Sin Marca',           SUM(o.seen = FALSE) 'No visibles',           'NO' as 'Paga'     FROM  offer o,     biz b     where b.id = o.biz_fk    AND b.status = 1       and b.country= 'AR'       and b.id not in(      SELECT b.id         FROM biz b      LEFT JOIN budget bg          on bg.biz_fk = b.id      WHERE  b.id != 1000 AND b.country= 'AR'     AND b.status = 1          AND ( premium > 0 or bg.left_budget > 0 ) )  group by b.id, b.name",3
"Confronte - Listado de Estado de ofertas para Tiendas pagas","Confronte - Listado de Estado de ofertas para Tiendas pagas"," SELECT b.id 'id_Tienda',   b.name 'Tienda',   b.type 'Tipo Tienda',   count(1),   SUM(o.seen) 'Visibles',           SUM(o.seen && o.product_fk IS NOT NULL) 'Con producto' ,           SUM(o.seen && o.product_fk IS NULL && o.category_fk IS NOT NULL) 'Sin producto/Con Categoria',           SUM(o.seen && o.product_fk IS NULL && o.brand_fk IS NOT NULL)  'Sin producto/Con Marca',                    SUM(o.seen && o.product_fk IS NULL && o.category_fk IS NULL) 'Sin producto/Sin Categoria',           SUM(o.seen && o.product_fk IS NULL && o.brand_fk IS NULL)  'Sin producto/Sin Marca',           SUM(o.seen = FALSE) 'No visibles'              FROM  offer o,     biz b     where b.id = o.biz_fk    and b.id in(      SELECT b.id         FROM biz b      LEFT JOIN budget bg          on bg.biz_fk = b.id      WHERE  b.id != 1000 AND b.country= 'AR'     AND b.status = 1          AND ( premium > 0 or bg.left_budget > 0 ) )  group by b.id, b.name",3
"Confronte - Listado de ofertas sin bindear (filtro por categoria)","Confronte - Listado de ofertas sin bindear (filtro por categoria)","SELECT id, str, url
FROM offer o
where category_fk = $P{CO_categoria}
and product_fk is null;",3
"Confronte - Listado de ofertas sin producto abierto por categoria L1","Confronte - Listado de ofertas sin producto abierto por categoria L1","SELECT c1.id, c1.name, count(*) ofertas_sin_producto
FROM category_tree_leafs c2, category c1, offer o
where o.product_fk is null
and o.showable = 1
and o.category_fk = c2.category_leaf_fk
and c2.category_fk = c1.id
and c1.id <> 0
and c1.pcategory_id = 0
group by id, name",3
"Confronte - Listado de ofertas sin producto abierto por categoria hoja","Confronte - Listado de ofertas sin producto abierto por categoria hoja","SELECT c1.id, c1.name, count(*) ofertas_sin_producto
FROM category c1, offer o
where o.product_fk is null
and o.showable = 1
and o.category_fk = c1.id
group by id, name",3
"Confronte - Listado de ofertas sin producto de tiendas que pagan","Confronte - Listado de ofertas sin producto de tiendas que pagan","select o.id, o.url, o.str, b.name, b.premium
from offer o, biz b
where b.premium is not null
and o.biz_fk = b.id
and o.product_fk is null
and b.id not in (6379,7187,6889)

",3
"Confronte - Listado de offer_for_banner","Confronte - Listado de offer_for_banner","select b.name, b.country, o.id, o.str, o.product_fk, o.price_lc, o.stock, o.url, o.img_url, o.showable, o.admin
from offer o, biz b
where o.biz_fk = b.id
and from_url is null
and o.str <> 'Ofertas borradas' ;",3
"Confronte - Listado de offer_for_banner de tiendas no pagas","Confronte - Listado de offer_for_banner de tiendas no pagas","select b.name, b.country, o.id, o.str, o.product_fk, o.price_lc, o.stock, o.url, o.img_url, o.showable, o.admin
from offer o, biz b
where o.biz_fk = b.id
and from_url is null
and o.str <> 'Ofertas borradas'
and premium is null;",3
"Confronte - Listado de tiendas ","Confronte - Listado de tiendas con ofertas y clicks en los ultimos 3 meses","SELECT  biz.name,          biz.legal_name,          biz.type,          biz.country,          biz.url,          biz.email,          biz.phone,  CASE biz.status   WHEN 1 THEN 'APPROVED'  WHEN 2 THEN 'TO_BE_CONSIDERED'   WHEN 3 THEN 'OFFERED'   WHEN 10 THEN 'BLOCKED'   ELSE 'DESCONOCIDO' END status,          (SELECT         sum(o.count)           FROM offer_click o           where o.ts_2hour >           UNIX_TIMESTAMP(date_sub(FROM_UNIXTIME(UNIX_TIMESTAMP(), '%Y-%m-%e %H:%i:%s'), interval 3 month))           and o.biz_fk = biz.id) clicks          FROM biz;",3
"Confronte - Listado de tiendas con al menos una oferta","Confronte - Listado de tiendas con al menos una oferta","SELECT id, name, phone, country, city, url, email, b.status, b.type, (select count(*) from offer o where seen=true and showable=true and biz_fk = b.id) ofertas
FROM biz b
where exists (select 1 from offer o where seen=true and showable=true and biz_fk = b.id)
;
",3
"Confronte - Listado de tiendas sin ofertas","Confronte - Listado de tiendas sin ofertas","SELECT id, name, phone, country, city, url, email
FROM biz b
where not exists (select 1 from offer o where seen=true and showable=true and biz_fk = b.id)
;
",3
"Confronte - Listado de usuarios","Confronte - Listado de usuarios","SELECT id, username, email, address, city, postal_code, phone, alt_phone, fname, from_unixtime(registration_ts) fecha_registro
FROM person p
",3
"Confronte - Listado relaciones categorías productos-descuentos","Confronte - Listado relaciones categorías productos-descuentos","select * from
(
SELECT pc.id prom_category_id, pc.name prom_category_name, c.id category_id, c.name category_name
FROM rel_prom_category_category rpcc 
inner join prom_category pc on pc.id = rpcc.prom_category_fk
inner join category c on c.id = rpcc.category_id_fk
order by pc.id, pc.name, c.id, c.name
)consulta",3
"Confronte - Marcas más buscadas","Confronte - Marcas más buscadas en Confronte","select distinct sp.country,  LCASE(sp.phrase) phrase,  sp.count            from  search_phrase sp,  (SELECT lcase(fsv.value) descripcion    FROM feature f,         feature_std_value fsv    where fsv.feature_fk = f.id     and f.name = 'Marca'  ) marca  where lcase(sp.phrase) REGEXP concat('[[:<:]]',marca.descripcion,'[[:>:]]')             AND  sp.category_fk = 0     AND  sp.results > 0      AND  sp.count > 1000   order by sp.country, sp.count desc",3
"Confronte - Ofertas en el sitio (total y por pais)","Confronte - Ofertas en el sitio (total y por pais)","SELECT b.country pais, count(*) cantidad
FROM offer o, biz b
where o.showable = 1
and o.biz_fk = b.id
group by b.country
UNION
SELECT 'TOTAL' pais, count(*) cantidad
FROM offer o
where o.showable = 1",3
"Confronte - Ofertas en el sitio bindeadas (total y por pais)","Confronte - Ofertas en el sitio bindeadas (total y por pais)","SELECT b.country pais, count(*) cantidad  FROM offer o, biz b  where o.showable = 1  and o.product_fk is not null  and o.biz_fk = b.id  group by b.country  UNION  SELECT 'TOTAL' pais, count(*) cantidad  FROM offer o  where o.showable = 1  and o.product_fk is not null",3
"Confronte - Ofertas en el sitio categorizadas (total y por pais)","Confronte - Ofertas en el sitio categorizadas (total y por pais)","SELECT b.country pais, count(*) cantidad
FROM offer o, biz b
where o.showable = 1
and o.category_fk is not null
and o.biz_fk = b.id
group by b.country
UNION
SELECT 'TOTAL' pais, count(*) cantidad
FROM offer o
where o.showable = 1
and o.category_fk is not null",3
"Confronte - Productos por Categoría","Confronte - Productos por Categoría","select * from(               SELECT c.id 'category_id',  c.name 'category_name',  cl.level  'category_level',  p.id 'product_id',  p.model'product_model',  p.search'product_search',  fv.sort'marca_id',  fv.value'marca'         FROM product p           INNER JOIN feature_for_product fp ON (fp.product_fk = p.id AND fp.feature_fk=1)   INNER JOIN feature_std_value fv ON (fv.sort = fp.sort and fv.feature_fk = 1)   INNER JOIN category c ON (c.id = p.category_fk)   INNER JOIN categories_level cl ON cl.id = c.id   ORDER BY p.id  )consulta",3
"Confronte/Shop1 - Crawleo tiendas Carolina 0 lecturas","Confronte/Shop1 - Crawleo tiendas Carolina 0 lecturas","select * from(   select CASE b.type  WHEN 1 THEN 'Confronte'   WHEN 2 THEN 'Shop1' ELSE 'Desconocido' END 'Type',   b.id,    b.name,   fs.10_urls_read,   fs.20_offers_read,   fs.20_offers_inserted,   fs.20_offers_updated,   IFNULL(ofertas.cantidad, 0 ) Cant_ofertas_visibles,   IFNULL(ofer_for_banner.cantidad, 0) Cant_Offer_for_banner  from biz b   left join foursome_run fs on fs.biz_fk = b.id and fs.id = (select max(fsr.id) from foursome_run fsr where fsr.biz_fk = b.id)  left outer join (select of.biz_fk, count(1) cantidad from offer of where !(of.flags & 0x4000) and of.showable = 1 and of.seen = 1 GROUP BY of.biz_fk) ofertas  on ofertas.biz_fk = b.id  left outer join (select off.biz_fk, count(1) cantidad from offer off where off.flags & 0x4000 and off.showable = 1 and off.seen = 1 GROUP BY off.biz_fk) ofer_for_banner  on ofer_for_banner.biz_fk = b.id   where b.status = 1   and b.country = 'AR'   and !(b.flags & 0x80)   and fs.20_offers_read < 1  order by 1,fs.20_offers_read DESC) consulta",3
"Confronte/Shop1 - Listado de URLs de ofertas que retornan codigo de error","Listado de URLs de ofertas que retornan codigo de error","select b.id, b.name, o.url, oel.url_code, o.img_url, oel.img_code, oel.unavailable_pattern, oel.price_error
from offer_error_log oel, offer o, biz b
where oel.offer_fk = o.id
and oel.biz_fk = b.id
and ( (url_code <> 200 and url_code <> 0 ) or (o.img_url is not null and img_code <> 200 and img_code <> 0 ) or (unavailable_pattern <> null) or (price_error = 1))
and o.showable = 1 and o.seen = 1
and (
      ( (b.type = 2) and ($P{CO_Sitio} = 'Shop1') )
      or
      ( (b.type = 1) and ($P{CO_Sitio} = 'Confronte') )
      )
and ( $P{CO_Biz} = 0 or $P{CO_Biz} = b.id ) 
;",3
"Confronte/Shop1 - Offer for banner","Confronte/Shop1 - Offer for banner","select * from(   select b.id biz_id,  b.name biz_name,  o.id offer_id,  o.str offer_str,  o.flags offer_flags,  if(o.flags & 0x4000, 'S', 'N') offer_for_banner,  if(o.flags & 0x02, 'S', 'N') offer_category_ok,  o.currency_fk offer_currency,  o.price_ic offer_price,  o.brand_fk offer_brand_fk,  o.url offer_url,  o.img_url offer_img_url,  o.from_url offer_from_url,  FROM_UNIXTIME(o.insert_ts) offer_insert_ts,  FROM_UNIXTIME(o.last_mod_ts) offer_last_mod_ts,  FROM_UNIXTIME(o.last_seen_ts) offer_last_seen_ts,  FROM_UNIXTIME(o.associate_ts) offer_associate_ts,  o.weekly_clicks offer_weekly_clicks   from offer o   inner join biz b on b.id = o.biz_fk     where o.showable = 1    and o.seen = 1  and b.type = 2  and b.status = 1  and b.country = 'AR'  and (o.flags & 0x4000)  )consulta",3
"Confronte - Cantidad de Cupones Vendidos. Detallado","Confronte - Cantidad de Cupones Vendidos. Detallado","select * from(   select   be.bank_fk banco_id,  ba.name banco,  date(from_unixtime(be.start_ts)) fecha_inicio,  date(from_unixtime(be.end_ts)) fecha_fin,  pc.name categoria,  be.description descuento,  s.name store,  st.state_name,  be.price precio,  be.real_price precio_real,  SUM(be.purchased) suma   from benefit be   inner join bank ba on ba.id = be.bank_fk   inner join prom_category pc on pc.id = be.category_fk  left outer join store s on s.id = be.store_fk  left outer join state st on st.state = be.state_fk  where be.discount_type_fk = 5   and DATE_ADD(date(from_unixtime(start_ts)),INTERVAL 0 DAY) >= STR_TO_DATE($P{CO_fecha_d},'%Y-%m-%d')   and DATE_ADD(date(from_unixtime(end_ts)),INTERVAL 0 DAY) <= STR_TO_DATE($P{CO_fecha_h},'%Y-%m-%d')   group by be.bank_fk, ba.name, date(from_unixtime(be.start_ts)), date(from_unixtime(be.end_ts)), pc.name, be.description, s.name   order by date(from_unixtime(be.start_ts)) desc, sum(be.purchased) desc)consulta",3
"Confronte - Promedio de ofertas por producto por categoria L1","Confronte - Promedio de ofertas por producto por categoria L1","select stats.id, stats.name, sum(productos) productos,
      sum(productos_con_ofertas) productos_con_ofertas,
      sum(ofertas_con_producto) ofertas_con_producto,
      sum(ofertas_con_producto)/sum(productos_con_ofertas) promedio_ofertas_por_producto,
      sum(ofertas_sin_producto) ofertas_sin_producto,
      sum(ofertas_sin_producto_pagadores) ofertas_sin_producto_pagas
from (
  SELECT c.id, c.name, l.category_leaf_fk hoja,
        ( select count(*) from product p where p.category_fk = l.category_leaf_fk and flags ) productos,
        ( select count(*) from product p where p.category_fk = l.category_leaf_fk and flags and exists (select 1 from offer o where o.product_fk = p.id and showable = true and seen = true) ) productos_con_ofertas,
        ( select count(*) from offer o where o.category_fk = l.category_leaf_fk and o.product_fk is null and showable = true and seen = true ) ofertas_sin_producto,
        ( select count(*) from offer o where o.category_fk = l.category_leaf_fk and o.product_fk is not null and showable = true and seen = true ) ofertas_con_producto,
        ( select count(*) from offer o where o.category_fk = l.category_leaf_fk and o.product_fk is null and showable = true and seen = true and exists (select 1 from biz b where o.biz_fk = b.id and b.premium is not null)) ofertas_sin_producto_pagadores
  FROM category_tree_leafs l, category c
  WHERE l.category_fk in (
    select c.id
    from category c
    where c.pcategory_id =0
    and c.id <> 0
  )
  and l.category_fk = c.id
) stats
group by stats.id, stats.name;",3
"Confronte - Reporte actividad admin","Confronte - Reporte actividad admin","select * from
(
select  lproducto.admin,
        lproducto.dia,
        RedsToDO,
        RedsTotal,
        YellowsToDO,
        YellowsTotal,
        Green,
        Total,
        seen,
        binded,
        seen_unbinded_categorized,
        seen_unbinded_branded,
        unseen
from
(SELECT A.name  'admin',
        from_unixtime(P.last_mod_ts,'%Y %m %d') 'dia',           
        SUM(P.flags&3=0 AND rc.total_views>0 ) 'RedsToDO',
        SUM((P.flags&3)=0) 'RedsTotal',
        SUM( P.flags&3=1 AND rc.total_views > 9  ) 'YellowsToDO',
        SUM((P.flags&3)=1) 'YellowsTotal',
        SUM((P.flags&3)=3) 'Green',
        COUNT(1) 'Total'                
    FROM admin A
LEFT JOIN product P
      ON P.admin = A.name
LEFT JOIN region_cache rc
      ON rc.product_fk = P.id 
     AND rc.country = 'AR' 
     AND rc.state=1000
   WHERE A.flags = 255
     AND length(A.name)>1
     AND length(P.last_mod_ts)>1             
GROUP BY P.admin, from_unixtime(P.last_mod_ts,'%Y %m %d')) lproducto
LEFT OUTER JOIN
 (SELECT o.admin  'admin',
         from_unixtime(o.last_mod_ts,'%Y %m %d') 'dia',           
         SUM(o.seen) 'seen',
         SUM(o.seen && o.product_fk IS NOT NULL) 'binded',
         SUM(o.seen && o.product_fk IS NULL && o.category_fk IS NOT NULL) 'seen_unbinded_categorized',
         SUM(o.seen && o.product_fk IS NULL && o.brand_fk IS NOT NULL) 'seen_unbinded_branded',
         SUM(o.seen = FALSE) 'unseen'
    FROM admin A
LEFT JOIN offer o
      ON o.admin = A.name             
   WHERE A.flags = 255        
     AND length(A.name)>1
     AND length(o.last_mod_ts)>1                        
GROUP BY o.admin, from_unixtime(o.last_mod_ts,'%Y %m %d'))lofertas
ON lofertas.admin = lproducto.admin
and lofertas.dia = lproducto.dia
union
select  rofertas.admin,
        rofertas.dia,
        RedsToDO,
        RedsTotal,
        YellowsToDO,
        YellowsTotal,
        Green,
        Total,
        seen,
        binded,
        seen_unbinded_categorized,
        seen_unbinded_branded,
        unseen
from
(SELECT A.name  'admin',
        from_unixtime(P.last_mod_ts,'%Y %m %d') 'dia',           
        SUM(P.flags&3=0 AND rc.total_views>0 ) 'RedsToDO',
        SUM((P.flags&3)=0) 'RedsTotal',
        SUM( P.flags&3=1 AND rc.total_views > 9  ) 'YellowsToDO',
        SUM((P.flags&3)=1) 'YellowsTotal',
        SUM((P.flags&3)=3) 'Green',
        COUNT(1) 'Total'                
    FROM admin A
LEFT JOIN product P
      ON P.admin = A.name
LEFT JOIN region_cache rc
      ON rc.product_fk = P.id 
     AND rc.country = 'AR' 
     AND rc.state=1000
   WHERE A.flags = 255
     AND length(A.name)>1
     AND length(P.last_mod_ts)>1             
GROUP BY P.admin, from_unixtime(P.last_mod_ts,'%Y %m %d')) rproducto
RIGHT OUTER JOIN
 (SELECT o.admin  'admin',
         from_unixtime(o.last_mod_ts,'%Y %m %d') 'dia',           
         SUM(o.seen) 'seen',
         SUM(o.seen && o.product_fk IS NOT NULL) 'binded',
         SUM(o.seen && o.product_fk IS NULL && o.category_fk IS NOT NULL) 'seen_unbinded_categorized',
         SUM(o.seen && o.product_fk IS NULL && o.brand_fk IS NOT NULL) 'seen_unbinded_branded',
         SUM(o.seen = FALSE) 'unseen'
    FROM admin A
LEFT JOIN offer o
      ON o.admin = A.name             
   WHERE A.flags = 255        
     AND length(A.name)>1
     AND length(o.last_mod_ts)>1                        
GROUP BY o.admin, from_unixtime(o.last_mod_ts,'%Y %m %d'))rofertas
ON rofertas.admin = rproducto.admin
and rofertas.dia = rproducto.dia
)todo
order by admin, dia desc",3
"Confronte - Reporte control de precios","Confronte - Reporte control de precios","select * from(   select b.id biz_id,  b.name biz_name,  o.id offer_id,  o.str offer_str,  o.flags offer_flags,  if(o.flags & 0x4000, 'S', 'N') offer_for_banner,  if(o.flags & 0x02, 'S', 'N') offer_category_ok,  o.currency_fk offer_currency,  o.price_ic offer_price,  o.price_lc offer_local_price,  p.id product_id,  p.model product_model,   o.brand_fk offer_brand_fk,  fv.value offer_marca,  c.id category_id,  c.name category_name,  o.url offer_url,  o.img_url offer_img_url,  o.from_url offer_from_url,  FROM_UNIXTIME(o.insert_ts) offer_insert_ts,  FROM_UNIXTIME(o.last_mod_ts) offer_last_mod_ts,  FROM_UNIXTIME(o.last_seen_ts) offer_last_seen_ts,  FROM_UNIXTIME(o.associate_ts) offer_associate_ts,  o.weekly_clicks offer_weekly_clicks,  o.admin   from offer o   inner join biz b on b.id = o.biz_fk  left join category c on c.id = o.category_fk        left join feature_std_value fv ON (fv.sort = o.brand_fk AND fv.feature_fk = 1)      left join product p ON (p.id = o.product_fk)     where 1 = 1       and o.showable = 1    and o.seen = 1  and b.status = 1  and b.country = 'AR'  and b.type = 1  and o.price_lc >  $P{CO_precio}  and c.id = $P{CO_categoria}         order by offer_for_banner, o.last_mod_ts desc  ) consulta",3
"Confronte - Árbol de Categorías","Confronte - Árbol de Categorías","select * from(   SELECT t1.id AS idlev1,  t1.name AS lev1,  t1.flags flev1,  t2.id AS idlev2,  t2.name as lev2,  t2.flags flev2,  t3.id AS idlev3,  t3.name as lev3,  t3.flags as flev3,  (t3.flags & 2 ) 'contenedora',  (t3.flags & 4 ) 'abstracta',  t4.id AS idlev4,  t4.name as lev4,  t4.flags as flev4,  t5.id AS idlev5,  t5.name as lev5,  t5.flags as flev5,  t6.id AS idlev6,  t6.name as lev6,  t6.flags as flev6   FROM category AS t1      LEFT outer JOIN category AS t2 ON t2.pcategory_id = t1.id AND !(t2.flags & (1|8))      LEFT outer JOIN category AS t3 ON t3.pcategory_id = t2.id AND !(t3.flags & (1|8))      LEFT outer JOIN category AS t4 ON t4.pcategory_id = t3.id AND !(t4.flags & (1|8))      LEFT outer JOIN category AS t5 ON t5.pcategory_id = t4.id AND !(t5.flags & (1|8))      LEFT outer JOIN category AS t6 ON t6.pcategory_id = t5.id AND !(t6.flags & (1|8))          where t1.id in( 0, 4500)  AND !(t1.flags & (1|8))            and t2.id not in(0, 4500)  )consulta",3
"Usuarios de Mercadolibre en ClickApodos","Usuarios de Mercadolibre en ClickApodos","select n.nickname nick_ml, u.mail, u.firstname, u.lastname, u.telhome, u.cellphone, u.straddress, u.slogan, 
        (select l.name from CLNLOCATION l where l.idlocation = u.idlocation ) location, 
        (select c.name from CLNCATEGORY c where c.idcategory = u.idcategory ) category
from CLNNICKNAME n, CLNUSERS u
where idsite = 2
and n.iduser = u.iduser",3
"Confronte - Productos más visitados","Confronte - Productos más visitados en Confronte","SELECT   rc.country,  p.search,   rc.min_price_currency_fk,   rc.min_price_ic,  rc.max_price_currency_fk,   rc.max_price_ic,  TRUNCATE(((rc.min_price_ic+rc.max_price_ic)/2),2) promedio,  rc.total_views,  c.name          FROMproduct p      LEFT JOINregion_cache rc            ONrc.product_fk = p.id    INNER JOINcategory c    ONc.id = p.category_fk         WHERErc.min_price_lc>0           AND(p.flags & 3)      ORDER BYrc.total_views DESC LIMIT 0,100;",3
"Confronte - Palabras más buscadas (No marcas)","Confronte - Palabras más buscadas (No marcas)","select sp.country,  LCASE(sp.phrase) phrase,      sp.count            from  search_phrase sp           where  lcase(sp.phrase) not in(  SELECT lcase(fsv.value)    FROM feature f,         feature_std_value fsv    where fsv.feature_fk = f.id     and f.name = 'Marca'  )             AND  sp.category_fk = 0     AND  sp.results > 0      AND  sp.count > 1000   order by sp.country, sp.count desc",3
"Confronte - Tiendas estado OFFERED","Confronte - Tiendas estado OFFERED","select * from(
select  b.id,
        b.name
from biz b
where b.status = 3
and b.country = 'AR'
order by b.id) consulta",3
"Confronte - Usuarios",Usuarios,"select *  from person;  ",3
"Confronte - Status Crawlers ","Confronte - Status Crawlers ","select * from (
SELECT f1.id, f1.biz_fk, f1.host, f1.status, f1.turn,
      from_unixtime((10_start_ts)) 10_start_ts,
      from_unixtime((10_end_ts)) 10_end_ts,
      from_unixtime((20_start_ts)) 20_start_ts,
      from_unixtime((20_end_ts)) 20_end_ts,
      from_unixtime((30_start_ts)) 30_start_ts,
      from_unixtime((30_end_ts)) 30_end_ts,
      10_urls_read,
      20_offers_read,
      20_offers_inserted,
      20_offers_updated,
      from_unixtime(b2.insert_ts) biz_insert_ts,
      b2.premium,
      b2.clicks_promised,
      b2.status statustienda
FROM foursome_run f1, biz b2
where 1=1
and f1.biz_fk = b2.id
and f1.id >= ( SELECT max(f2.id) FROM foursome_run f2 where f2.biz_fk = f1.biz_fk )
and f1.biz_fk in (
SELECT b.id
FROM biz b
where b.status = 1 and b.country = $P{CO_country}
)
and (
10_end_ts is null
or 20_offers_read = 0
)
) t
order by t.clicks_promised desc;",3
"Confronte - Ofertas en el sitio pendientes de bindear (total y por pais)","Confronte - Ofertas en el sitio pendientes de bindear (total y por pais)","SELECT b.country pais, count(*) cantidad
FROM offer o, biz b
where o.showable = 1
and o.product_fk is null
and o.biz_fk = b.id
group by b.country
UNION
SELECT 'TOTAL' pais, count(*) cantidad
FROM offer o
where o.showable = 1
and o.product_fk is null",3
"MO - Administracion Datos Facturación","Adminstrar los DF","SELECT historicos.USUARIO_ID as UsuarioId,
  usuario.usu_apodo as Apodo,
  usuario.usu_email  as Email,
  historicos.RAZON_SOCIAL as RazonSocial,             
  historicos.DOMICILIO_COMERCIAL as Domicilio,      
  historicos.LOCALIDAD_COMERCIAL as Localidad,
  historicos.CODIGO_POSTAL_COMERCIAL as CodigoPostal,
  historicos.TELEFONO_COMERCIAL as TelComercial,
  historicos.EMAIL_COMERCIAL as EmailComercial,
  historicos.ESTADO_ID as Estado,
  historicos.CONDICION_IVA_ID as CondicionIVA,
  historicos.TIPO_DOCUMENTO_ID as TipoDoc,
  historicos.NRO_DOCUMENTO as NroDoc,
  historicos.PROVINCIA_ID as Provincia,
  historicos.PERCEPC_IB as PrecepcionIB,
  historicos.INGBRNETO as IngresoBrutoNeto,
  historicos.MINIMO_IB as MinimoIB,
  historicos.NUMERO_INSCR_IIBB as nro_insc_iibb,
  historicos.CABA as caba,
decode(historicos.IIBB_ID, 1, 'CM', 2,'Local', 3, 'No Inscripto', 4, 'Exento', '') as id_iibb,
  historicos.ALTO_RIESGO altoRiesgo,
  TO_CHAR(historicos.FECHA_AUDITA, 'dd/mm/yyyy HH24:MI:SS') as FechaAudita,
  historicos.USUARIO_AUDITA as UsuarioAudita,
TO_CHAR(historicos.FECHA_CREACION, 'dd/mm/yyyy HH24:MI:SS') as FechaCreacion
  FROM (SELECT   h.*,
                 DENSE_RANK () OVER (PARTITION BY h.usuario_id ORDER BY h.ID DESC)
                                                                     posicion
            FROM SACAR.cce_datos_facturacion_hist h
        ORDER BY h.ID DESC) historicos
       INNER JOIN SACAR.sac_usuario usuario ON historicos.usuario_id = usuario.usuario_id
 WHERE historicos.posicion = 1
   AND (0 = DECODE($P{DF_filtro_estado} ,'Todos los Ultimos',0,1) OR historicos.estado_id = $P{DF_filtro_estado} )
   AND (0 = DECODE($P{DF_filtro_apodo} ,'Ingrese Apodo',0,1) OR usuario.usu_apodo = $P{DF_filtro_apodo} )
   AND (0 = DECODE($P{DF_filtro_usuario} ,'Ingrese Usuario',0,1) OR usuario.usuario_id = $P{DF_filtro_usuario} )
   AND (0 = DECODE($P{DF_filtro_mail} ,'Ingrese Email',0,1) OR usuario.usu_email = $P{DF_filtro_mail} )
   AND (0 = DECODE($P{DF_filtro_padron} ,'Todos',0,1) OR historicos.alto_riesgo = $P{DF_filtro_padron} )",2
"MO - Detalle Avisos Activos","MO - Detalle Avisos Activos","select u.usuario_id, u.usu_apodo, u.usu_apellido, u.usu_nombre, u.usu_email,u.USU_COD_AREA_TEL, u.USU_TELEFONO,decode(u.tius_id,1,'BK',2,'WEB')TU   ,cu.estado, cu.CONDICION,count(a.AV_ID)AVISOS_ACTIVOS  from sacar.sac_usuario u, sacar.sac_aviso a, sacar.cce_cuenta cu  where 0=0  and av_estado = 3  and a.usuario_id = u.usuario_id  and cu.usuario_id = u.usuario_id  group by u.usuario_id, u.usu_apodo, u.usu_apellido, u.usu_nombre, u.usu_email ,u.USU_COD_AREA_TEL, u.USU_TELEFONO,u.tius_id   ,cu.estado, cu.CONDICION  order by usuario_id asc",2
"MO - Limite de credito Usuarios No Suspendidos","MO - Limite de credito Usuarios No Suspendidos","SELECT  cuenta.tipo_cliente_codigo as tipo_cliente,         (SELECT limite.limite_credito            FROM SACAR.cce_limite_cuenta limite           WHERE limite.codigo = cuenta.tipo_cliente_codigo) as limite_credito,         cuenta.usuario_id as usuario_id,         (SELECT usuario.usu_apodo            FROM SACAR.sac_usuario usuario           WHERE usuario.usuario_id = cuenta.usuario_id) as usuario_apodo,         'N' as usuario_suspendido,         cuenta.ID as cuenta_id, cuenta.estado as cuenta_estado,           NVL ((SELECT SUM (importe_movimiento)                   FROM SACAR.erp_movimiento em                  WHERE em.id_usuario = cuenta.usuario_id),                0               )         + NVL ((SELECT SUM (lote.monto)                   FROM SACAR.cce_lote lote                  WHERE lote.cuenta_id = cuenta.ID AND lote.estado = 'CERRADO'),                0               )         + NVL ((SELECT SUM (cargo.monto)                   FROM SACAR.cce_cargo cargo                  WHERE cargo.cuenta_id = cuenta.ID                    AND cargo.estado = 'CONFIRMADO'),                0               )         - NVL ((SELECT SUM (pago.importe_pago)                   FROM SACAR.erp_pagos_on pago                  WHERE pago.id_usuario = cuenta.usuario_id                    AND (   pago.codigo_respuesta IS NULL                         OR (    pago.codigo_respuesta IS NOT NULL                             AND pago.codigo_respuesta <> 'OK'                            )                        )),                0               ) as cuenta_saldo  FROM SACAR.cce_cuenta cuenta  WHERE cuenta.usuario_id = NVL((SELECT usuario.usuario_id                                FROM SACAR.sac_usuario usuario                                WHERE usuario.usuario_id = cuenta.usuario_id and usuario.usu_suspendido = 'N'),0)    AND SIGN ((SELECT limite.limite_credito                    FROM SACAR.cce_limite_cuenta limite                   WHERE limite.codigo = cuenta.tipo_cliente_codigo)               - (  NVL ((SELECT SUM (importe_movimiento)                            FROM SACAR.erp_movimiento em                           WHERE em.id_usuario = cuenta.usuario_id),                         0                        )                  + NVL ((SELECT SUM (lote.monto)                            FROM SACAR.cce_lote lote                           WHERE lote.cuenta_id = cuenta.ID                             AND lote.estado = 'CERRADO'),                         0                        )                  + NVL ((SELECT SUM (cargo.monto)                            FROM SACAR.cce_cargo cargo                           WHERE cargo.cuenta_id = cuenta.ID                             AND cargo.estado = 'CONFIRMADO'),                         0                        )                  - NVL ((SELECT SUM (pago.importe_pago)                            FROM SACAR.erp_pagos_on pago                           WHERE pago.id_usuario = cuenta.usuario_id                             AND DECODE(pago.codigo_respuesta, NULL, 'NO_OK', pago.codigo_respuesta) <> 'OK'),                         0                        )                 )              ) < 0;",2
"MO - Txs PS Mayores a 500 - 8AM","MO - Txs PS Mayores a 500 - 8AM","SELECT   padre.*, u2.usu_apodo apodo_vendedor,           DECODE (u2.tius_id, 1, 'BK', 2, 'WEB') tuv,           u2.usu_email mail_vendedor      FROM (SELECT u.usuario_id comprador, u.usu_apodo, u.usu_email,   to_char (u.usu_fecha_acepta_condiciones, 'DD/MM/RRRR') Fecha_Condiciones,   to_char (o.generacion, 'DD/MM/RRRR HH24:MI') Fecha_Generacion,                   ca.transaccion_id, ca.aviso_id, ca.aviso_titulo,                   ca.aviso_moneda, ca.aviso_precio, o.vendedor_id vendedor,                   bsq.descripcion_l1              FROM sacar.pgs_operacion o,                   sacar.sac_usuario u,                   sacar.cce_cargo ca,                   sacar.sac_aviso a,                   sacar.bsq_agrupador_categoria bsq             WHERE o.generacion > sysdate - 1 AND o.estado = 'PENDIENTE'               AND o.comprador_id = u.usuario_id               AND ca.ID = o.cargo_id               AND ca.aviso_precio >= 500               AND ca.aviso_id = a.av_id               AND a.cate_id = bsq.categoria_id) padre,           sacar.sac_usuario u2     WHERE 0 = 0 AND padre.vendedor = u2.usuario_id  order by 5  ",2
"MO - Txs PS Mayores a 500 - 16PM","MO - Txs PS Mayores a 500 - 16PM","SELECT   padre.*, u2.usu_apodo apodo_vendedor,           DECODE (u2.tius_id, 1, 'BK', 2, 'WEB') tuv,           u2.usu_email mail_vendedor      FROM (SELECT u.usuario_id comprador, u.usu_apodo, u.usu_email,   to_char (u.usu_fecha_acepta_condiciones, 'DD/MM/RRRR') Fecha_Condiciones,   to_char (o.generacion, 'DD/MM/RRRR') Fecha_Generacion,                   ca.transaccion_id, ca.aviso_id, ca.aviso_titulo,                   ca.aviso_moneda, ca.aviso_precio, o.vendedor_id vendedor,                   bsq.descripcion_l1              FROM sacar.pgs_operacion o,                   sacar.sac_usuario u,                   sacar.cce_cargo ca,                   sacar.sac_aviso a,                   sacar.bsq_agrupador_categoria bsq             WHERE TO_DATE (TRUNC (o.generacion),'DD/MM/RRRR') =                                                   TO_DATE (TRUNC (SYSDATE),'DD/MM/RRRR')               AND o.estado = 'PENDIENTE'               AND o.comprador_id = u.usuario_id               AND ca.ID = o.cargo_id               AND ca.aviso_precio >= 500               AND ca.aviso_id = a.av_id               AND a.cate_id = bsq.categoria_id) padre,           sacar.sac_usuario u2     WHERE 0 = 0 AND padre.vendedor = u2.usuario_id  order by 5  ",2
"MO - Destaques contratados el dia anterior","MO - Destaques contratados el dia anterior","select u.usuario_id, u.usu_apodo, u.usu_nombre, u.usu_apellido, u.usu_email  ,decode(u.tius_id,1,'BK',2,'WEB')TU  , u.USU_COD_AREA_TEL,u.USU_TELEFONO, count(ca.id)CANTIDAD,sum(ca.monto)MONTO, ca.DESTAQUE_TITULO  ,to_char(ca.generacion,'DD/MM/RRRR')FECHA, to_char(max(trunc(aud.AUD_TIMESTAMP)),'DD/MM/RRRR')FECHA_CAMBIO, decode(aud.TIUS_ID,1,'BK',2,'WEB')Se_Transformo_En  from sacar.sac_usuario u, sacar.cce_cargo ca, sacar.cce_cuenta cu, sacar.aud_sac_usuario aud  where 0=0  and cu.id = ca.cuenta_id  and cu.USUARIO_ID = u.usuario_id  and ca.TIPO_CARGO_ID = 2  and aud.USUARIO_ID (+) = u.usuario_id  and trunc(ca.GENERACION)  like  trunc(sysdate) -1  group by u.usuario_id, u.usu_apodo, u.usu_nombre, u.usu_apellido, u.usu_email, u.tius_id  , u.USU_COD_AREA_TEL,u.USU_TELEFONO,  ca.DESTAQUE_TITULO,to_char(ca.generacion,'DD/MM/RRRR')  ,to_char(aud.AUD_TIMESTAMP,'DD/MM/RRRR'), aud.tius_id  order by Usuario_id",2
"MO - Destaques del día anterior","MO - Destaques del día anterior","SELECT padre.*, u2.usu_apodo apodo_vendedor,decode(u2.tius_id,1,'BK',2,'WEB')TUV  , u2.usu_email mail_vendedor    FROM (    SELECT u.usuario_id comprador, u.usu_apodo, u.usu_email                  ,to_char(u.usu_fecha_acepta_condiciones,'DD/MM/RRRR')                  ,to_char(o.generacion,'DD/MM/RRRR')                 ,ca.transaccion_id, ca.aviso_id, ca.aviso_titulo,ca.aviso_moneda                 ,ca.aviso_precio, o.vendedor_id vendedor, bsq.DESCRIPCION_L1            FROM sacar.pgs_operacion o, sacar.sac_usuario u, sacar.cce_cargo ca            ,sacar.sac_aviso a, sacar.BSQ_AGRUPADOR_CATEGORIA bsq           WHERE TO_DATE (o.generacion, 'DD/MM/RRRR') =                                     TO_DATE ( trunc(SYSDATE - 1), 'DD/MM/RRRR')             AND o.estado = 'PENDIENTE'             AND o.comprador_id = u.usuario_id             AND ca.ID = o.cargo_id             AND ca.aviso_precio >= 500             and ca.aviso_id = a.av_id             and a.cate_id = bsq.categoria_id             ) padre,         sacar.sac_usuario u2   WHERE 0 = 0 AND padre.vendedor = u2.usuario_id",2
"MO - Usuarios Registrados entre Fechas","MO - Usuarios Registrados entre Fechas","select u.USUARIO_ID, u.USU_APODO, u.USU_NOMBRE, u.USU_APELLIDO, u.USU_EMAIL   from sacar.sac_usuario u, sacar.sac_usuario_registro ur  where 0=0  and trunc(u.USU_FECHA_ACEPTA_CONDICIONES) between  to_date ($P{filtro_fecha_desde},'DD/MM/RRRR')  and to_date($P{filtro_fecha_hasta},'DD/MM/RRRR')  and u.USUARIO_ID = ur.USUARIO_ID  and ur.ESTADO_REGISTRO_ID = 1",2
"MO - Consistencia - Lotes que van a generarse","MO - Consistencia - Lotes que van a generarse","SELECT   cu.ID, c.destino, cu.tipo_cliente_codigo, cu.envio_estado, cu.estado,           to_char((cu.fecha_lote_mo + lim.cierre_lote_mo),'dd/mm/yyyy') AS prox_lote_mo,           to_char((cu.fecha_lote_ps + lim.cierre_lote_ps),'dd/mm/yyyy') AS prox_lote_ps,           u.usu_suspendido, SUM (c.monto) AS montot      FROM sacar.cce_cargo c,           sacar.cce_cuenta cu,           sacar.sac_usuario u,           sacar.cce_limite_cuenta lim     WHERE c.cuenta_id = cu.ID       AND cu.usuario_id = u.usuario_id       AND cu.tipo_cliente_codigo = lim.codigo       AND c.estado = 'CONFIRMADO'  --condiciones que cumple para enlotar       AND cu.envio_estado = 'RECIBIDO'       AND u.usu_suspendido = 'N'       AND cu.estado = 'HABILITADA'       AND (     --MO               (    c.destino = 'MAS_OPORTUNIDADES'                AND TRUNC (cu.fecha_lote_mo) + lim.cierre_lote_mo <                                                                 TRUNC (SYSDATE)               )            OR   --PS               (    c.destino = 'PAGO_SEGURO'                AND TRUNC (cu.fecha_lote_ps) + lim.cierre_lote_ps <                                                                 TRUNC (SYSDATE)               )           )  GROUP BY cu.ID,           c.destino,           cu.tipo_cliente_codigo,           cu.envio_estado,           cu.estado,           cu.fecha_lote_mo,           lim.cierre_lote_mo,           cu.fecha_lote_ps,           lim.cierre_lote_ps,           u.usu_suspendido    HAVING SUM (c.monto) > 3 OR SUM (c.monto) < 0",2
"MO - Consistencia - Cuentas de PS con saldo <> 0","MO - Consistencia - Cuentas de PS con saldo <> 0","SELECT c.ID, c.usuario_id, u.usu_apodo,         NVL ((SELECT SUM (m.importe_movimiento)                 FROM sacar.erp_movimiento m                WHERE m.id_usuario = c.usuario_id                  AND m.tipo_cuenta_corriente = 'PS'),              0             ) ctacte,         NVL ((SELECT SUM (cargo.monto)                 FROM sacar.cce_cargo cargo                WHERE cargo.destino = 'PAGO_SEGURO'                  AND cargo.estado = 'CONFIRMADO'                  AND cargo.cuenta_id = c.ID),              0             ) confirmado,         NVL ((SELECT SUM (cargo.monto)                 FROM sacar.cce_lote lote, sacar.cce_cargo cargo                WHERE lote.estado = 'CERRADO'                  AND lote.ID = cargo.lote_id                  AND cargo.estado = 'EN_LOTE'                  AND cargo.destino = 'PAGO_SEGURO'                  AND cargo.cuenta_id = c.ID),              0             ) en_lote    FROM sacar.cce_cuenta c, sacar.sac_usuario u   WHERE c.usuario_id = u.usuario_id     AND ( (   NVL ((SELECT SUM (m.importe_movimiento)                     FROM sacar.erp_movimiento m                    WHERE m.id_usuario = c.usuario_id                      AND m.tipo_cuenta_corriente = 'PS'),                  0                 ) +           NVL ((SELECT SUM (cargo.monto)                     FROM sacar.cce_cargo cargo                    WHERE cargo.destino = 'PAGO_SEGURO'                      AND cargo.estado = 'CONFIRMADO'                      AND cargo.cuenta_id = c.ID),                  0                 ) +           NVL ((SELECT SUM (cargo.monto)                     FROM sacar.cce_lote lote, sacar.cce_cargo cargo                    WHERE lote.estado = 'CERRADO'                      AND lote.ID = cargo.lote_id                      AND cargo.estado = 'EN_LOTE'                      AND cargo.destino = 'PAGO_SEGURO'                      AND cargo.cuenta_id = c.ID),                  0                 ) ) <> 0         )",2
"MO - Monitoreo - Cantidad de usuarios que no validaron su registro ayer","MO - Monitoreo - Cantidad de usuarios que no validaron su registro ayer","select count(*) cantidad  from sacar.sac_usuario_registro ur, sacar.sac_usuario u  where ur.estado_registro_id = 1  and ur.usuario_id = u.usuario_id  and trunc(u.USU_FECHA_INGRESO) = trunc(sysdate - 1)",2
"MO - DDestaques Dia Anterior","MO - DDestaques Dia Anterior","select u.usuario_id, u.usu_apodo, u.usu_nombre, u.usu_apellido, u.usu_email  ,decode(u.tius_id,1,'BK',2,'WEB')TU  , u.USU_COD_AREA_TEL,u.USU_TELEFONO, count(ca.id)CANTIDAD,sum(ca.monto)MONTO, ca.DESTAQUE_TITULO  ,to_char(ca.generacion,'DD/MM/RRRR')FECHA, to_char(max(trunc(aud.AUD_TIMESTAMP)),'DD/MM/RRRR')FECHA_CAMBIO, decode(aud.TIUS_ID,1,'BK',2,'WEB')Se_Transformo_En  from sacar.sac_usuario u, sacar.cce_cargo ca, sacar.cce_cuenta cu, sacar.aud_sac_usuario aud  where 0=0  and cu.id = ca.cuenta_id  and cu.USUARIO_ID = u.usuario_id  and ca.TIPO_CARGO_ID = 2  and aud.USUARIO_ID (+) = u.usuario_id  and trunc(ca.GENERACION)  like  trunc(sysdate) -1  group by u.usuario_id, u.usu_apodo, u.usu_nombre, u.usu_apellido, u.usu_email, u.tius_id  , u.USU_COD_AREA_TEL,u.USU_TELEFONO,  ca.DESTAQUE_TITULO,to_char(ca.generacion,'DD/MM/RRRR')  ,to_char(aud.AUD_TIMESTAMP,'DD/MM/RRRR'), aud.tius_id  order by Usuario_id",2
"MO - Pago Seguro - Mediaciones ","MO - Pago Seguro - Mediaciones ","select v.usuario_id vendedor_id, v.usu_apodo vendedor_apodo,         c.usuario_id comprador_id, c.usu_apodo comprador_apodo,         o.CARGO_ID,          m.id mediacion_id,         m.estado mediacion_estado,         m.valor_comprador,         m.valor_vendedor,         to_char(m.generacion,'yyyy/mm/dd hh24:mi') as mediacion_generacion,         to_char(m.actualizacion,'yyyy/mm/dd hh24:mi') as mediacion_actualizacion,         m.texto,         m.actualizador  from sacar.pgs_operacion o, sacar.pgs_mediacion m, sacar.sac_usuario v, sacar.sac_usuario c  where o.MEDIACION_ID = m.id  and o.cargo_id is not null  and o.vendedor_id = v.usuario_id  and o.comprador_id = c.usuario_id  and (   $P{MO_reporting_filtro_apodo_vendedor} = 'Apodo Vendedor'  or  lower(v.usu_apodo) like lower($P{MO_reporting_filtro_apodo_vendedor})  )  and   (  $P{MO_reporting_filtro_apodo_comprador} = 'Apodo Comprador'  OR  lower(c.usu_apodo) like lower($P{MO_reporting_filtro_apodo_comprador})  )  and (  $P{MO_reporting_filtro_cargo_id} = 0 OR  o.cargo_id = $P{MO_reporting_filtro_cargo_id}  )  and (  $P{MO_reporting_filtro_operacion_id} = 0 OR  o.id = $P{MO_reporting_filtro_operacion_id}  )  ",2
"MO - Usuarios Registrados Mery","MO - Usuarios Registrados Mery","select u.USU_APODO,         u.USU_NOMBRE,         u.USU_APELLIDO,         u.USU_EMAIL,         to_char(ur.USU_FECHA_NAC,'DD/MM/RRRR')as Fecha Nac,         (select PRV_NOMBRE from sacar.sac_provincias where  PRV_ID=u.PRV_ID) AS provincia,          u.USU_NEWSLETTER,          u.USU_SEXO  from sacar.sac_usuario u, sacar.sac_usuario_registro ur  where u.usuario_id = ur.usuario_id  ",2
"MO - Consistencia - Operaciones de PS PENDIENTES hace mas de 14 días","MO - Consistencia - Operaciones de PS PENDIENTES hace mas de 14 días","select id, cargo_id, comprador_id, vendedor_id, estado, to_char(generacion,'dd/mm/yyyy') generacion, to_char(actualizacion,'dd/mm/yyyy') actualizacion  from sacar.pgs_operacion  where estado = 'PENDIENTE'  and actualizacion < sysdate - 14  and generacion >= to_date ('01-01-2009','dd-mm-yyyy')",2
"MO - Consistencia - Operaciones PS NUEVAs cuya calificacion ya fue definida","MO - Consistencia - Operaciones PS NUEVAs cuya calificacion ya fue definida","select id, cargo_id, comprador_id, vendedor_id, estado, to_char(generacion,'dd/mm/yyyy') generacion, to_char(actualizacion,'dd/mm/yyyy') actualizacion  from sacar.pgs_operacion o  where estado = 'NUEVA'  and 2<= (      select count(1)      from sacar.cal_calificacion a, sacar.cce_cargo c      where a.transaccion_id = c.transaccion_id      and c.id = o.cargo_id      and a.estado in ('CONFIRMADA','RECALIFICACION CONFIRMADA','VENCIDA')  )",2
"MO - Consistencia - Cargos de transacciones sin PS GENERADOs hace mas de 26 dias ","MO - Consistencia - Cargos de transacciones sin PS GENERADOs hace mas de 26 dias ","SELECT u.usuario_id,          u.usu_apodo,          c.ID,          c.tipo_cargo_id,          c.cuenta_id,          c.monto,          TO_CHAR(c.generacion, 'dd/mm/yyyy') generacion,          TO_CHAR(c.actualizacion, 'dd/mm/yyyy') actualizacion,          c.estado,          c.origen,          c.destino,          c.aviso_id     FROM sacar.cce_cargo c,          sacar.cce_cuenta a,          sacar.sac_usuario u    WHERE c.cuenta_id = a.ID      AND a.usuario_id = u.usuario_id      AND c.generacion < (SYSDATE - 26)      AND c.estado = 'GENERADO'      AND NOT EXISTS (SELECT 1                        FROM sacar.pgs_operacion o                       WHERE o.cargo_id = c.ID)",2
"MO - Consistencia - Calificaciones PENDIENTEs sin PS hace mas de 26 días","MO - Consistencia - Calificaciones PENDIENTEs sin PS hace mas de 26 días","SELECT /*+ NO_CPU_COSTING */ a.ID,          a.transaccion_id,          a.origen,          a.usuario_calificador_id,          a.usuario_calificado_id,          a.valoracion,          a.resultado_venta,          TO_CHAR(a.generacion, 'dd/mm/yyyy') generacion,          TO_CHAR(a.actualizacion, 'dd/mm/yyyy') actualizacion,          estado,          estado_contraparte,          motivo_no_realizacion_id,          a.aviso_id     FROM sacar.cal_calificacion a    WHERE a.generacion < (SYSDATE - 26)      AND a.estado = 'PENDIENTE'      AND NOT EXISTS (SELECT 1                        FROM sacar.pgs_operacion o,                             sacar.cce_cargo c                       WHERE o.cargo_id = c.ID                         AND c.transaccion_id = a.transaccion_id)",2
"MO - Consistencia - Cargos GENERADOs hace mas de 26 dias con calificacion confirmada","MO - Consistencia - Cargos GENERADOs hace mas de 26 dias con calificacion confirmada","SELECT u.usuario_id,          u.usu_apodo,          c.ID,          c.tipo_cargo_id,          c.cuenta_id,          c.monto,          TO_CHAR(c.generacion, 'dd/mm/yyyy') generacion,          TO_CHAR(c.actualizacion, 'dd/mm/yyyy') actualizacion_cargo,          c.estado,          c.origen,          c.destino,          c.aviso_id,          cvendedor.estado,          cvendedor.estado_contraparte,          cvendedor.resultado_venta,          TO_CHAR(cvendedor.actualizacion, 'dd/mm/yyyy') actualizacion_calificacion     FROM sacar.cce_cargo c,          sacar.cce_cuenta a,          sacar.sac_usuario u,          sacar.cal_calificacion cvendedor    WHERE a.ID = c.cuenta_id      AND u.usuario_id = a.usuario_id      AND cvendedor.transaccion_id = c.transaccion_id      AND 'VENDEDOR' = cvendedor.origen      AND 26 < SYSDATE - c.generacion      AND 'GENERADO' = c.estado      AND c.generacion >= TO_DATE('01-01-2009', 'dd-mm-yyyy')      AND 2 <= (SELECT COUNT(1)                  FROM sacar.cal_calificacion o                 WHERE cvendedor.transaccion_id = o.transaccion_id                   AND estado IN ('CONFIRMADA', 'RECALIFICACION CONFIRMADA', 'VENCIDA'))",2
"MO - Consistencia - Pagos de PS ENVIADOs que no figuran en ERP_MOVIMIENTO","MO - Consistencia - Pagos de PS ENVIADOs que no figuran en ERP_MOVIMIENTO","select c.usuario_id, pps.id, pps.cuenta_id, pps.monto, pps.estado_envio, to_char(pps.fecha_envio,'dd/mm/yyyy') fecha_envio,           to_char(pps.generacion,'dd/mm/yyyy') generacion, to_char(pps.actualizacion,'dd/mm/yyyy') actualizacion,           pps.cargo_id  from sacar.cce_pago_ps pps, sacar.cce_cuenta c   where pps.CUENTA_ID = c.id  and pps.estado_envio = 'ENVIADO'  and trunc(pps.generacion) <= trunc(sysdate)  and monto > 0  and not exists (      select 1      from sacar.erp_movimiento m      where m.id_usuario = c.usuario_id      and m.tipo_comprobante = 'C'      and tipo_cuenta_corriente = 'PS'      and upper(detalle_movimiento) like 'PAGO DINERO%MAIL%'      and pps.id = m.id_transaccion  )",2
"MO - Consistencia - Pagos de NPS ENVIADOs que no figuran en ERP_MOVIMIENTO","MO - Consistencia - Pagos de NPS ENVIADOs que no figuran en ERP_MOVIMIENTO","select c.usuario_id, pnps.id, pnps.cuenta_id, pnps.monto, pnps.estado, pnps.origen, pnps.mp_id, pnps.nps_id,  pnps.nps_codigo, pnps.nps_mensaje,  pnps.nps_nro_cupon,           pnps.nps_codigo_autorizacion,  pnps.nps_terminal_interno_id,  pnps.nps_email,  pnps.nps_nombre_apellido,  pnps.estado_envio,            to_char(pnps.generacion,'dd/mm/yyyy') generacion, to_char(pnps.actualizacion,'dd/mm/yyyy') actualizacion  from sacar.cce_pago_nps pnps, sacar.cce_cuenta c   where pnps.CUENTA_ID = c.id  and pnps.estado_envio = 'ENVIADO'  and trunc(pnps.actualizacion) <= trunc(sysdate)  and not exists (      select 1      from sacar.erp_movimiento m      where m.id_usuario = c.usuario_id      and m.tipo_comprobante = 'C'      and pnps.id = m.id_transaccion  )",2
"MO - Consistencia - Pagos de DM ENVIADOs que no figuran en ERP_MOVIMIENTO","MO - Consistencia - Pagos de DM ENVIADOs que no figuran en ERP_MOVIMIENTO","select c.usuario_id, pdm.id, pdm.cuenta_id, pdm.monto, pdm.estado, to_char(pdm.dm_fecha,'dd/mm/yyyy') dm_fecha,          pdm.estado, pdm.dm_monto, pdm.dm_montoneto, pdm.dm_email, pdm.dm_direccion, pdm.dm_comentario,          pdm.dm_metodopago, pdm.dm_moneda, pdm.estado_envio, to_char(pdm.fecha_envio,'dd/mm/yyyy') fecha_envio,           to_char(pdm.generacion,'dd/mm/yyyy') generacion, to_char(pdm.actualizacion,'dd/mm/yyyy') actualizacion  from sacar.cce_pago_dm pdm, sacar.cce_cuenta c   where pdm.CUENTA_ID = c.id  and pdm.estado_envio = 'ENVIADO'  and trunc(pdm.actualizacion) <= trunc(sysdate)  and not exists (      select 1      from sacar.erp_movimiento m      where m.id_usuario = c.usuario_id      and m.tipo_comprobante = 'C'      and m.tipo_cuenta_corriente = 'MO'      and pdm.id = m.id_transaccion      and detalle_movimiento like 'PAGO TRANSF%DINERO MAIL%'  ) ",2
"MO - Consistencia - Pagos de DM PENDIENTEs hace mas de 3 días","MO - Consistencia - Pagos de DM PENDIENTEs hace mas de 3 días","select c.usuario_id, pdm.id, pdm.cuenta_id, pdm.monto, pdm.estado, to_char(pdm.dm_fecha,'dd/mm/yyyy') dm_fecha,          pdm.estado, pdm.dm_monto, pdm.dm_montoneto, pdm.dm_email, pdm.dm_direccion, pdm.dm_comentario,          pdm.dm_metodopago, pdm.dm_moneda, pdm.estado_envio, to_char(pdm.fecha_envio,'dd/mm/yyyy') fecha_envio,           to_char(pdm.generacion,'dd/mm/yyyy') generacion, to_char(pdm.actualizacion,'dd/mm/yyyy') actualizacion  from sacar.cce_pago_dm pdm, sacar.cce_cuenta c   where pdm.estado = 'PENDIENTE'  and pdm.generacion < (sysdate - 3)  and pdm.CUENTA_ID = c.id",2
"MO - Consistencia - Pagos de NPS PENDIENTEs hace mas de 3 días","MO - Consistencia - Pagos de NPS PENDIENTEs hace mas de 3 días","select c.usuario_id, pnps.id, pnps.cuenta_id, pnps.monto, pnps.estado, pnps.origen, pnps.mp_id, pnps.nps_id,  pnps.nps_codigo, pnps.nps_mensaje,  pnps.nps_nro_cupon,           pnps.nps_codigo_autorizacion,  pnps.nps_terminal_interno_id,  pnps.nps_email,  pnps.nps_nombre_apellido,  pnps.estado_envio,            to_char(pnps.generacion,'dd/mm/yyyy') generacion, to_char(pnps.actualizacion,'dd/mm/yyyy') actualizacion  from sacar.cce_pago_nps pnps, sacar.cce_cuenta c   where pnps.estado = 'PENDIENTE'  and pnps.generacion < (sysdate - 3)  and pnps.CUENTA_ID = c.id",2
"MO - Monitoreo - Registro de precio en pesos de las transacciones","MO - Monitoreo - Registro de precio en pesos de las transacciones","select origen, count(*) cantidad, decode( count(*), 0, 'ok', 'No se est&aacute; grabando el precio en pesos de '||origen) status  from sacar.cce_cargo  where aviso_precio_pesos is null  and trunc(generacion) = trunc(sysdate-1)  and tipo_cargo_id = 1  group by origen",2
"MO - Monitoreo - Actividad del proceso de cierre de avisos","MO - Monitoreo - Actividad del proceso de cierre de avisos","select decode( count(*), 0,       'El proceso de cierre de avisos funciona',       'Hay errores con el proceso de cierre de avisos!!!') actividad  from sacar.sac_aviso  where av_estado = 3  and av_fecha_expiracion < sysdate",2
"MO - Monitoreo - Consistencia de las fechas de las subastas","MO - Monitoreo - Consistencia de las fechas de las subastas","select decode( count(*), 0,           'Ok. Las fechas de finalizacion de las subastas son consistentes.',           'Las fechas de finalizacion de '||count(*)||' subastas son inconsistentes.' ) status  from sacar.sac_aviso a, sacar.sbt_subasta s  where a.tipo = 'SUBASTA'  and a.av_id = s.aviso_id  and a.av_fecha_expiracion <> s.FINALIZACION  and estado <> 'FINALIZADA'",2
"MO - Monitoreo - Actividad del login","MO - Monitoreo - Actividad del login","select to_char(creacion,'hh24') hora,           decode(count(*),              0,'Anda el login? No se logue&oacute; nadie',               count(*)||' logins ok') status   from sacar.SAC_REG_USRIP  where trunc(creacion) = trunc(sysdate-1)  group by to_char(creacion,'hh24')  order by to_char(creacion,'hh24')",2
"MO - Monitoreo - Registros del día de ayer","MO - Monitoreo - Registros del día de ayer","select decode ( count(*),      0, 'No hubo registraciones ayer. Funciona la registraci&oacute;n?',      'Ayer hubo '||count(*)||' registraciones exitosas.' ) registraciones  from sacar.sac_usuario  where trunc(usu_fecha_ingreso) = trunc(sysdate-1)",2
"MO - Consistencia - Pdfs sin movimientos asociados","MO - Consistencia - Pdfs sin movimientos asociados","select *  from sacar.erp_pdf p  where p.TIPO_COMPROBANTE IN ( 'FCA', 'FCB', 'NCA', 'NCB')  AND p.ID_FACTURA not in (select m.NUMERO_COMPROBANTE from sacar.erp_movimiento m                          where m.NUMERO_COMPROBANTE = p.ID_FACTURA                          AND M.SUBTIPO_COMPROBANTE = P.TIPO_COMPROBANTE                          and P.TIPO_COMPROBANTE IN ( 'FCA', 'FCB', 'NCA', 'NCB') ) ",2
"MO - Consistencia - Movimientos sin PDFs","MO - Consistencia - Movimientos sin PDFs","SELECT id_movimiento, id_usuario, tipo_cuenta_corriente, to_char(fecha_movimiento,'dd/mm/yyyy') fecha_movimiento,           tipo_movimiento, tipo_comprobante, numero_comprobante, importe_movimiento, to_char(fecha_recepcion,'dd/mm/yyyy') fecha_recepcion,          txt_respuesta, id_transaccion, medio_pago  FROM SACAR.ERP_MOVIMIENTO M  WHERE M.SUBTIPO_COMPROBANTE IN ( 'FCA', 'FCB', 'NCA', 'NCB')  AND M.NUMERO_COMPROBANTE not in ( select p.ID_FACTURA                                      from sacar.erp_pdf p                                      where p.TIPO_COMPROBANTE IN ( 'FCA', 'FCB', 'NCA', 'NCB')                                      AND M.NUMERO_COMPROBANTE = P.ID_FACTURA                                      AND M.SUBTIPO_COMPROBANTE = P.TIPO_COMPROBANTE )",2
"MO - Consistencia - Brokers sin datos fidedignos","MO - Consistencia - Brokers sin datos fidedignos","select u. usu_apodo, u.usuario_id, (select count(*) from sacar.sac_aviso a where a.usuario_id = u.usuario_id and av_estado = 3) avisos_activos  from sacar.cce_cuenta c, sacar.sac_usuario u  where 1=1  and c.usuario_id = u.usuario_id  and c.condicion <> 'DATOS_FIDEDIGNOS'  and u.tius_id = 1  ",2
"MO - Consistencia - Usuarios suspendidos graves con publicaciones activas","MO - Consistencia - Usuarios suspendidos graves con publicaciones activas","select u.usuario_id, u.usu_apodo, u.tius_id  from sacar.sac_usuario u  where exists (      select 1 from sacar.crm_suspension_usuario su      where su.usuario_id = u.usuario_id      and tipo_suspension = 'GRAVE'      and activa = 'Y'      and vigencia is null  )  and exists (      select 1 from sacar.sac_aviso a      where a.usuario_id = u.usuario_id      and a.av_estado = 3  )",2
"MO - Consistencia - Usuarios con alto porcentaje de anulacion","MO - Consistencia - Usuarios con alto porcentaje de anulacion","-- usuarios que anulan todo!  select usuario.usu_apodo, decode(usuario.tius_id,1,'Broker',2,'Particular') tipoUsuario, usuario.usuario_id,           generado.monto monto_generado, generado.cant cantidad_generada,          anulado.monto monto_anulado, anulado.cant cantidad_anulada,           anulado.monto / generado.monto pmonto,           anulado.cant / generado.cant pcant  from   (  select cuenta_id, sum(monto) monto, sum(aviso_cantidad) cant  from sacar.cce_cargo  where trunc(generacion) > trunc(sysdate-30)  group by cuenta_id   having sum(monto)>0  ) generado,  (  select cuenta_id, sum(monto) monto, sum(aviso_cantidad) cant  from sacar.cce_cargo  where trunc(generacion) > trunc(sysdate-30)  and estado = 'ANULADO'  having sum(monto)>0  group by cuenta_id  ) anulado,  sacar.sac_usuario usuario,  sacar.cce_cuenta cuenta  where generado.cuenta_id = anulado.cuenta_id  and anulado.cant / generado.cant > 0.5  and generado.cant > 5  and generado.cuenta_id = cuenta.id  and cuenta.usuario_id = usuario.usuario_id   order by anulado.cant / generado.cant desc,            anulado.monto / generado.monto desc,           anulado.monto desc,           anulado.cant desc",2
"MO - Consistencia - Usuarios con mas de 1 suspension activa","MO - Consistencia - Usuarios con mas de 1 suspension activa","SELECT *    FROM (SELECT   COUNT (*) cant, a.usuario_id, a.activa              FROM sacar.crm_suspension_usuario a             WHERE a.activa = 'Y'          GROUP BY usuario_id, activa)   WHERE cant > 1",2
"MO - Monitoreo - Avisos publicados ayer por canal y tipo","MO - Monitoreo - Avisos publicados ayer por canal y tipo","select AV_CREADO_POR,  TIPO,          'En SAC_AVISO figuran ' || count(*) || ' avisos tipo '||tipo||' dados de alta ayer por '||av_creado_por||'.'           AS PUBLICACIONES_POR_ORIGEN  from sacar.sac_aviso  where trunc(av_fecha_creacion) = trunc(sysdate-1)  group by av_creado_por, tipo  order by 1,2 ",2
"MO - Monitoreo - Actividad de los avisos el día de ayer","MO - Monitoreo - Actividad de los avisos el día de ayer","select esav_creado_por EVENTO, count(*) cantidad  from sacar.sac_estado_aviso  where trunc(esav_fecha_creacion) = trunc(sysdate-1)  group by esav_creado_por   ",2
"MO - Monitoreo - Cantidad de compras de ayer","MO - Monitoreo - Cantidad de compras de ayer","select origen, count(1) cantidadOperaciones, sum(monto) montoComisiones  from sacar.cce_cargo  where tipo_cargo_id = 1 --COMISION = 1  and trunc(generacion) = trunc(sysdate-1)  group by origen",2
"MO - Monitoreo - Ofertas en subastas de ayer","MO - Monitoreo - Ofertas en subastas de ayer","select tipo tipoSubasta, count(1) cantidadOfertasEnSubastas, count(distinct subasta_id) cantidadSubastasConOfertas  from sacar.sbt_oferta  where trunc(generacion) = trunc(sysdate-1)  group by tipo",2
"MO - Monitoreo - Pagos de NPS de ayer","MO - Monitoreo - Pagos de NPS de ayer","select estado estadoPagoNPS, estado_envio, origen origenPagoNPS, count(1) cantidadPagos, sum(monto) montoPagos  from sacar.cce_pago_nps  where trunc(generacion) = trunc(sysdate-1)  group by estado, estado_envio, origen  order by estado, estado_envio, origen",2
"MO - Monitoreo - Pagos de NPS pendientes hace mas de 3 dias","MO - Monitoreo - Pagos de NPS pendientes hace mas de 3 dias","select estado estadoPagoNPS, origen origenPagoNPS, count(1) cantidadPagos, sum(monto) montoPagos  from sacar.cce_pago_nps  where trunc(generacion) < trunc(sysdate-3)  and estado = 'PENDIENTE'  group by estado, origen  order by estado, origen",2
"MO - Monitoreo - Pagos de transferencias de dinero mail de ayer","MO - Monitoreo - Pagos de transferencias de dinero mail de ayer","select estado estadoPagoDM, estado_envio, count(1) cantidadPagos, sum(monto) montoPagos  from sacar.cce_pago_dm  where trunc(generacion) = trunc(sysdate-1)  group by estado, estado_envio  order by estado, estado_envio",2
"MO - Monitoreo - Calificaciones de ayer","MO - Monitoreo - Calificaciones de ayer","select estado, resultado_venta, valoracion, count(*) cantidad  from sacar.cal_calificacion cal  where trunc(cal.actualizacion) = trunc(sysdate-1)  group by estado, resultado_venta, valoracion  order by estado, resultado_venta, valoracion",2
"MO - Monitoreo - Calificaciones vs cargos de ayer","MO - Monitoreo - Calificaciones vs cargos de ayer","select calificaciones, cargos_comision  from  (  select count(*) CALIFICACIONES  from sacar.cal_calificacion comprador, sacar.cal_calificacion vendedor   where comprador.ORIGEN = 'COMPRADOR'  and vendedor.ORIGEN = 'VENDEDOR'  and comprador.transaccion_id = vendedor.transaccion_id  and trunc(comprador.generacion) = trunc(sysdate-1)   ),  (  select count(*) CARGOS_COMISION  from sacar.cce_cargo  where trunc(generacion) = trunc(sysdate-1)  and tipo_cargo_id = 1  )",2
"MO - Monitoreo - Motivo de no realizacion de las transacciones de ayer","MO - Monitoreo - Motivo de no realizacion de las transacciones de ayer","select decode(count(*), 0,      'Todas las calificaciones de tx no realizadas de ayer tienen motivos de no realizacion',      'No se est&aacute; grabando el motivo de no realizacion de las transacciones!') actividad  from sacar.cal_calificacion cal  where trunc(cal.actualizacion) = trunc(sysdate-1)  and resultado_venta = 'TRANSACCION NO REALIZADA'  and motivo_no_realizacion_id is null",2
"MO - Monitoreo - Errores de ayer y lo que va del día - GNR_LOG","MO - Monitoreo - Errores de ayer y lo que va del día - GNR_LOG","select id, to_char(generacion,'dd/mm/yyyy hh24:mi:ss') generacion, objeto_tipo, proceso, nivel, texto    from sacar.gnr_log  where nivel = 'ERROR'  and trunc(generacion) >= trunc(sysdate-1)  -- lineas nuevas 17-11-09 FP  and objeto_tipo <> 'PreguntasRespuestasAction'  order by generacion desc    ",2
"MO - Monitoreo - Actividad del archivador el día de ayer","MO - Monitoreo - Actividad del archivador el día de ayer","select id_proceso, proceso, to_char(fecha,'dd/mm/yyyy hh24:mi:ss') inicio,          to_char(fecha_fin,'dd/mm/yyyy hh24:mi:ss') fin, total_procesados, total_exitosos, total_erroneos  from sacar_h.historico_proceso  where trunc(fecha) = trunc(sysdate-1)",2
"MO - Monitoreo - Busqueda -> Consistencia de BSQ_BUSQUEDA","MO - Monitoreo - Busqueda -> Consistencia de BSQ_BUSQUEDA","(  select 'Hay ' || count(*) || ' avisos inactivos en el resultado de busqueda!!!' status  from sacar.bsq_busqueda b, sacar.sac_aviso a, sacar.bsq_actualizacion ba  where b.aviso_id = a.av_id  and b.ACTUALIZACION_ID = ba.ID  and ba.estado = 'ACTIVA'  and a.av_estado <> 3  )  UNION  (  select 'Hay ' || count(*) || ' avisos activos que faltan en el resultado de busqueda!!!' status  from sacar.sac_aviso a  where av_estado = 3  and not exists (      select 1       from sacar.bsq_busqueda b      where b.aviso_id = a.av_id  )  )",2
"MO - Consistencia - Usuarios enviados a Presea que nunca volvieron con OK","MO - Consistencia - Usuarios enviados a Presea que nunca volvieron con OK","select u.usu_apodo, t1.id_usuario, to_char(fecha_envio,'dd/mm/yyyy') fecha_envio, txt_envio, txt_respuesta, codigo_error  from sacar.erp_cuenta_txt t1, sacar.sac_usuario u  where id_usuario in (  select usuario_id   from sacar.cce_cuenta  )  and not exists (  select 1  from sacar.erp_cuenta_txt t2  where t1.id_usuario = t2.id_usuario  and txt_respuesta is not null  )  and t1.id_usuario = u.usuario_id  ",2
"MO - Consistencia - Pagos que figuran como PS pero no lo son","MO - Consistencia - Pagos que figuran como PS pero no lo son","select id_movimiento, id_usuario, tipo_cuenta_corriente, to_char(fecha_movimiento,'dd/mm/yyyy') || ' ' || hora_movimiento fecha,          detalle_movimiento, tipo_comprobante, subtipo_comprobante, numero_comprobante, importe_movimiento, to_char(fecha_recepcion,'dd/mm/yyyy') fecha_recepcion,          txt_respuesta, id_transaccion  from sacar.erp_movimiento  where tipo_cuenta_corriente = 'PS'  and tipo_comprobante = 'C'  and detalle_movimiento not like '%PAGO DINERO MAIL%'  and detalle_movimiento not like '%Pago DINEROMAIL%'  ",2
"MO - Consistencia - Cargos sin respuesta de Presea","MO - Consistencia - Cargos sin respuesta de Presea","SELECT /*+ NO_CPU_COSTING */ id_usuario,          numero_cargo,          TO_CHAR(fecha_cargo, 'dd-mm-yyyy') fecha_cargo,          descripcion,          codigo_aviso,          apodo_comprador,          moneda,          precio_final,          numero_lote_cargo,          tipo_lote,          TO_CHAR(fecha_cierre_lote, 'dd-mm-yyyy') fecha_cierre_lote,          id_movimiento,          txt_envio,          txt_respuesta     FROM sacar.erp_cargo    WHERE txt_respuesta IS NULL      AND fecha_envio > TO_DATE('19-03-2009', 'dd-mm-yyyy')",2
"MO - Consistencia - Pagos sin respuesta de Presea","MO - Consistencia - Pagos sin respuesta de Presea","select id, id_usuario, id_transaccion, tipo_cuenta, medio_pago,  to_char(fecha_pago,'dd-mm-yyyy') fecha_pago,          importe_pago, moneda, codigo_gateway, codigo_autorizacion, codigo_cupon,            to_char(fecha_envio,'dd-mm-yyyy') fecha_envio, txt_envio, txt_respuesta  from sacar.ERP_PAGOS_ON  where txt_respuesta is null  and fecha_envio > to_date('19-03-2009','dd-mm-yyyy')  ",2
"MO - Consistencia - Cargos con lote inconsistente ","MO - Consistencia - Cargos con lote inconsistente ","SELECT /*+ NO_CPU_COSTING */ ID,          tipo_cargo_id, cuenta_id, lote_id, monto, estado,          origen, destino, transaccion_id, aviso_id, aviso_titulo,          aviso_precio, aviso_moneda, aviso_cantidad, aviso_origen,          TO_CHAR(generacion, 'dd-mm-yyyy') generacion,          TO_CHAR(actualizacion, 'dd-mm-yyyy') actualizacion     FROM sacar.cce_cargo c1    WHERE estado = 'EN_LOTE'      AND lote_id IS NULL   UNION   SELECT ID,          tipo_cargo_id, cuenta_id, lote_id, monto,          estado, origen, destino, transaccion_id,          aviso_id, aviso_titulo, aviso_precio,          aviso_moneda, aviso_cantidad, aviso_origen,          TO_CHAR(generacion, 'dd-mm-yyyy') generacion,          TO_CHAR(actualizacion, 'dd-mm-yyyy') actualizacion     FROM sacar.cce_cargo c2    WHERE estado = 'EN_LOTE'      AND NOT EXISTS (SELECT 1                        FROM sacar.erp_cargo ec                       WHERE c2.ID = ec.numero_cargo)",2
"MO - Reporting - Usuarios sin compras","MO - Reporting - Usuarios sin compras","select u.usuario_id, usu_apodo, usu_nombre, usu_apellido, usu_email, to_char(usu_fecha_ingreso,'dd-mm-yyyy') ingreso  from sacar.sac_usuario u, sacar.sac_usuario_registro ur  where u.usuario_id = ur.usuario_id  and usu_fecha_ingreso >= trunc($P{MO_reporting_filtro_fecha_desde_DATE})  and usu_fecha_ingreso <= trunc($P{MO_reporting_filtro_fecha_hasta_DATE})  and estado_registro_id = 2  and tius_id in (1,2)  and not exists (      select 1      from sacar.crm_suspension_usuario s      where tipo_suspension <> 'LEVE'      and s.usuario_id = u.usuario_id  )  and not exists (      select 1      from sacar.sac_movimiento m      where m.usuario_id = u.usuario_id  )",2
"MO - Moderacion - Reporte de moderacion por usuario","MO - Moderacion - Reporte de moderacion por usuario","select a.av_usuario_aprobacion, count(*) cantidad_moderada,           (sum(nvl2(more_id,1,0))/count(*))*100 porcentaje_rechazo   from sacar.sac_aviso a  where a.av_moderado = 'S'  and trunc(a.av_fecha_aprobacion) >= $P{MO_reporting_filtro_fecha_desde_DATE} and trunc(a.av_fecha_aprobacion) <= $P{MO_reporting_filtro_fecha_hasta_DATE}  AND (  $P{MO_reporting_filtro_usuario_intranet} = 'Ingresar usuario'  or $P{MO_reporting_filtro_usuario_intranet} = a.av_usuario_aprobacion  )  group by a.av_usuario_aprobacion  ",2
"MO - Moderacion - Reporte de moderacion por aviso","MO - Moderacion - Reporte de moderacion por aviso","select av_id avisoId, av_usuario_aprobacion usuario, to_char(av_fecha_aprobacion,'YYYY/MM/DD hh24:mi:ss') fecha, av_estado estadoId, es_descripcion estadoDescripcion, more_titulo motivoRechazo  from sacar.sac_aviso a, sacar.sac_motivo_rechazo mr, sacar.sac_estado e    where av_moderado = 'S'  and a.more_id = mr.MORE_ID(+)  and a.av_estado = e.es_id  and trunc(a.av_fecha_aprobacion) >= $P{MO_reporting_filtro_fecha_desde_DATE} AND trunc(a.av_fecha_aprobacion) <= $P{MO_reporting_filtro_fecha_hasta_DATE}  and (       $P{MO_reporting_filtro_aviso_id} = 0 or      $P{MO_reporting_filtro_aviso_id} = a.av_id   )  ",2
"MO - MENSUAL GMS","MO - MENSUAL GMS","select bsq.l1 as ID_CATEGORIA  ,cat.CATE_DESCRIPCION as DESCRIPCION  ,a.av_moneda as MONEDA  ,sum(ca.aviso_cantidad) as CANTIDAD  ,sum(ca.aviso_precio*ca.aviso_cantidad) as GMS  from sacar.bsq_agrupador_categoria bsq, sacar.sac_categoria cat  ,REPORTE_SACAR_AVISO a, sacar.cce_cargo ca  where 0=0  and bsq.l1 = cat.CATE_ID  and bsq.CATEGORIA_ID = a.cate_id  and ca.AVISO_ID = a.AV_ID  and ca.TIPO_CARGO_ID = 1  and trunc(ca.GENERACION) >= $P{MO_reporting_filtro_fecha_desde_DATE}  and trunc(ca.GENERACION) <= $P{MO_reporting_filtro_fecha_hasta_DATE}  group by bsq.l1, cat.CATE_DESCRIPCION, a.av_moneda  order by id_categoria asc",2
"MO - Reporting - Movimientos en la cuenta de un usuario","MO - Reporting - Movimientos en la cuenta de un usuario","select id_movimiento, id_usuario, tipo_cuenta_corriente, to_char(fecha_movimiento,'YYYY/MM/DD') || ' ' || hora_movimiento as fecha_movimiento,          tipo_movimiento, detalle_movimiento, tipo_comprobante, numero_comprobante, importe_movimiento, file_name_pdf, to_char(fecha_recepcion,'YYYY/MM/DD hh24:mi:ss') fecha_recepcion, subtipo_comprobante,          txt_respuesta, id_transaccion, medio_pago, lotes_id, to_char(fecha_vencimiento, 'YYYY/MM/DD') vencimiento   from sacar.erp_movimiento  where   ( id_usuario = $P{MO_reporting_filtro_usuario_id} or 0 = $P{MO_reporting_filtro_usuario_id} )  and   ( id_usuario in ( select usuario_id from sacar.sac_usuario where usu_apodo = $P{MO_reporting_filtro_apodo} )       or $P{MO_reporting_filtro_apodo} = 'Ingresar apodo'  )  and   fecha_movimiento >= $P{MO_reporting_filtro_fecha_desde_DATE}  and   fecha_movimiento <= $P{MO_reporting_filtro_fecha_hasta_DATE}",2
"MO - Reporting - Saldos","MO - Reporting - Saldos","select sum(importe_movimiento) as saldo  from sacar.erp_movimiento  where   ( id_usuario = $P{MO_reporting_filtro_usuario_id} or 0 = $P{MO_reporting_filtro_usuario_id} )  and   ( id_usuario in ( select usuario_id from sacar.sac_usuario where usu_apodo = $P{MO_reporting_filtro_apodo} )       or $P{MO_reporting_filtro_apodo} = 'Ingresar apodo'  )",2
"MO - Consistencia - Movimientos duplicados en cuenta","MO - Consistencia - Movimientos duplicados en cuenta","select mov.id_movimiento, mov.id_usuario, mov.tipo_cuenta_corriente, to_char(mov.fecha_movimiento,'YYYY/MM/DD') fecha_movimiento, mov.hora_movimiento,           mov.tipo_movimiento, mov.detalle_movimiento, mov.tipo_comprobante, mov.numero_comprobante, mov.importe_movimiento,          mov.file_name_pdf, to_char(mov.fecha_recepcion,'YYYY/MM/DD') fecha_recepcion, mov.subtipo_comprobante, mov.txt_respuesta, mov.id_transaccion,           mov.medio_pago, lotes_id,           to_char(mov.fecha_vencimiento,'YYYY/MM/DD') fecha_vencimiento  from sacar.erp_movimiento mov, (  select tipo_comprobante, subtipo_comprobante, numero_comprobante  from sacar.erp_movimiento  group by tipo_comprobante, subtipo_comprobante, numero_comprobante  having count(*) > 1 ) temp  where mov.tipo_comprobante = temp.tipo_comprobante  and mov.subtipo_comprobante = temp.subtipo_comprobante  and mov.numero_comprobante = temp.numero_comprobante  order by mov.id_usuario, mov.tipo_comprobante, mov.subtipo_comprobante, mov.numero_comprobante",2
"MO - Reporting - Pagos de NPS ","MO - Reporting - Pagos de NPS ","select  u.usuario_id, u.usu_apodo,           p.id folio, p.monto, p.estado, p.origen, p.mp_id, p.nps_id,           p.nps_pago_nps_id, to_char(p.nps_fecha,'YYYY/MM/DD') nps_fecha, p.nps_codigo, p.nps_mensaje, p.nps_codigo_tarjeta,           p.nps_nro_cupon, p.nps_codigo_autorizacion, p.nps_terminal_interno_id, p.nps_email, p.nps_nombre_apellido,          p.estado_envio, to_char(p.fecha_envio,'YYYY/MM/DD') fecha_envio,           to_char(p.generacion,'YYYY/MM/DD') generacion, to_char(p.actualizacion,'YYYY/MM/DD') actualizacion  from sacar.cce_pago_nps p, sacar.cce_cuenta c, sacar.sac_usuario u  where p.cuenta_id = c.id  and c.usuario_id = u.usuario_id  and ( p.id = $P{MO_reporting_filtro_folio} OR $P{MO_reporting_filtro_folio} = 0 )  and ( u.usuario_id = $P{MO_reporting_filtro_usuario_id} OR $P{MO_reporting_filtro_usuario_id} = 0 )  and ( u.usu_apodo = $P{MO_reporting_filtro_apodo} OR $P{MO_reporting_filtro_apodo} = 'Ingresar apodo' )  and   p.generacion >= $P{MO_reporting_filtro_fecha_desde_DATE}  and   p.generacion <= $P{MO_reporting_filtro_fecha_hasta_DATE}",2
"MO - Reporting - Pagos de DM","MO - Reporting - Pagos de DM","select  u.usuario_id, u.usu_apodo,           p.id, p.monto, p.estado, to_char(p.dm_fecha,'YYYY/MM/DD') dm_fecha, p.dm_estado, p.dm_monto, p.dm_montoneto,           p.dm_email, p.dm_direccion, p.dm_comentario, p.dm_metodopago, p.dm_moneda,  p.ESTADO_ENVIO,          to_char(p.fecha_envio,'YYYY/MM/DD') fecha_envio,          to_char(p.generacion,'YYYY/MM/DD') generacion, to_char(p.actualizacion,'YYYY/MM/DD') actualizacion  from sacar.cce_pago_dm p, sacar.cce_cuenta c, sacar.sac_usuario u  where p.cuenta_id = c.id  and c.usuario_id = u.usuario_id  and ( p.id = $P{MO_reporting_filtro_pago_id} OR $P{MO_reporting_filtro_pago_id} = 0 )  and ( u.usuario_id = $P{MO_reporting_filtro_usuario_id} OR $P{MO_reporting_filtro_usuario_id} = 0 )  and ( u.usu_apodo = $P{MO_reporting_filtro_apodo} OR $P{MO_reporting_filtro_apodo} = 'Ingresar apodo' )  and   p.generacion >= $P{MO_reporting_filtro_fecha_desde_DATE}  and   p.generacion <= $P{MO_reporting_filtro_fecha_hasta_DATE}",2
"MO - Reporting - Pagos de PS","MO - Reporting - Pagos de PS","select  u.usuario_id, u.usu_apodo,           p.id, p.monto, p.ESTADO_ENVIO,          to_char(p.fecha_envio,'YYYY/MM/DD') fecha_envio,          to_char(p.generacion,'YYYY/MM/DD') generacion, to_char(p.actualizacion,'YYYY/MM/DD') actualizacion,          p.cargo_id  from sacar.cce_pago_ps p, sacar.cce_cuenta c, sacar.sac_usuario u  where p.cuenta_id = c.id  and c.usuario_id = u.usuario_id  and ( p.id = $P{MO_reporting_filtro_pago_id} OR $P{MO_reporting_filtro_pago_id} = 0 )  and ( u.usuario_id = $P{MO_reporting_filtro_usuario_id} OR $P{MO_reporting_filtro_usuario_id} = 0 )  and ( u.usu_apodo = $P{MO_reporting_filtro_apodo} OR $P{MO_reporting_filtro_apodo} = 'Ingresar apodo' )",2
"MO - Facturacion - Detalle","MO - Facturacion - Detalle","select usu_id, apodo,tipo_cliente, email, nombre,apellido, cod, tel, cod2,tel2,localidad,provincia,inhabilitada, fecha_inhabilitacion,          suspension,saldo_min_total,saldo_min_filtrado,cant_inhabilitaciones,prox_inhabilitacion    from  (   SELECT cc.id as cuentaId,su.usuario_id as usu_id,su.usu_apodo AS apodo, cc.tipo_cliente_codigo as tipo_cliente,         su.usu_email AS email, su.usu_nombre AS nombre,         su.usu_apellido AS apellido, su.usu_cod_area_tel AS cod,         su.usu_telefono AS tel,         sur.usu_cod_area_tel2 AS cod2,         sur.usu_telefono2 AS tel2,         su.usu_localidad AS localidad,         (select prv_nombre from sacar.sac_provincias p where p.prv_id=su.prv_id)  AS provincia,         DECODE (cc.estado, 'HABILITADA', 'NO', 'SI') AS inhabilitada,         TO_CHAR (DECODE (cc.estado_fecha, '', '---', cc.estado_fecha)                 ) AS fecha_inhabilitacion,                 --si el usuario esta suspendido muestro el nivel de su suspension         (CASE (su.usu_suspendido)             WHEN 'S'                THEN (                    SELECT max(tipo_suspension)                    FROM sacar.crm_suspension_usuario                   WHERE usuario_id = su.usuario_id AND activa = 'Y'                )             ELSE '---'          END         ) AS suspension,         (SELECT SUM (importe_movimiento)            FROM sacar.erp_movimiento em           WHERE em.id_usuario = su.usuario_id) AS saldo_min_total,           (SELECT SUM (importe_movimiento)            FROM sacar.erp_movimiento em           WHERE em.id_usuario = su.usuario_id           and EM.fecha_movimiento BETWEEN TRUNC($P{GC_filtro_fecha_desde_DATE_PROD}) AND TRUNC($P{GC_filtro_fecha_hasta_DATE_PROD})            ) AS saldo_min_filtrado,         (SELECT COUNT (*)            FROM sacar.cce_estado_cuenta           WHERE cuenta_id = cc.ID             AND estado = 'INHABILITADA') AS cant_inhabilitaciones,                --obtenemos la fecha de la proxima inhabilitacion del usuario         TO_CHAR((SELECT fecha_vencimiento + 7 AS fecha            FROM (                  --filtro los registros por usuario donde subpartial - saldo minimo >=0 (luego el primer registros de estos sera la factura pendiente mas vieja)                  SELECT id_usuario, fecha_movimiento, hora_movimiento,                         fecha_vencimiento, importe,                         RANK () OVER (PARTITION BY id_usuario ORDER BY id_usuario,                          fecha_movimiento DESC,                          hora_movimiento DESC) puesto                    FROM (                          --obtengo los importes del usuario ordenados por fecha con una columna nueva que es la suma del importe actual + importe registro anterior                          SELECT   id_usuario, fecha_movimiento,                                   hora_movimiento,                                   SUM (importe_movimiento) AS importe,                                   fecha_vencimiento,                                   SUM (SUM (importe_movimiento)) OVER (PARTITION BY id_usuario ORDER BY id_usuario,                                    fecha_movimiento DESC,                                    hora_movimiento DESC ROWS UNBOUNDED PRECEDING)                                                                  AS subpartial                              FROM sacar.erp_movimiento                             WHERE tipo_comprobante = 'F'                               AND (   subtipo_comprobante = 'FCA'                                    OR subtipo_comprobante = 'FCB'                                    OR subtipo_comprobante = 'MIG'                                   )                          GROUP BY id_usuario,                                   fecha_movimiento,                                   hora_movimiento,                                   fecha_vencimiento                          ORDER BY id_usuario,                                   fecha_movimiento DESC,                                   hora_movimient...",2
"MO - Cargos - Detalle","MO - Cargos - Detalle","select d2.usuario_id, SU.USU_APODO, d2.tipo_suspension, d2.descripcion_suspension, d2.tipo_cliente,  (select tc1.deuda_motivo from sacar.cce_tipo_cargo tc1                    where id = d2.tipo_cargo_id) as tipo_cargo  , d2.estado, d2.origen,  d2.destino, d2.unidades_vendidas, d2.total_monto    from (  SELECT d1.*, (SELECT max(s1.tipo_suspension)                  FROM sacar.crm_suspension_usuario s1                 WHERE s1.usuario_id = d1.usuario_id                 and S1.ACTIVA = 'Y'                 ) AS tipo_suspension,         (SELECT max(r.descripcion)            FROM sacar.crm_suspension_usuario s2,                 sacar.crm_regla r           WHERE s2.regla_id = r.ID            AND s2.usuario_id = d1.usuario_id           and S2.ACTIVA = 'Y'           )AS descripcion_suspension    FROM (SELECT   (SELECT usuario_id                      FROM sacar.cce_cuenta cu1                     WHERE cu1.ID = ca.cuenta_id) AS usuario_id,                   DECODE ((SELECT tipo_cliente_codigo                              FROM sacar.cce_cuenta cu1                             WHERE cu1.ID = ca.cuenta_id),                           'BROKER', 'GV',                           'WEB'                          ) AS tipo_cliente,                   ca.cuenta_id,                    CA.TIPO_CARGO_ID                   , ca.estado, decode(ca.origen,'COMPRA_INMEDIATA_SMS','SMS',DECODE (ca.origen, 'INTRANET', 'INTRANET', 'WEB')) as origen,                   ca.destino,                    decode(CA.TIPO_CARGO_ID,1,sum(CA.AVISO_CANTIDAD),0) as unidades_vendidas,                    sum(CA.MONTO) total_monto              FROM sacar.cce_cargo ca             --exceptuo los cargos enlotados con lote facturado          WHERE    NVL (ca.lote_id, -1) NOT IN (SELECT ID                                                  FROM sacar.cce_lote                                                 WHERE estado = 'FACTURADO')  and DECODE ($P{GC_filtro_tipo_fecha_PROD},                           'Fecha generacion', TRUNC (ca.generacion),                           TRUNC (ca.actualizacion)                          ) BETWEEN trunc($P{GC_filtro_fecha_desde_DATE_PROD}) and trunc($P{GC_filtro_fecha_hasta_DATE_PROD})                                                         GROUP BY ca.cuenta_id,                   ca.tipo_cargo_id,                   ca.estado,                   ca.origen,                   ca.destino          ORDER BY usuario_id DESC) d1    )d2, sacar.sac_usuario su  where d2.usuario_id = SU.USUARIO_ID  and (0=decode($P{GC_filtro_apodo_PROD},'Ingresar Apodo',0,1) or SU.USU_APODO=$P{GC_filtro_apodo_PROD})  and (0=decode($P{GC_filtro_id_usuario_PROD},0,0,1) or SU.USUARIO_ID = $P{GC_filtro_id_usuario_PROD})  and (0=decode($P{GC_filtro_mail_PROD},'Ingresar Mail',0,1) or SU.USU_email = $P{GC_filtro_mail_PROD})  and (0=decode($P{GC_filtro_tipo_cargo_PROD},-1,0,1) or d2.tipo_cargo_id = $P{GC_filtro_tipo_cargo_PROD})  and (0=decode($P{GC_filtro_suspendido_PROD},'Indistinto',0,1) or SU.USU_SUSPENDIDO=$P{GC_filtro_suspendido_PROD})",2
"MO - Reporting - Movimientos de un aviso","MO - Reporting - Movimientos de un aviso","select esav_id, esav_estado, esav_creado_por, to_char(esav_fecha_creacion, 'YYYY/MM/DD hh24:mi:ss') generacion, av_id, esav_usuario_id  from sacar.sac_estado_aviso  where av_id = $P{MO_reporting_filtro_aviso_id}  ",2
"DESA MO - Cargos - Resumen - BACK","DESA MO - Cargos - Resumen - BACK","SELECT   (deuda_motivo           ) AS tipo_cargo,           estado, tipo_cliente, origen, SUM (monto) AS monto,           COUNT (*) AS cantidad_cargos      FROM (SELECT tc.deuda_motivo, ca.estado,                   DECODE (cu.tipo_cliente_codigo,                           'BROKER', 'GV',                           'WEB'                          ) AS tipo_cliente,                   DECODE (ca.origen,                           'COMPRA_INMEDIATA_SMS', 'SMS',                           DECODE (ca.origen, 'INTRANET', 'INTRANET', 'WEB')                          ) AS origen,                   ca.monto, (SELECT cl1.estado                                FROM sacar.cce_lote cl1                               WHERE ca.lote_id = cl1.ID) AS estado_lote              FROM sacar.cce_cargo ca, sacar.cce_tipo_cargo tc, sacar.cce_cuenta cu             WHERE ca.tipo_cargo_id = tc.ID               AND ca.cuenta_id = cu.ID               AND DECODE ($P{GC_filtro_tipo_fecha_PROD},                           'Fecha generacion', TRUNC (ca.generacion),                           TRUNC (ca.actualizacion)                          ) BETWEEN trunc($P{GC_filtro_fecha_desde_DATE_PROD}) AND trunc($P{GC_filtro_fecha_hasta_DATE_PROD})              AND cu.tipo_cliente_codigo IN (                      SELECT val                        FROM (                              --la columna ind es el valor del parametro y val lo que representa                              SELECT 'Indistinto' AS ind, 'FIDEDIGNO' AS val                                FROM DUAL                              UNION                              SELECT 'Indistinto' AS ind, 'PARTICULAR' AS val                                FROM DUAL                              UNION                              SELECT 'Indistinto' AS ind, 'BROKER' AS val                                FROM DUAL                              UNION                              SELECT 'Indistinto' AS ind, 'CERTIFICADO' AS val                                FROM DUAL                              UNION                              SELECT 'Web' AS ind, 'FIDEDIGNO' AS val                                FROM DUAL                              UNION                              SELECT 'Web' AS ind, 'PARTICULAR' AS val                                FROM DUAL                              UNION                              SELECT 'Web' AS ind, 'CERTIFICADO' AS val                                FROM DUAL                              UNION                              SELECT 'Broker' AS ind, 'BROKER' AS val                                FROM DUAL)                       WHERE ind = $P{GC_filtro_tipo_usuario_PROD})              AND (0=decode($P{GC_filtro_tipo_cargo_PROD},-1,0,1) or CA.TIPO_CARGO_ID= $P{GC_filtro_tipo_cargo_PROD})              and CA.ESTADO in ($P!{GC_filtro_estado_cargo_PROD})              AND (   0 = DECODE ($P{GC_filtro_origen_PROD}, 'Indistinto', 0, 1)                    OR ca.origen IN (                          SELECT orig                            FROM (SELECT 'COMPRA_INMEDIATA_CARGADOR' AS orig,                                         'WEB' AS agrupado                                    FROM DUAL                                  UNION                                  SELECT 'SUBASTA_WEB' AS orig,                                         'WEB' AS agrupado                                    FROM DUAL                                  UNION                                  SELECT 'INTRANET' AS orig,                                         'INTRANET' AS agrupado                                    FROM DUAL                                  UNION                                  SELECT 'COMPRA_INMEDIATA_SMS' AS orig,                                         'SMS' AS agrupado                                    FROM DUAL                                  UNION                                  SELECT 'COMPRA_INMEDIATA_WEB' AS orig,                                         'WEB' AS agrupado                                    FROM DUAL    ...",2
"MO - Facturacion - Resumen","MO - Facturacion - Resumen","SELECT   tipo_cargo, tipo_cliente, origen, round(SUM(monto),2) AS monto      FROM ((  -- linea agregada el 6.10.2010 - junto con un order by mas abajo  SELECT   tipo_cargo, tipo_cliente, origen, round(SUM(monto),2) AS monto FROM (  SELECT   t.deuda_motivo AS tipo_cargo,                      DECODE (cu.tipo_cliente_codigo,                              'BROKER', 'GV',                              'WEB'                             ) AS tipo_cliente,                      DECODE (c.origen,                              'COMPRA_INMEDIATA_SMS', 'SMS',                              DECODE (c.origen, 'INTRANET', 'INTRANET', 'WEB')                             ) AS origen,                      SUM (c.monto) AS monto                 FROM SACAR.cce_cargo c, SACAR.cce_cuenta cu, SACAR.cce_tipo_cargo t, SACAR.cce_lote cl, SACAR.erp_movimiento em, SACAR.sac_usuario su                WHERE c.cuenta_id = cu.ID AND c.tipo_cargo_id = t.ID                and (0 = DECODE($P{GC_filtro_tipo_cargo_PROD},-1,0,1) OR C.TIPO_CARGO_ID = $P{GC_filtro_tipo_cargo_PROD})                --and C.ORIGEN in ($P!{GC_filtro_origen_PROD})                and (0=DECODE($P{GC_filtro_origen_PROD},'Indistinto',0,1) or                C.ORIGEN in(              SELECT orig                FROM (SELECT 'COMPRA_INMEDIATA_CARGADOR' AS orig,'WEB' AS agrupado                        FROM DUAL                      UNION                      SELECT 'SUBASTA_WEB' AS orig, 'WEB' AS agrupado                        FROM DUAL                      UNION                      SELECT 'INTRANET' AS orig, 'INTRANET' AS agrupado                        FROM DUAL                      UNION                      SELECT 'COMPRA_INMEDIATA_SMS' AS orig, 'SMS' AS agrupado                        FROM DUAL                      UNION                      SELECT 'COMPRA_INMEDIATA_WEB' AS orig, 'WEB' AS agrupado                        FROM DUAL                      UNION                      SELECT 'CARGADOR' AS orig, 'WEB' AS agrupado                        FROM DUAL)               WHERE agrupado in($P{GC_filtro_origen_PROD})))                and C.LOTE_ID is not null and C.ESTADO = 'EN_LOTE' and CL.ID = C.LOTE_ID and CL.ESTADO = 'FACTURADO'                and CL.CODIGO_FACTURA = EM.NUMERO_COMPROBANTE and CL.TIPO_COMPROBANTE = EM.SUBTIPO_COMPROBANTE                and (trunc(EM.FECHA_MOVIMIENTO) between trunc($P{GC_filtro_fecha_desde_DATE_PROD}) and trunc($P{GC_filtro_fecha_hasta_DATE_PROD}))                              and (0 = DECODE($P{GC_filtro_suspendido_PROD},'Indistinto',0,1) or SU.USU_SUSPENDIDO in ($P{GC_filtro_suspendido_PROD}))                and CU.USUARIO_ID = SU.USUARIO_ID                and CU.USUARIO_ID in (                                        SELECT id_usuario                                        FROM (SELECT   id_usuario, SUM (importe_movimiento) AS saldoMinPorUsuario                                            FROM SACAR.erp_movimiento                                            GROUP BY id_usuario)                                       WHERE (0 = $P{GC_filtro_check_PROD} OR saldoMinPorUsuario BETWEEN $P{GC_filtro_saldoM_desde_PROD} AND $P{GC_filtro_saldoM_hasta_PROD})                )                --filtramos por tipo de cliente               AND cu.tipo_cliente_codigo IN (              --seleccionamos del indice el valor del parametro              SELECT val                FROM (                      --la columna ind es el valor del parametro y val lo que representa                      SELECT 'Indistinto' AS ind, 'FIDEDIGNO' AS val                        FROM DUAL                      UNION                      SELECT 'Indistinto' AS ind, 'PARTICULAR' AS val                        FROM DUAL                      UNION                      SELECT 'Indistinto' AS ind, 'BROKER' AS val                        FROM DUAL                      UNION                      SELECT 'Indistinto' AS ind, 'CERTIFICADO' AS val                        FROM DUAL                      UNION               ...",2
"MO - Consistencia - Cargos de PS","MO - Consistencia - Cargos de PS",,2
"MO - Verificacion PDF con fecha proceso de hoy","MO - Verificacion PDF con fecha proceso de hoy","select status  from sacar.erp_pdf_seq  where trunc(fecha_proc) = trunc(sysdate)",2
"MO - DIARIO Verificacion proceso Estatificador","MO - DIARIO Verificacion proceso Estatificador","SELECT count(*) as cantidad  FROM sacar_h.sac_aviso_h a WHERE a.aviso_estatificado = 'N'   AND a.av_creado_por <> 'MIGRADOR'  AND av_url_desc not like '%null'  ",2
"MO - Consistencia - Avisos en categoria no hoja","MO - Consistencia - Avisos en categoria no hoja","SELECT /*+ PARALLEL(U, 2) PARALLEL(C1, 2) */ C1.descripcion_l1,          C1.descripcion_l2, C1.descripcion_l3, u.usu_apodo,          C1.descripcion_l4, a.av_id,  a.av_titulo,          a.av_precio, a.av_moneda,  a.av_estado,          a.av_creado_por,          TO_CHAR (a.av_fecha_creacion, 'dd/mm/yyyy') fecha_creacion     FROM sacar.sac_aviso a,          sacar.bsq_agrupador_categoria C1,          sacar.sac_usuario u,          (SELECT /*+ PARALLEL(C2, 2) */ DISTINCT cate_padre_id cat             FROM sacar.sac_categoria C2) ca    WHERE ca.cat = a.cate_id      AND C1.categoria_id = a.cate_id      AND u.usuario_id = a.usuario_id      AND C1.categoria_id = ca.cat",2
"MO - Reporting - Mails enviados a un usuario ","MO - Reporting - Mails enviados a un usuario ","select m.mail_reg_id, de, para, asunto, to_char(fecha_alta,'YYYY-MM-DD hh24:mi:ss') generacion, to_char(fecha_modif,'YYYY-MM-DD hh24:mi:ss') envio  from sacar.sac_usuario u, sacar.mail_registro m  where m.usuario_id = u.usuario_id  and ( u.usu_apodo = $P{MO_reporting_filtro_apodo}      or $P{MO_reporting_filtro_apodo} = 'Ingresar apodo' )  and ( u.usu_email = $P{MO_reporting_filtro_mail}      or $P{MO_reporting_filtro_mail} = 'Ingresar mail' )  and fecha_alta between $P{MO_reporting_filtro_fecha_desde_DATE} and $P{MO_reporting_filtro_fecha_hasta_DATE}",2
"MO - Reporting - Reporte de cargos","MO - Reporting - Reporte de cargos","select u.usuario_id, u.usu_apodo, ca.id idcargo, ca.tipo_cargo_id, ca.lote_id, ca.monto, to_char(ca.generacion,'yyyy/mm/dd') generacion,          to_char(ca.actualizacion,'yyyy/mm/dd') actualizacion, ca.estado, ca.origen, ca.destino, ca.aviso_id, ca.transaccion_id,               ca.aviso_precio, ca.aviso_moneda, ca.aviso_titulo, ca.aviso_origen, ca.aviso_archivado, ca.destaque_titulo, ca.aviso_precio_pesos, comprador.usu_apodo apodoComprador,ca.AVISO_CANTIDAD  from sacar.ccE_cargo ca, sacar.ccE_cuenta cu, sacar.sac_usuario u, sacar.cal_calificacion c, sacar.sac_usuario comprador  where ca.cuenta_id = cu.id  and cu.usuario_id = u.usuario_id  and ( u.usu_apodo = $P{MO_reporting_filtro_apodo}   or $P{MO_reporting_filtro_apodo}  = 'Ingresar apodo' )  and ( u.usuario_id = $P{MO_reporting_filtro_usuario_id} or  $P{MO_reporting_filtro_usuario_id} = 0 )  and ( ca.aviso_id = $P{MO_reporting_filtro_aviso_id} or  $P{MO_reporting_filtro_aviso_id} = 0 )  and trunc(ca.generacion) >= trunc($P{MO_reporting_filtro_fecha_desde_DATE})  and trunc(ca.generacion) <= trunc($P{MO_reporting_filtro_fecha_hasta_DATE})  and ( ca.tipo_cargo_id = $P{MO_reporting_filtro_tipo_cargo}  or $P{MO_reporting_filtro_tipo_cargo} = -1)  and ca.estado in ($P!{MO_reporting_filtro_estado_cargo})  and ca.transaccion_id = c.transaccion_id(+)  and (c.origen='COMPRADOR' or 1 <> $P{MO_reporting_filtro_tipo_cargo})  and c.usuario_calificador_id = comprador.usuario_id(+)  ",2
"MO - Facturacion - Control pre facturacion","MO - Facturacion - Control pre facturacion","select ca.lote_id, cu.usuario_id, u.usu_apodo, ca.TIPO_CARGO_ID,          ca.origen,decode(u.tius_id,1,'Broker',2,'WEB') TU, round(SUM(ca.monto),2) as monto, to_char(ca.generacion,'YYYY/MM/DD') as generacion,          u.usu_suspendido as suspendido, sus.tipo_suspension  from sacar.cce_cargo ca, sacar.cce_cuenta cu, sacar.cce_lote lo, sacar.sac_usuario u LEFT OUTER JOIN sacar.crm_suspension_usuario sus ON sus.usuario_id = u.usuario_id and sus.activa = 'Y'  where 0=0  and ca.ESTADO = 'EN_LOTE'  and ca.cuenta_id = cu.id  and u.usuario_id = cu.usuario_id       and lo.id = ca.lote_id       and lo.estado = 'CERRADO'  group by ca.lote_id, cu.usuario_id, u.usu_apodo, ca.TIPO_CARGO_ID,u.tius_id, ca.origen,  to_char(ca.generacion,'YYYY/MM/DD'), sus.tipo_suspension, u.usu_suspendido  order by lote_id",2
"MO - Facturacion - Cargos confirmados no enlotados de usuarios suspendidos ","MO - Facturacion - Cargos confirmados no enlotados de usuarios suspendidos ","SELECT   c.usuario_id, u.usu_apodo,decode(u.tius_id,1,'BK',2,'WEB') TU,            s.tipo_suspension, to_char(s.generacion,'YYYY-MM-DD') as generacion_suspension, c.estado estado_cuenta,  to_char(ce.generacion,'YYYY-MM-DD') as generacion_cargo,           r.descripcion descripcion_regla, ce.monto,           tc.descripcion tipo_cargo, ce.origen      FROM sacar.cce_cuenta c,           sacar.crm_suspension_usuario s,           sacar.crm_regla r,           sacar.cce_cargo ce,           sacar.sac_usuario u,           sacar.cce_tipo_cargo tc     WHERE c.usuario_id = s.usuario_id       AND s.regla_id = r.ID       AND s.activa = 'Y'       AND s.tipo_suspension <> 'LEVE'       AND trunc(ce.actualizacion) BETWEEN $P{MO_reporting_filtro_fecha_desde_DATE}       AND $P{MO_reporting_filtro_fecha_hasta_DATE}       AND ce.estado = 'CONFIRMADO'       AND c.ID = ce.cuenta_id       AND u.usuario_id = c.usuario_id       AND tc.ID = ce.tipo_cargo_id  ORDER BY 1",2
"MO - Pago Seguro - Cantidad de avisos activos con PS","MO - Pago Seguro - Cantidad de avisos activos con PS","select count(*) as cantidad  from sacar.bsq_busqueda  where medio_pago_seguro = 'Y'",2
"MO - Pago Seguro - Operaciones - Cantidad de operaciones en cada estado en un rango de fechas","MO - Pago Seguro - Operaciones - Cantidad de operaciones en cada estado en un rango de fechas","    SELECT estado, COUNT(1) as cantidad  FROM sacar.pgs_operacion o      WHERE nvl2( o.actualizacion, o.actualizacion, o.generacion ) BETWEEN $P{MO_reporting_filtro_fecha_desde_DATE} AND $P{MO_reporting_filtro_fecha_hasta_DATE}      and o.CARGO_ID IS NOT NULL      group by estado",2
"MO - Pago Seguro - Operaciones - Detalle de operaciones de PS filtradas por estado y rango de fecha","MO - Pago Seguro - Operaciones - Detalle de operaciones de PS filtradas por estado y rango de fecha","SELECT  o.estado, o.id operacion, ctama.id idCargo,  ctama.transaccion_ID numTrx, to_char(o.GENERACION,'YYYY/MM/DD') fecha,                    o.COMPRADOR_ID compradorID, comprador.USU_APODO apodo,  comprador.USU_NOMBRE nombre,   comprador.usu_apellido apellido,  comprador.USU_EMAIL email,                       ctama.AVISO_PRECIO_PESOS * ctama.AVISO_CANTIDAD montoOperacion,  ctama.MONTO montoComision, ctama.AVISO_ID avisoID,                   vendedor.USU_APODO apodoVendedor, ctama.cuenta_ID idCuenta          FROM sacar.PGS_OPERACION o, sacar.SAC_USUARIO comprador, sacar.CCE_CARGO ctama, sacar.SAC_USUARIO vendedor          WHERE nvl2( o.actualizacion, o.actualizacion, o.generacion  ) BETWEEN $P{MO_reporting_filtro_fecha_desde_DATE} AND $P{MO_reporting_filtro_fecha_hasta_DATE}          AND o.COMPRADOR_ID = comprador.usuario_id          AND o.CARGO_ID = ctama.ID          AND o.VENDEDOR_ID = vendedor.USUARIO_ID          AND O.CARGO_ID IS NOT NULL  AND o.estado like $P{MO_reporting_filtro_estado_operacion_ps}",2
"MO - Pago Seguro - Mediacion - Cantidad de compradores que solicitaron mediacion y el vendedor no respondio","MO - Pago Seguro - Mediacion - Cantidad de compradores que solicitaron mediacion y el vendedor no respondio","SELECT COUNT(DISTINCT comprador_id) resultado 	
	FROM sacar.pgs_operacion o, sacar.pgs_mediacion m
	WHERE o.mediacion_id = m.id
	AND nvl2( m.actualizacion, m.actualizacion, m.generacion  )
	BETWEEN $P{MO_reporting_filtro_fecha_desde_DATE} AND $P{MO_reporting_filtro_fecha_hasta_DATE}
	AND m.estado = 'INICIADA'",2
"MO - Pago Seguro - Mediacion - Detalle de operaciones de compradores que solicitaron mediacion y el vendedor no respondio","MO - Pago Seguro - Mediacion - Detalle de operaciones de compradores que solicitaron mediacion y el vendedor no respondio","SELECT  o.id operacion,              ctama.ID cargoId,              ctama.transaccion_id transaccionId,              ctama.AViso_ID avisoID,              to_char(o.GENERACION,'YYYY/MM/DD') fecha_generacion_operacion,              to_char(m.GENERACION,'YYYY/MM/DD') fecha_solicitud,              o.COMPRADOR_ID compradorID,              comprador.USU_APODO apodoComprador,               comprador.USU_NOMBRE nombreComprador,               comprador.usu_apellido apellidoComprador,               comprador.USU_EMAIL emailComprador,               ctama.aviso_PRECIO_pesos * ctama.aviso_CANTIDAD montoOperacion,               ctama.MONTO montoComision,               vendedor.USU_APODO apodoVendedor,              vendedor.usuario_id vendedorId,              vendedor.usu_nombre nombreVendedor,              vendedor.usu_apellido apellidoVendedor,              vendedor.usu_email emailVendedor,               ctama.cuenta_id cuentaId  FROM sacar.pgs_operacion o, sacar.pgs_mediacion m, sacar.SAC_USUARIO comprador, sacar.cce_cargo ctama, sacar.SAC_USUARIO vendedor  WHERE o.mediacion_id = m.id  AND nvl2( m.actualizacion, m.actualizacion, m.generacion  ) BETWEEN $P{MO_reporting_filtro_fecha_desde_DATE} AND $P{MO_reporting_filtro_fecha_hasta_DATE}      AND m.estado like 'INICIADA'  AND o.COMPRADOR_ID = comprador.usuario_id  AND o.CARGO_ID = ctama.ID  AND o.VENDEDOR_ID = vendedor.USUARIO_ID",2
"MO - Pago Seguro - Solicitudes - Cantidad de pedidos pendientes de pago seguro","MO - Pago Seguro - Solicitudes - Cantidad de pedidos pendientes de pago seguro","    SELECT COUNT(*) cantidad  FROM sacar.pgs_solicitud  WHERE aprobacion = 'NO'  AND generacion BETWEEN $P{MO_reporting_filtro_fecha_desde_DATE} AND $P{MO_reporting_filtro_fecha_hasta_DATE}  AND CARGO_ID IS NOT NULL",2
"MO - Pago Seguro - Solicitudes - Detalle de pedidos pendientes de pago seguro","MO - Pago Seguro - Solicitudes - Detalle de pedidos pendientes de pago seguro","SELECT ma.id idCargo, ma.transaccion_id idtransaccion, ma.aviso_id avisoID, ma.AVISO_TITULO titulo,               comprador.usu_apodo apodoComprador, comprador.usu_email mailComprador,               vendedor.USU_APODO apodoVendedor, vendedor.USU_EMAIL mailVendedor , to_char(ps.GENERACION,'YYYY/MM/DD') fecha_pedido    FROM sacar.PGS_SOLICITUD ps,   sacar.CCE_CARGO ma,   sacar.SAC_USUARIO comprador,    sacar.SAC_USUARIO vendedor,           sacar.SAC_MOVIMIENTO m,           sacar.cce_cuenta ca  WHERE aprobacion = 'NO'  AND PS.GENERACION BETWEEN $P{MO_reporting_filtro_fecha_desde_DATE} AND $P{MO_reporting_filtro_fecha_hasta_DATE}  AND ps.CARGO_ID = ma.id      AND ca.id = ma.cuenta_id      AND m.MOV_ID = ma.transaccion_id  AND comprador.USUARIO_ID = m.USUARIO_ID  AND vendedor.USUARIO_ID = ca.USUARIO_ID",2
"MO - Pago Seguro - Solicitudes - Cantidad de pedidos aceptados de pago seguro","MO - Pago Seguro - Solicitudes - Cantidad de pedidos aceptados de pago seguro","    SELECT COUNT(*) cantidad  FROM sacar.pgs_solicitud  WHERE aprobacion = 'SI'  AND generacion BETWEEN $P{MO_reporting_filtro_fecha_desde_DATE} AND $P{MO_reporting_filtro_fecha_hasta_DATE}  AND CARGO_ID IS NOT NULL",2
"MO - Pago Seguro - Solicitudes - Detalle de pedidos aceptados de pago seguro","MO - Pago Seguro - Solicitudes - Detalle de pedidos aceptados de pago seguro","SELECT ma.id idCargo, ma.transaccion_id idtransaccion, ma.aviso_id avisoID, ma.AVISO_TITULO titulo,               comprador.usu_apodo apodoComprador, comprador.usu_email mailComprador,               vendedor.USU_APODO apodoVendedor, vendedor.USU_EMAIL mailVendedor     FROM sacar.PGS_SOLICITUD ps,   sacar.CCE_CARGO ma,   sacar.SAC_USUARIO comprador,    sacar.SAC_USUARIO vendedor,           sacar.SAC_MOVIMIENTO m,           sacar.cce_cuenta ca  WHERE aprobacion = 'SI'  AND PS.GENERACION BETWEEN $P{MO_reporting_filtro_fecha_desde_DATE} AND $P{MO_reporting_filtro_fecha_hasta_DATE}  AND ps.CARGO_ID = ma.id      AND ca.id = ma.cuenta_id      AND m.MOV_ID = ma.transaccion_id  AND comprador.USUARIO_ID = m.USUARIO_ID  AND vendedor.USUARIO_ID = ca.USUARIO_ID",2
"MO - Reporting - Usuarios no validados","MO - Reporting - Usuarios no validados","select u.usuario_id, usu_apodo, usu_nombre, usu_apellido, usu_email, to_char(usu_fecha_ingreso,'dd-mm-yyyy') ingreso  from sacar.sac_usuario u, sacar.sac_usuario_registro ur  where u.usuario_id = ur.usuario_id  and usu_fecha_ingreso >= trunc($P{MO_reporting_filtro_fecha_desde_DATE})  and usu_fecha_ingreso <= trunc($P{MO_reporting_filtro_fecha_hasta_DATE})  and estado_registro_id = 1  and tius_id in (1,2)",2
"MO - Reporting - Mails enviados por fecha y hora","MO - Reporting - Mails enviados por fecha y hora","select to_char(fecha_alta,'yyyy/mm/dd hh24') hora, e.descripcion, count(*) cantidad  from sacar.mail_registro r, sacar.mail_estados e  where 1=1  and r.mail_estado_id = e.codigo  and trunc(fecha_alta) = trunc( $P{MO_reporting_filtro_fecha_DATE} )  group by to_char(fecha_alta,'yyyy/mm/dd hh24'), e.descripcion  order by 1 desc",2
"MO - Reporting - Mails enviados por rango de fechas","MO - Reporting - Mails enviados por rango de fechas","select to_char(fecha_alta,'yyyy/mm/dd') fecha, e.descripcion, count(*) cantidad  from sacar.mail_registro r, sacar.mail_estados e  where 1=1  and r.mail_estado_id = e.codigo  and trunc(fecha_alta) >= trunc($P{MO_reporting_filtro_fecha_desde_DATE})  and trunc(fecha_alta) <= trunc($P{MO_reporting_filtro_fecha_hasta_DATE})  group by to_char(fecha_alta,'yyyy/mm/dd'), e.descripcion  order by 1 desc",2
"MO - MAILS - Mails erroneos","MO - MAILS - Mails erroneos"," select count(*) from sacar.mail_registro WHERE mail_estado_id <> 1 AND mail_estado_id <> 2;",2
"MO - Mails Enviados - Resumen","MO - Mails Enviados - Resumen","SELECT   TO_CHAR(TRUNC(MAILS_ENVIADOS_RES.Fecha_Envio)) AS Fecha_Envio,  MAILS_ENVIADOS_RES.Template AS Template,  MAX(MAILS_ENVIADOS_RES.Tipo_de_Usuario) AS Tipo_de_Usuario,  COUNT(MAILS_ENVIADOS_RES.mail_reg_id) AS Cantidad,  round(SUM(MAILS_ENVIADOS_RES.Monto_Notificado),2) AS Monto_Notificado,  round(SUM(MAILS_ENVIADOS_RES.Monto_Minimo),2) AS Monto_Minimo,  SUM(MAILS_ENVIADOS_RES.Enviado) AS Enviado,  SUM(MAILS_ENVIADOS_RES.No_Enviado) AS No_Enviado,  SUM(MAILS_ENVIADOS_RES.Clickeado) AS Clickeado,  SUM(MAILS_ENVIADOS_RES.Leido) AS Leido  FROM  (      SELECT       CCE_MAIL_MOVIMIENTO.MAIL_REG_ID,      MAX(SACAR.MAIL_REGISTRO.FECHA_ALTA) AS Fecha_Envio,      MAX(SACAR.CTA_DOMINIO.SIGNIFICADO) AS Template,      (          CASE              WHEN(INSTR(MAX(SACAR.CCE_MAIL_MOVIMIENTO.mail_template_id),'_BK_', 1, 1) != 0) THEN 'BK'              ELSE 'WEB'          END      ) AS Tipo_de_Usuario,      SUM(SACAR.CCE_MAIL_MOVIMIENTO.importe_movimiento) AS Monto_Notificado,      MAX(SACAR.CCE_MAIL_MOVIMIENTO.importe_minimo) AS Monto_Minimo,      MAX(          CASE              WHEN(SACAR.MAIL_REGISTRO.mail_estado_id = 1) THEN 0              ELSE 1          END          ) AS Enviado,      MAX(          CASE              WHEN(SACAR.MAIL_REGISTRO.mail_estado_id = 2) THEN 0              ELSE 1          END          ) AS No_Enviado,      MAX(          CASE              WHEN(SACAR.MAIL_REGISTRO.click_link LIKE 'Y') THEN 1              ELSE 0          END          ) AS Clickeado,      MAX(          CASE              WHEN(SACAR.MAIL_REGISTRO.SEE_IMAGE LIKE 'Y') THEN 1              ELSE 0          END          ) AS Leido      FROM SACAR.CCE_MAIL_MOVIMIENTO      LEFT JOIN SACAR.MAIL_REGISTRO ON SACAR.CCE_MAIL_MOVIMIENTO.MAIL_REG_ID = SACAR.MAIL_REGISTRO.MAIL_REG_ID      LEFT JOIN SACAR.CTA_DOMINIO ON SACAR.CCE_MAIL_MOVIMIENTO.MAIL_TEMPLATE_ID = SACAR.CTA_DOMINIO.ABREVIATURA     WHERE TRUNC(SACAR.MAIL_REGISTRO.FECHA_ALTA) BETWEEN TRUNC( $P{GC_filtro_fecha_desde_DATE_PROD} ) AND TRUNC( $P{GC_filtro_fecha_hasta_DATE_PROD} )      AND (0 = DECODE($P{GC_filtro_mail_enviado_PROD} ,'Indistinto',0,1) OR SACAR.MAIL_REGISTRO.mail_estado_id = DECODE( $P{GC_filtro_mail_enviado_PROD} ,'Si',2,1) )      AND (0 = DECODE($P{GC_filtro_tipo_usuario_PROD} ,'Indistinto',0,1) OR DECODE(INSTR(SACAR.CCE_MAIL_MOVIMIENTO.mail_template_id,'_BK_', 1, 1),0,'Web','Broker') LIKE $P{GC_filtro_tipo_usuario_PROD} )      AND (0 = DECODE($P{GC_filtro_mail_template_id_PROD} ,'',0,1) OR SACAR.CTA_DOMINIO.SIGNIFICADO IN ( $P!{GC_filtro_mail_template_id_PROD} ) )      GROUP BY SACAR.CCE_MAIL_MOVIMIENTO.MAIL_REG_ID  ) MAILS_ENVIADOS_RES  GROUP BY TRUNC(MAILS_ENVIADOS_RES.Fecha_Envio), MAILS_ENVIADOS_RES.Template",2
"MO - Reporting - Movimientos de un aviso archivado","MO - Reporting - Movimientos de un aviso archivado","select esav_id, esav_estado, esav_creado_por, to_char(esav_fecha_creacion, 'YYYY/MM/DD hh24:mi:ss') generacion, av_id, esav_usuario_id  from sacar_h.sac_estado_aviso_H  where av_id = $P{MO_reporting_filtro_aviso_id}  ",2
"MO - Reporting - Reporte diario de cargos cerrado","MO - Reporting - Reporte diario de cargos cerrado","select ca.tipo_cargo_id, sum(ca.monto) monto, count(*)   cantidad  from sacar.ccE_cargo ca  where trunc(ca.generacion) >= trunc($P{MO_reporting_filtro_fecha_desde_DATE})  and trunc(ca.generacion) <= trunc($P{MO_reporting_filtro_fecha_hasta_DATE})  group by ca.tipo_cargo_id",2
"MO - Facturacion - Perfiles de usuarios y rubros","MO - Facturacion - Perfiles de usuarios y rubros","select c.TIPO_CLIENTE_CODIGO, u.tipo_usu_corporativo, count(*) cantidad  from sacar.sac_usuario u, sacar.cce_cuenta c  where u.usuario_id = c.usuario_id  group by u.tipo_usu_corporativo, c.TIPO_CLIENTE_CODIGO  order by 1,2  ",2
"MO - Gestion - Usuarios en condiciones de ser inhabilitados","MO - Gestion - Usuarios en condiciones de ser inhabilitados","SELECT   U.usuario_id,           U.usu_apodo,           C.tipo_cliente_codigo      FROM   sacar.cce_cuenta C, sacar.sac_usuario U     WHERE   C.usuario_id = U.usuario_id             AND C.estado = $P{MO_reporting_filtro_estado_cuenta}             AND $P{MO_reporting_filtro_saldo_maximo} <=                   (SELECT   SUM (importe_movimiento)                      FROM   sacar.erp_movimiento                     WHERE   sacar.erp_movimiento.id_usuario = U.usuario_id                             AND ( (sacar.erp_movimiento.tipo_movimiento = 'S')                                  OR (sacar.erp_movimiento.tipo_movimiento = 'C')                                  OR (sacar.erp_movimiento.tipo_movimiento = 'D'                                      AND (TRUNC (                                              sacar.erp_movimiento.fecha_vencimiento                                           ) <=                                              TRUNC (SYSDATE - $P{MO_reporting_filtro_dias_vencimiento})))))  ORDER BY (C.tipo_cliente_codigo) ASC, (U.usuario_id) ASC",2
"MO - Gestion - Monto por el que sera inhabilitado un usuario","MO - Gestion - Monto por el que sera inhabilitado un usuario","select sum(                                case when m1.subpartial <= saldo_Minimo.monto then m1.importe_movimiento                                else (saldo_Minimo.monto - (m1.subpartial - m1.importe_movimiento)) end                              ) as monto_inhab                          from (                                select id_usuario, id_movimiento, fecha_vencimiento, fecha_movimiento,                                        hora_movimiento, tipo_movimiento, subtipo_comprobante,                                        importe_movimiento,                                        sum (importe_movimiento) over (                                                order by fecha_movimiento desc,                                                hora_movimiento desc, id_movimiento desc rows unbounded preceding                                            ) as subpartial                                from sacar.erp_movimiento,                                       (select sum(importe_movimiento) monto from sacar.erp_movimiento where id_usuario = $P{MO_reporting_filtro_usuario_id}) saldo_minimo                                where id_usuario = $P{MO_reporting_filtro_usuario_id}                                       and (erp_movimiento.subtipo_comprobante='MIG' or                                            erp_movimiento.subtipo_comprobante='FCA' or                                            erp_movimiento.subtipo_comprobante='FCB' )                                order by fecha_movimiento desc, hora_movimiento desc,id_movimiento desc                                ) m1, (select sum(importe_movimiento) monto from sacar.erp_movimiento where id_usuario = $P{MO_reporting_filtro_usuario_id}) saldo_minimo                            where (saldo_Minimo.monto - (m1.subpartial - m1.importe_movimiento) >= 0)                            and (m1.subtipo_comprobante='MIG' or                                ((m1.subtipo_comprobante='FCA' or                                  m1.subtipo_comprobante='FCB') and                               (trunc(m1.fecha_vencimiento) <= trunc(sysdate - $P{MO_reporting_filtro_dias_vencimiento}))))  ",2
"MO - Facturacion - Perfiles de usuarios y rubros detalle","MO - Facturacion - Perfiles de usuarios y rubros detalle","select u.usuario_id, u.usu_apodo, c.tipo_cliente_codigo, u.tipo_usu_corporativo, u.tius_id, u.usu_nombre, u.usu_apellido, u.usu_email   from sacar.sac_usuario u, sacar.cce_cuenta c  where u.usuario_id = c.usuario_id  and ( c.tipo_cliente_codigo = $P{MO_reporting_filtro_rubro_cliente}  or $P{MO_reporting_filtro_rubro_cliente} = 'Indistinto')  and ( u.tipo_usu_corporativo = $P{MO_reporting_filtro_tipo_us_corporativo}  or $P{MO_reporting_filtro_tipo_us_corporativo} = 'Indistinto')",2
"MO - Inhabilitaciones - Detalle","MO - Inhabilitaciones - Detalle","SELECT   TO_CHAR(sacar.cce_estado_cuenta.estado_fecha) AS Fecha_Consulta,  sacar.sac_usuario.usuario_id AS Id_Usuario_MO,  sacar.sac_usuario.usu_apodo AS Apodo,  (  CASE  WHEN(sacar.cce_cuenta.tipo_cliente_codigo = 'BROKER') THEN 'BK'  ELSE 'WEB'  END  ) AS Tipo_de_Usuario,  sacar.sac_usuario.usu_email AS Email,  suspension_activa.tipo_sus_activa AS Grado_Suspension,  mail_mov.Tipo_Inhabilitacion as Tipo_Inhabilitacion,  suspension_historico.total_suspensiones AS Q_Suspension_Historico,  mail_mov.importe_inhabilitacion AS Monto_Gestion,  (TRUNC(SYSDATE) - TRUNC(mail_mov.fecha_vencimiento)) AS D_Dias_Deuda,  mail_mov.Enviado AS Enviado,  mail_mov.Leido AS Leido,  mail_mov.Clickeado AS Clickeado,  mail_mov.No_Enviado AS No_Enviado  FROM sacar.cce_estado_cuenta  LEFT JOIN sacar.cce_cuenta ON sacar.cce_estado_cuenta.cuenta_id = sacar.cce_cuenta.id  LEFT JOIN sacar.sac_usuario ON sacar.cce_cuenta.usuario_id = sacar.sac_usuario.usuario_id  LEFT JOIN  (  SELECT sacar.crm_suspension_usuario.usuario_id,  (  CASE  WHEN (MAX(peso) = 1) THEN 'LEVE'  WHEN (MAX(peso) = 2) THEN 'MODERADA'  WHEN (MAX(peso) = 3) THEN 'GRAVE'  END  ) AS tipo_sus_activa  FROM sacar.crm_suspension_usuario  LEFT JOIN   (  SELECT 'LEVE' AS tipo_suspension, '1' AS peso FROM dual  UNION  SELECT 'MODERADA' AS tipo_suspension, '2' AS peso FROM dual  UNION  SELECT 'GRAVE' AS tipo_suspension, '3' AS peso FROM dual  ) suspension ON sacar.crm_suspension_usuario.tipo_suspension = suspension.tipo_suspension  WHERE activa LIKE 'Y'  GROUP BY sacar.crm_suspension_usuario.usuario_id  ) suspension_activa ON sacar.sac_usuario.usuario_id = suspension_activa.usuario_id  LEFT JOIN  (  SELECT COUNT(*) as total_suspensiones,  sacar.crm_suspension_usuario.usuario_id  FROM sacar.crm_suspension_usuario  GROUP BY sacar.crm_suspension_usuario.usuario_id  ) suspension_historico ON sacar.sac_usuario.usuario_id = suspension_historico.usuario_id  LEFT JOIN  (  SELECT sacar.erp_movimiento.id_usuario,  SUM(sacar.cce_mail_movimiento.importe_movimiento) AS importe_inhabilitacion,  TRUNC(sacar.mail_registro.fecha_alta) AS fecha_alta,  MAX(sacar.erp_movimiento.fecha_vencimiento) AS fecha_vencimiento,  (  CASE  WHEN(MAX(sacar.MAIL_REGISTRO.mail_estado_id) = 1) THEN 0  ELSE 1  END  ) AS Enviado,  (  CASE  WHEN(MAX(sacar.MAIL_REGISTRO.mail_estado_id) = 2) THEN 0  ELSE 1  END  ) AS No_Enviado,  (  CASE  WHEN(MAX(sacar.MAIL_REGISTRO.click_link) LIKE 'Y') THEN 1  ELSE 0  END      ) AS Clickeado,  (  CASE  WHEN(MAX(sacar.MAIL_REGISTRO.SEE_IMAGE) LIKE 'Y') THEN 1  ELSE 0  END  ) AS Leido,  (  CASE  WHEN(MAX(sacar.cce_mail_movimiento.mail_template_id) LIKE '%INHABILITACION_MANUAL%') THEN 'Manual'  ELSE 'Automatica'  END  ) AS Tipo_Inhabilitacion  FROM sacar.cce_mail_movimiento  LEFT JOIN sacar.erp_movimiento ON sacar.cce_mail_movimiento.id_movimiento = sacar.erp_movimiento.id_movimiento  LEFT JOIN sacar.mail_registro ON sacar.cce_mail_movimiento.mail_reg_id = sacar.mail_registro.mail_reg_id   WHERE (sacar.cce_mail_movimiento.mail_template_id = 'CCE_INHABILITACION_WEB_I' OR sacar.cce_mail_movimiento.mail_template_id = 'CCE_INHABILITACION_BK_I')  AND TRUNC(sacar.mail_registro.fecha_alta) BETWEEN TRUNC( $P{GC_filtro_fecha_desde_DATE_PROD} ) AND TRUNC( $P{GC_filtro_fecha_hasta_DATE_PROD} )  GROUP BY sacar.erp_movimiento.id_usuario, TRUNC(sacar.mail_registro.fecha_alta)  ) mail_mov ON sacar.cce_cuenta.usuario_id = mail_mov.id_usuario AND TRUNC(sacar.cce_estado_cuenta.estado_fecha) = mail_mov.fecha_alta  WHERE sacar.cce_estado_cuenta.estado = 'INHABILITADA'  AND (0 = DECODE($P{GC_filtro_mail_enviado_PROD} ,'Indistinto',0,1) OR Enviado = DECODE( $P{GC_filtro_mail_enviado_PROD} ,'Si',1,0) )  AND TRUNC(sacar.cce_estado_cuenta.estado_fecha) BETWEEN TRUNC( $P{GC_filtro_fecha_desde_DATE_PROD} ) AND TRUNC( $P{GC_filtro_fecha_hasta_DATE_PROD} )  AND (0 = DECODE($P{GC_filtro_tipo_usuario_PROD} ,'Indistinto',0,1) OR DECODE(sacar.cce_c...",2
"MO - Cargos - Resumen","MO - Cargos - Resumen","SELECT   tipo_cargo,   estado_nombre as estado,   tipo_cliente,   origen, sum(monto) as monto,   count(*) as cantidad_cargos  FROM  (    select sb0.id,     sb0.cargo_id,    (      select       estado_nombre      from sacar.cce_estado_cargo_log cl1      where cl1.id = sb0.id    ) estado_nombre,      DECODE (CC.ORIGEN,'COMPRA_INMEDIATA_SMS', 'SMS',    DECODE (CC.ORIGEN, 'INTRANET', 'INTRANET', 'WEB')) AS origen,CC.MONTO,     DECODE (cu.tipo_cliente_codigo,'BROKER', 'GV','WEB') AS tipo_cliente,    (      SELECT       deuda_motivo      FROM sacar.cce_tipo_cargo ct      WHERE ID = CC.TIPO_CARGO_ID     ) as tipo_cargo    from     (      --obtengo los datos del historico de lso estados de los cargos segun la funcionalidad pedida      SELECT       MAX (ID) as id,       cargo_id      FROM sacar.cce_estado_cargo_log cl      WHERE TRUNC (cl.estado_fecha) BETWEEN TRUNC($P{GC_filtro_fecha_desde_DATE_PROD}) AND TRUNC($P{GC_filtro_fecha_hasta_DATE_PROD})                                                   AND       (           0 = DECODE ($P{GC_filtro_estado_cargo_combo_PROD}, 'TODOS', 0, 1)        OR (cl.estado_nombre = $P{GC_filtro_estado_cargo_combo_PROD})      )      GROUP BY cargo_id      ORDER BY cargo_id DESC    ) sb0,     sacar.cce_cargo cc,     sacar.cce_cuenta cu    where CC.ID = sb0.cargo_id    and CU.ID = CC.CUENTA_ID  ) sb1  where sb1.tipo_cliente in   (    SELECT     val    FROM     (      --la columna ind es el valor del parametro y val lo que representa      SELECT 'Indistinto' AS ind,       'WEB' AS val      FROM DUAL      UNION      SELECT       'Indistinto' AS ind,       'GV' AS val      FROM DUAL      UNION      SELECT       'Web' AS ind,       'WEB' AS val      FROM DUAL      UNION      SELECT       'Broker' AS ind,       'GV' AS val      FROM DUAL    )  WHERE ind = $P{GC_filtro_tipo_usuario_PROD})  AND (0=decode($P{GC_filtro_tipo_cargo_value_PROD},'Indistinto',0,1) or sb1.TIPO_CARGO= $P{GC_filtro_tipo_cargo_value_PROD})  AND (0=decode($P{GC_filtro_origen_values_PROD},'Indistinto',0,1) or sb1.origen= $P{GC_filtro_origen_values_PROD})  GROUP BY (sb1.tipo_cargo, sb1.estado_nombre, sb1.tipo_cliente, sb1.origen)  ORDER BY sb1.tipo_cargo",2
"MO - Reporting - Control de cargos generados","MO - Reporting - Control de cargos generados","select padre.*, hijo.calif, rep.puntaje from  (SELECT  cu.usuario_id, u.usu_apodo, u.usu_nombre, u.usu_apellido,           u.usu_email, tu.tius_descripcion, SUM (ca.monto) total, cu.estado,           u.usu_suspendido, to_char (u.usu_fecha_ingreso, 'RRRR/MM/DD') Fecha_Ingreso      FROM sacar.cce_cargo ca,           sacar.cce_tipo_cargo tc,           sacar.cce_cuenta cu,           sacar.sac_usuario u,           sacar.sac_tipo_usuario tu     WHERE ca.estado IN ( 'GENERADO', 'CONFIRMADO')            AND ca.tipo_cargo_id = tc.ID            AND (  tc.id = $P{MO_reporting_filtro_tipo_cargo} OR $P{MO_reporting_filtro_tipo_cargo} = -1 )             AND ca.cuenta_id = cu.ID            AND u.usuario_id = cu.usuario_id            AND u.tius_id = tu.tius_id            AND ( u.usu_suspendido = $P{MO_reporting_filtro_usuario_suspendido} OR $P{MO_reporting_filtro_usuario_suspendido} = 'Indistinto' )            AND ( cu.tipo_cliente_codigo = $P{MO_reporting_filtro_rubro_cliente}   OR $P{MO_reporting_filtro_rubro_cliente} = 'Indistinto'  )            AND u.USU_FECHA_ACEPTA_CONDICIONES >= $P{MO_reporting_filtro_ingreso_desde_DATE} and u.USU_FECHA_ACEPTA_CONDICIONES <= $P{MO_reporting_filtro_ingreso_hasta_DATE}    GROUP BY cu.usuario_id,           u.usu_apodo,           u.usu_nombre,           u.usu_apellido,           u.usu_email,           tu.tius_descripcion,           cu.estado,           u.usu_suspendido,           u.usu_fecha_ingreso    HAVING SUM (ca.monto) > $P{MO_reporting_filtro_minimo_generado} )padre,   (select c.usuario_calificado_id,count(1)CALIF from sacar.cal_calificacion c  where c.estado = 'CONFIRMADA'  group by c.usuario_calificado_id) hijo,  sacar.cal_reputacion rep  where 0=0  AND padre.usuario_id = hijo.usuario_calificado_id (+)  and padre.usuario_id = rep.usuario_id  and ( rep.puntaje >= $P{MO_reporting_filtro_reputacion_desde} )  and ( rep.puntaje <= $P{MO_reporting_filtro_reputacion_hasta} )  ORDER BY padre.total ASC  ",2
"MO - Reporting - Clientes en limite de credito","MO - Reporting - Clientes en limite de credito","SELECT          decode(u.tius_id,1,'Broker',2,'Web',3,'SMS') as tipo_usuario,         u.usuario_id,         u.usu_apodo,         rep.PUNTAJE,         u.usu_suspendido usuario_suspendido,         to_char(u.USU_FECHA_INGRESO,'YYYY-MM-DD') fecha_ingreso,         cuenta.tipo_cliente_codigo tipo_cliente,         cuenta.ID cuenta_id,          cuenta.estado cuenta_estado,         l.limite_credito limite_credito,               NVL ((SELECT SUM (cargo.monto)                   FROM sacar.cce_cargo cargo                  WHERE cargo.cuenta_id = cuenta.ID                    AND cargo.estado = 'CONFIRMADO'),                0               )       + NVL ((SELECT SUM (cargo.monto)                   FROM sacar.cce_cargo cargo                  WHERE cargo.cuenta_id = cuenta.ID                    AND cargo.estado = 'CONFIRMADO'),                0               ) monto_generado_confirmado,           NVL ((SELECT SUM (importe_movimiento)                   FROM sacar.erp_movimiento em                  WHERE em.id_usuario = cuenta.usuario_id),                0               )         + NVL ((SELECT SUM (lote.monto)                   FROM sacar.cce_lote lote                  WHERE lote.cuenta_id = cuenta.ID AND lote.estado = 'CERRADO'),                0               )         + NVL ((SELECT SUM (cargo.monto)                   FROM sacar.cce_cargo cargo                  WHERE cargo.cuenta_id = cuenta.ID                    AND cargo.estado = 'CONFIRMADO'),                0               )         - NVL ((SELECT SUM (pago.importe_pago)                   FROM sacar.erp_pagos_on pago                  WHERE pago.id_usuario = cuenta.usuario_id                    AND (   pago.codigo_respuesta IS NULL                         OR (    pago.codigo_respuesta IS NOT NULL                             AND pago.codigo_respuesta <> 'OK'                            )                        )),                0               ) cuenta_saldo,                NVL ((SELECT SUM (importe_movimiento)                   FROM sacar.erp_movimiento em                  WHERE em.id_usuario = cuenta.usuario_id),                0               )         + NVL ((SELECT SUM (lote.monto)                   FROM sacar.cce_lote lote                  WHERE lote.cuenta_id = cuenta.ID AND lote.estado = 'CERRADO'),                0               )         + NVL ((SELECT SUM (cargo.monto)                   FROM sacar.cce_cargo cargo                  WHERE cargo.cuenta_id = cuenta.ID                    AND cargo.estado = 'CONFIRMADO'),                0               )         - NVL ((SELECT SUM (pago.importe_pago)                   FROM sacar.erp_pagos_on pago                  WHERE pago.id_usuario = cuenta.usuario_id                    AND (   pago.codigo_respuesta IS NULL                         OR (    pago.codigo_respuesta IS NOT NULL                             AND pago.codigo_respuesta <> 'OK'                            )                        )),                0               ) - l.LIMITE_CREDITO as monto_sobre_limite,              ( select nvl(-sum(importe_movimiento),0)                   from sacar.erp_movimiento where tipo_movimiento = 'C' and tipo_movimiento = 'C'                 and id_usuario = u.usuario_id                 group by id_usuario ) +              ( SELECT nvl(sum(pago.IMPORTE_PAGO),0)                  FROM sacar.erp_pagos_on pago                 WHERE pago.id_usuario = cuenta.usuario_id                 AND (   pago.codigo_respuesta IS NULL                        OR (    pago.codigo_respuesta IS NOT NULL                                AND pago.codigo_respuesta <> 'OK'                             )                    )                  ) monto_pagos_realizados,                   ( select count(*)                  from sacar.erp_movimiento where tipo_movimiento = 'C' and tipo_movimiento = 'C'                 and id_usuario = u.usuario_id                 group by id_usuario ) +               ( SELECT count(*)                 FROM sacar.erp_pagos_on pago                 WHERE...",2
"MO - REPORTE DE CORRECCION DE CARGOS","MO - REPORTE DE CORRECCION DE CARGOS",,2
"MO - Consistencia - Cargos ENVIADOs que no figuran en ERP_MOVIMIENTO","MO - Consistencia - Cargos ENVIADOs que no figuran en ERP_MOVIMIENTO","select c.id, c.tipo_cargo_id, c.cuenta_id, c.lote_id, c.monto,   to_char(l.generacion,'yyyy-mm-dd') as generacion_lote,  to_char(c.generacion,'yyyy-mm-dd') as generacion_cargo,         to_char(c.actualizacion,'yyyy-mm-dd') as actualizacion_cargo, c.estado, c.origen, c.destino, c.lote_id,          to_char(fecha_cierre_lote,'yyyy-mm-dd') as fecha_cierre_lote, e.codigo_respuesta,          e.txt_envio, e.txt_respuesta  from sacar.cce_cargo c, sacar.erp_cargo e, sacar.cce_lote l  where c.id = e.NUMERO_CARGO  and c.lote_id = l.id  and trunc(l.generacion) >= $P{MO_reporting_filtro_fecha_desde_DATE}  and trunc(l.generacion) <= $P{MO_reporting_filtro_fecha_hasta_DATE}  and l.CODIGO_FACTURA is null  and l.estado <> 'ANULADO'  and txt_respuesta is not null  ",2
"MO - Monitoreo - Cantidad de mails pendientes de enviar","MO - Monitoreo - Cantidad de mails pendientes de enviar","select count(*) as cantidad  from sacar.mail_registro  where mail_estado_id = 1",2
"MO - Consistencia - Movimientos sin PDFs (exceptuando notas de crèdito)","MO - Consistencia - Movimientos sin PDFs (exceptuando notas de crèdito)","SELECT id_movimiento, id_usuario, tipo_cuenta_corriente, to_char(fecha_movimiento,'dd/mm/yyyy') fecha_movimiento,           tipo_movimiento, tipo_comprobante, numero_comprobante, importe_movimiento, to_char(fecha_recepcion,'dd/mm/yyyy') fecha_recepcion,          txt_respuesta, id_transaccion, medio_pago  FROM SACAR.ERP_MOVIMIENTO M  WHERE M.SUBTIPO_COMPROBANTE IN ( 'FCA', 'FCB')  AND M.NUMERO_COMPROBANTE not in ( select p.ID_FACTURA                                      from sacar.erp_pdf p                                      where p.TIPO_COMPROBANTE IN ( 'FCA', 'FCB')                                      AND M.NUMERO_COMPROBANTE = P.ID_FACTURA                                      AND M.SUBTIPO_COMPROBANTE = P.TIPO_COMPROBANTE )",2
"MO - Reporting - Suspensiones de un usuario","MO - Reporting - Suspensiones de un usuario","select s.id, to_char(s.generacion, 'yyyy/mm/dd hh24:mi:ss') fecha_suspension,          s.tipo_suspension, to_char(s.vigencia, 'yyyy/mm/dd hh24:mi:ss') fecha_expiracion,          r.descripcion regla, s.activa,          to_char(s.fecha_baja,'yyyy/mm/dd hh24:mi:ss') fecha_baja,          s.motivo_baja, s.usuario_baja_intra    from sacar.crm_suspension_usuario s, sacar.crm_regla r, sacar.sac_usuario u  where s.usuario_id = u.usuario_id  and s.regla_id = r.id  and ( $P{MO_reporting_filtro_usuario_id} = 0 or  u.usuario_id = $P{MO_reporting_filtro_usuario_id} )  and ( $P{MO_reporting_filtro_apodo} = 'Ingresar apodo' or  u.usu_apodo = $P{MO_reporting_filtro_apodo} )  ",2
"MO - Reporting - Apercibimientos","MO - Reporting - Apercibimientos","select a.id, to_char(a.generacion, 'yyyy/mm/dd hh24:mi:ss') fecha_apercibimiento,          a.tipo_apercibimiento,  to_char(a.vigencia, 'yyyy/mm/dd hh24:mi:ss') fecha_expiracion,          m.DESCRIPCION motivo_apercibimiento, a.activo,           to_char(a.fecha_baja,'yyyy/mm/dd hh24:mi:ss') fecha_baja,           a.usuario_alta_intra, a.usuario_baja_intra,          a.id_suspension suspension_generada  from sacar.crm_apercibimiento a, sacar.crm_motivo_apercibimiento m, sacar.sac_usuario u  where m.id = a.motivo_id   and a.usuario_id = u.usuario_id  and ( $P{MO_reporting_filtro_usuario_id} = 0 or  u.usuario_id = $P{MO_reporting_filtro_usuario_id} )  and ( $P{MO_reporting_filtro_apodo} = 'Ingresar apodo' or  u.usu_apodo = $P{MO_reporting_filtro_apodo} )  and ( $P{MO_reporting_filtro_suspension_id} = 0 or  a.id_suspension = $P{MO_reporting_filtro_suspension_id} )  ",2
"MO - DIARIO Verificacion Envio Mails","MO - DIARIO Verificacion Envio Mails","select count(*) as contador from sacar.mail_registro  where mail_estado_id =1",2
"MO - Verificacion de Mails Erroneos ","MO - Verificacion de Mails Erroneos ","select de, para, asunto, mail_estado_id, usuario_id, tipo, reenvios,   to_char(fecha_alta,'YYYY/MM/DD')as fechaalta, to_char(fecha_modif,'YYYY/MM/DD')as fechamodif  from sacar.mail_registro  where mail_estado_id in (3,4,5,6,7,8)",2
"MO - Verificacion Replicador HTML y Resize de Imagenes","MO - Verificacion Replicador HTML y Resize de Imagenes","select to_char(generacion,'dd-mm-yyyy') as generacion, proceso, count(*) as Cantidad  from sacar.gnr_log  where trunc(generacion) >= to_date($P{filtro_fecha},'DD/MM/RRRR')  and proceso in ('Replica HTML','Resize Imagenes')  group by to_char(generacion,'dd-mm-yyyy'), proceso  order by proceso, 1",2
"MO - Consistencia - Operaciones de PS PAGADAS hace mas de 14 días","MO - Consistencia - Operaciones de PS PAGADAS hace mas de 14 días","select id, cargo_id, comprador_id, vendedor_id, estado, to_char(generacion,'dd/mm/yyyy') generacion, to_char(actualizacion,'dd/mm/yyyy') actualizacion  from sacar.pgs_operacion  where estado = 'PAGADA'  and actualizacion < sysdate - 14  and generacion >= to_date ('01-01-2009','dd-mm-yyyy')  and mediacion_id is null",2
"MO - Monitoreo - Operaciones de PS > 500$ (Sabados y Domingos 8am)","MO - Monitoreo - Operaciones de PS > 500$ (Sabados y Domingos 8am)","select cargo.id cargo, cargo.monto, to_char(cargo.generacion,'dd/mm/yyyy hh24:mi:ss') generacion, cargo.estado, cargo.origen, cargo.aviso_id,           cargo.transaccion_id, cargo.aviso_precio, cargo.aviso_moneda, cargo.aviso_cantidad, cargo.aviso_titulo,           cargo.aviso_origen,          comprador.usuario_id comprador, comprador.usu_apodo apodo_comprador, comprador.usu_email mail_comprador,          vendedor.usuario_id vendedor, vendedor.usu_apodo apodo_vendedor, vendedor.usu_email mail_vendedor,          DECODE (vendedor.tius_id, 1, 'BK', 2, 'WEB') tuv  from sacar.pgs_operacion operacion, sacar.cce_cargo cargo,       sacar.sac_usuario comprador, sacar.sac_usuario vendedor  where operacion.cargo_id = cargo.id  and operacion.vendedor_id = vendedor.usuario_id  and operacion.comprador_id = comprador.usuario_id  AND cargo.aviso_precio_pesos >= 500  and operacion.generacion >  TO_DATE (to_char(sysdate-1,'DD/MM/RRRR')||' 16:00','DD/MM/RRRR hh24:mi')  and operacion.generacion <=  TO_DATE (to_char(sysdate,'DD/MM/RRRR')||' 08:00','DD/MM/RRRR hh24:mi')",2
"MO - Monitoreo - Operaciones de PS > 500$ (Sabados y Domingos 16pm)","MO - Monitoreo - Operaciones de PS > 500$ (Sabados y Domingos 16pm)","select cargo.id cargo, cargo.monto, to_char(cargo.generacion,'dd/mm/yyyy hh24:mi:ss') generacion, cargo.estado, cargo.origen, cargo.aviso_id,           cargo.transaccion_id, cargo.aviso_precio, cargo.aviso_moneda, cargo.aviso_cantidad, cargo.aviso_titulo,           cargo.aviso_origen,          comprador.usuario_id comprador, comprador.usu_apodo apodo_comprador, comprador.usu_email mail_comprador,          vendedor.usuario_id vendedor, vendedor.usu_apodo apodo_vendedor, vendedor.usu_email mail_vendedor,          DECODE (vendedor.tius_id, 1, 'BK', 2, 'WEB') tuv  from sacar.pgs_operacion operacion, sacar.cce_cargo cargo,       sacar.sac_usuario comprador, sacar.sac_usuario vendedor  where operacion.cargo_id = cargo.id  and operacion.vendedor_id = vendedor.usuario_id  and operacion.comprador_id = comprador.usuario_id  AND cargo.aviso_precio_pesos >= 500  and operacion.generacion >  TO_DATE (to_char(sysdate,'DD/MM/RRRR')||' 08:00','DD/MM/RRRR hh24:mi')  and operacion.generacion <=  TO_DATE (to_char(sysdate,'DD/MM/RRRR')||' 16:00','DD/MM/RRRR hh24:mi')",2
"MO - Reporting - Cantidad de preguntas y respuestas moderadas","MO - Reporting - Cantidad de preguntas y respuestas moderadas","select 'PREGUNTAS EDITADAS' as descripcion, count(*) as cantidad  from sacar.sac_pregunta_aviso  where preav_pregunta like '%<<EDITADA>>%'  UNION  select 'RESPUESTAS EDITADAS' as descripcion, count(*) as cantidad  from sacar.sac_pregunta_aviso  where preav_respuesta like '%<<EDITADA>>%'",2
"MO - Reporting - Reporte de cobros por fecha","MO - Reporting - Reporte de cobros por fecha","select u.usuario_id, u.usu_apodo, c.TIPO_CLIENTE_CODIGO, c.estado,           m.importe_movimiento, m.medio_pago, m.detalle_movimiento,           to_char(m.fecha_movimiento,'yyyy-mm-dd') as fecha_movimiento,           to_char(m.fecha_recepcion,'yyyy-mm-dd') as fecha_recepcion  from sacar.erp_movimiento m, sacar.sac_usuario u, sacar.cce_cuenta c  where m.id_usuario = u.usuario_id  and u.usuario_id = c.usuario_id   and m.tipo_movimiento = 'C'  and m.fecha_movimiento = trunc($P{MO_reporting_filtro_fecha_DATE})",2
"MO - DIARIO Verificacion del proceso Cierre de Avisos","MO - DIARIO Verificacion del proceso Cierre de Avisos","select count(*) as Cantidad  from sacar.sac_aviso  where av_estado = 3  and av_fecha_expiracion < sysdate",2
"MO - Reporting - Movimientos en la cuenta de un usuario 2","MO - Reporting - Movimientos en la cuenta de un usuario 2","select id_movimiento, id_usuario, tipo_cuenta_corriente, to_char(fecha_movimiento,'YYYY/MM/DD') || ' ' || hora_movimiento as fecha_movimiento,          tipo_movimiento, detalle_movimiento, tipo_comprobante, numero_comprobante, importe_movimiento,   (select sum(cargo.MONTO) from sacar.cce_cargo cargo where cargo.LOTE_ID = lotes_id and cargo.TIPO_CARGO_ID in (1,6) ) as comisiones,          (select sum(cargo.MONTO) from sacar.cce_cargo cargo where cargo.LOTE_ID = lotes_id and cargo.TIPO_CARGO_ID =2 ) as destaques,          (select sum(cargo.MONTO) from sacar.cce_cargo cargo where cargo.LOTE_ID = lotes_id and cargo.TIPO_CARGO_ID in (3,21) ) as bonificaciones,  file_name_pdf, to_char(fecha_recepcion,'YYYY/MM/DD hh24:mi:ss') fecha_recepcion, subtipo_comprobante,          txt_respuesta, id_transaccion, medio_pago, lotes_id, to_char(fecha_vencimiento, 'YYYY/MM/DD') vencimiento  from sacar.erp_movimiento  where   ( id_usuario = $P{MO_reporting_filtro_usuario_id} or 0 = $P{MO_reporting_filtro_usuario_id} )  and   ( id_usuario in ( select usuario_id from sacar.sac_usuario where usu_apodo = $P{MO_reporting_filtro_apodo} )       or $P{MO_reporting_filtro_apodo} = 'Ingresar apodo'  )  and   fecha_movimiento >= $P{MO_reporting_filtro_fecha_desde_DATE}  and   fecha_movimiento <= $P{MO_reporting_filtro_fecha_hasta_DATE}",2
"MO - MENSUAL GV Reputacion","MO - MENSUAL GV Reputacion",,2
"MO - MENSUAL Recluting - Cuenta de Avisos Activos","MO - MENSUAL Recluting - Cuenta de Avisos Activos","select u.usuario_id, u.usu_apodo, u.usu_nombre, u.usu_apellido, u.usu_email, u.USU_COD_AREA_TEL, u.USU_TELEFONO, u.USU_LOCALIDAD  ,DECODE (u.tius_id, 1, 'Broker', 2, 'Web') as TU  ,cu.ESTADO ,cu.CONDICION, a.AV_PRODUCTO_ESTADO  , count(a.av_id) as AVISOS, rep.PUNTAJE  from sacar.sac_usuario u, sacar.cce_cuenta cu, REPORTE_SACAR_AVISO a, sacar.cal_reputacion rep  where 0=0  and u.USUARIO_ID = cu.USUARIO_ID  and a.usuario_id = u.usuario_id  and u.usuario_id = rep.usuario_id  and a.av_estado = 3  group by u.usuario_id, u.usu_apodo, u.usu_nombre, u.usu_apellido, u.usu_email  ,u.USU_COD_AREA_TEL, u.USU_TELEFONO, u.USU_LOCALIDAD  ,u.tius_id, cu.ESTADO,cu.CONDICION, a.AV_PRODUCTO_ESTADO, a.av_estado, rep.PUNTAJE  order by usuario_id asc",2
"MO - MENSUAL Recluting - Cuenta de Avisos Historicos","MO - MENSUAL Recluting - Cuenta de Avisos Historicos","select u.usuario_id, u.usu_apodo, u.usu_nombre, u.usu_apellido, u.usu_email, u.USU_COD_AREA_TEL, u.USU_TELEFONO, u.USU_LOCALIDAD  ,DECODE (u.tius_id, 1, 'Broker', 2, 'Web') as TU, cu.ESTADO  ,cu.CONDICION, a.AV_PRODUCTO_ESTADO  ,count(a.av_id) as AVISOS, rep.PUNTAJE  from sacar.sac_usuario u, sacar.cce_cuenta cu, REPORTE_SACAR_AVISO a, sacar.cal_reputacion rep  where 0=0  and u.USUARIO_ID = cu.USUARIO_ID  and a.usuario_id = u.usuario_id  and u.usuario_id = rep.usuario_id  group by u.usuario_id, u.usu_apodo, u.usu_nombre, u.usu_apellido, u.usu_email  ,u.USU_COD_AREA_TEL, u.USU_TELEFONO, u.USU_LOCALIDAD  ,u.tius_id, cu.ESTADO,cu.CONDICION, a.AV_PRODUCTO_ESTADO, a.av_estado, rep.PUNTAJE  order by usuario_id asc",2
"MO - MENSUAL Recluting - QVentasyDestaques","MO - MENSUAL Recluting - QVentasyDestaques","select u.usuario_id, u.usu_apodo, u.usu_nombre, u.usu_apellido, u.usu_email, u.USU_COD_AREA_TEL, u.USU_TELEFONO, u.USU_LOCALIDAD  ,DECODE (u.tius_id, 1, 'Broker', 2, 'Web') as TU, cu.ESTADO,cu.CONDICION, rep.PUNTAJE  ,decode (ca.tipo_cargo_id,1,'COMISION',2,'DESTAQUE',3,'BONIFICACION')as TC,count(ca.id) as CANTIDAD, SUM(ca.monto) as TOTAL  ,SUM(ca.AVISO_PRECIO) as GMS  from sacar.sac_usuario u, sacar.cce_cuenta cu, sacar.cal_reputacion rep, sacar.cce_cargo ca  where 0=0  and u.USUARIO_ID = cu.USUARIO_ID  and u.usuario_id = rep.usuario_id  and ca.CUENTA_ID = cu.ID  and trunc(ca.GENERACION) >= $P{MO_reporting_filtro_fecha_desde_DATE}  and trunc(ca.GENERACION) <= $P{MO_reporting_filtro_fecha_hasta_DATE}  group by u.usuario_id, u.usu_apodo, u.usu_nombre, u.usu_apellido, u.usu_email  ,u.USU_COD_AREA_TEL, u.USU_TELEFONO, u.USU_LOCALIDAD  ,u.tius_id, cu.ESTADO,cu.CONDICION, rep.PUNTAJE, ca.tipo_cargo_id  order by usuario_id asc",2
"MO - MENSUAL General Q Avisos Activos-Tipo Aviso","MO - MENSUAL General Q Avisos Activos-Tipo Aviso","select u.usuario_id, u.usu_apodo, u.usu_nombre, u.usu_apellido, u.USU_COD_AREA_TEL, u.USU_TELEFONO, u.USU_EMAIL,u.usu_localidad,pr.prv_nombre, tu.TIUS_DESCRIPCION, cu.ESTADO ,a.av_producto_estado , count(a.av_id) as CANTIDAD, rep.PUNTAJE REPUTACION  from sacar.sac_usuario u, sacar.sac_tipo_usuario tu, sacar.cce_cuenta cu, REPORTE_SACAR_AVISO a  ,sacar.sac_provincias pr, sacar.cal_reputacion rep  where 0=0  and u.usuario_id = cu.USUARIO_ID  and u.TIUS_ID = tu.TIUS_ID  and u.usuario_id = a.usuario_id  and u.PRV_ID = pr.PRV_ID  and u.usuario_id = rep.USUARIO_ID  and a.av_estado = 3  group by u.usuario_id, u.usu_apodo, u.usu_nombre, u.usu_apellido, u.USU_COD_AREA_TEL  ,u.USU_TELEFONO, u.USU_EMAIL,u.usu_localidad,pr.prv_nombre   ,tu.TIUS_DESCRIPCION, cu.ESTADO, a.av_producto_estado, rep.PUNTAJE  order by u.usuario_id asc",2
"MO - MENSUAL General Q Ventas GMS","MO - MENSUAL General Q Ventas GMS","select u.usuario_id, u.usu_apodo, u.usu_nombre, u.usu_apellido, u.USU_COD_AREA_TEL,u.USU_TELEFONO, u.USU_EMAIL,u.usu_localidad,pr.prv_nombre, tu.TIUS_DESCRIPCION  ,cu.ESTADO, tc.DESCRIPCION, ca.aviso_moneda as MONEDA, count(ca.id) as Transacciones, sum(ca.aviso_cantidad * ca.aviso_precio) as GMS, rep.PUNTAJE as REPUTACION  from sacar.sac_usuario u, sacar.sac_tipo_usuario tu, sacar.cce_cuenta cu, sacar.cce_cargo ca, sacar.cce_tipo_cargo tc, sacar.sac_provincias pr, sacar.cal_reputacion rep  where 0=0  and trunc(ca.GENERACION) >= $P{MO_reporting_filtro_fecha_desde_DATE}  and trunc(ca.GENERACION) <= $P{MO_reporting_filtro_fecha_hasta_DATE}  and u.usuario_id = cu.USUARIO_ID  and u.TIUS_ID = tu.TIUS_ID  and ca.TIPO_CARGO_ID in (1)  and cu.id=ca.cuenta_id  and ca.TIPO_CARGO_ID = tc.ID  and u.PRV_ID = pr.PRV_ID  and u.usuario_id = rep.USUARIO_ID  group by u.usuario_id, u.usu_apodo, u.usu_nombre, u.usu_apellido, u.USU_COD_AREA_TEL  ,u.USU_TELEFONO, u.USU_EMAIL,u.usu_localidad,pr.prv_nombre  ,tu.TIUS_DESCRIPCION, cu.ESTADO, tc.descripcion,ca.aviso_moneda, rep.PUNTAJE  order by u.usuario_id asc",2
"MO - Inhabilitaciones - Detalle - Backup","MO - Inhabilitaciones - Detalle - Backup","SELECT   TO_CHAR(sacar.cce_estado_cuenta.estado_fecha) AS Fecha_Consulta,  sacar.sac_usuario.usuario_id AS Id_Usuario_MO,  sacar.sac_usuario.usu_apodo AS Apodo,  (  CASE  WHEN(sacar.cce_cuenta.tipo_cliente_codigo = 'BROKER') THEN 'BK'  ELSE 'WEB'  END  ) AS Tipo_de_Usuario,  sacar.sac_usuario.usu_email AS Email,  suspension_activa.tipo_sus_activa AS Grado_Suspension,  suspension_historico.total_suspensiones AS Q_Suspension_Historico,  mail_mov.importe_inhabilitacion AS Monto_Gestion,  (TRUNC(SYSDATE) - TRUNC(mail_mov.fecha_vencimiento)) AS D_Dias_Deuda,  mail_mov.Enviado AS Enviado,  mail_mov.Leido AS Leido,  mail_mov.Clickeado AS Clickeado,  mail_mov.No_Enviado AS No_Enviado  FROM sacar.cce_estado_cuenta  LEFT JOIN sacar.cce_cuenta ON sacar.cce_estado_cuenta.cuenta_id = sacar.cce_cuenta.id  LEFT JOIN sacar.sac_usuario ON sacar.cce_cuenta.usuario_id = sacar.sac_usuario.usuario_id  LEFT JOIN  (  SELECT sacar.crm_suspension_usuario.usuario_id,  (  CASE  WHEN (MAX(peso) = 1) THEN 'LEVE'  WHEN (MAX(peso) = 2) THEN 'MODERADA'  WHEN (MAX(peso) = 3) THEN 'GRAVE'  END  ) AS tipo_sus_activa  FROM sacar.crm_suspension_usuario  LEFT JOIN   (  SELECT 'LEVE' AS tipo_suspension, '1' AS peso FROM dual  UNION  SELECT 'MODERADA' AS tipo_suspension, '2' AS peso FROM dual  UNION  SELECT 'GRAVE' AS tipo_suspension, '3' AS peso FROM dual  ) suspension ON sacar.crm_suspension_usuario.tipo_suspension = suspension.tipo_suspension  WHERE activa LIKE 'Y'  GROUP BY sacar.crm_suspension_usuario.usuario_id  ) suspension_activa ON sacar.sac_usuario.usuario_id = suspension_activa.usuario_id  LEFT JOIN  (  SELECT COUNT(*) as total_suspensiones,  sacar.crm_suspension_usuario.usuario_id  FROM sacar.crm_suspension_usuario  GROUP BY sacar.crm_suspension_usuario.usuario_id  ) suspension_historico ON sacar.sac_usuario.usuario_id = suspension_historico.usuario_id  LEFT JOIN  (  SELECT sacar.erp_movimiento.id_usuario,  SUM(sacar.cce_mail_movimiento.importe_movimiento) AS importe_inhabilitacion,  TRUNC(sacar.mail_registro.fecha_alta) AS fecha_alta,  MAX(sacar.erp_movimiento.fecha_vencimiento) AS fecha_vencimiento,  (  CASE  WHEN(MAX(sacar.MAIL_REGISTRO.mail_estado_id) = 1) THEN 0  ELSE 1  END  ) AS Enviado,  (  CASE  WHEN(MAX(sacar.MAIL_REGISTRO.mail_estado_id) = 2) THEN 0  ELSE 1  END  ) AS No_Enviado,  (  CASE  WHEN(MAX(sacar.MAIL_REGISTRO.click_link) LIKE 'Y') THEN 1  ELSE 0  END      ) AS Clickeado,  (  CASE  WHEN(MAX(sacar.MAIL_REGISTRO.SEE_IMAGE) LIKE 'Y') THEN 1  ELSE 0  END  ) AS Leido  FROM sacar.cce_mail_movimiento  LEFT JOIN sacar.erp_movimiento ON sacar.cce_mail_movimiento.id_movimiento = sacar.erp_movimiento.id_movimiento  LEFT JOIN sacar.mail_registro ON sacar.cce_mail_movimiento.mail_reg_id = sacar.mail_registro.mail_reg_id   WHERE (sacar.cce_mail_movimiento.mail_template_id = 'CCE_INHABILITACION_WEB_I' OR sacar.cce_mail_movimiento.mail_template_id = 'CCE_INHABILITACION_BK_I')  AND TRUNC(sacar.mail_registro.fecha_alta) BETWEEN TRUNC( $P{GC_filtro_fecha_desde_DATE_PROD} ) AND TRUNC( $P{GC_filtro_fecha_hasta_DATE_PROD} )  GROUP BY sacar.erp_movimiento.id_usuario, TRUNC(sacar.mail_registro.fecha_alta)  ) mail_mov ON sacar.cce_cuenta.usuario_id = mail_mov.id_usuario AND TRUNC(sacar.cce_estado_cuenta.estado_fecha) = mail_mov.fecha_alta  WHERE sacar.cce_estado_cuenta.estado = 'INHABILITADA'  AND (0 = DECODE($P{GC_filtro_mail_enviado_PROD} ,'Indistinto',0,1) OR Enviado = DECODE( $P{GC_filtro_mail_enviado_PROD} ,'Si',1,0) )  AND TRUNC(sacar.cce_estado_cuenta.estado_fecha) BETWEEN TRUNC( $P{GC_filtro_fecha_desde_DATE_PROD} ) AND TRUNC( $P{GC_filtro_fecha_hasta_DATE_PROD} )  AND (0 = DECODE($P{GC_filtro_tipo_usuario_PROD} ,'Indistinto',0,1) OR DECODE(sacar.cce_cuenta.tipo_cliente_codigo,'BK', 'Broker', 'Web') LIKE $P{GC_filtro_tipo_usuario_PROD} )",2
"MO - Inhabilitaciones - Resumen","MO - Inhabilitaciones - Resumen","SELECT  TO_CHAR(TRUNC(estado_fecha)) AS Fecha_Consulta,   Tipo_de_Usuario,  COUNT(*) AS Cantidad,  SUM(importe_inhabilitacion) AS Monto_Gestion,  (TRUNC(sysdate) - TRUNC(MIN(fecha_vencimiento))) AS Q_Dias_Deuda,  SUM(Enviado) AS Enviado,  SUM(No_Enviado) AS No_Enviado,  SUM(Clickeado) AS Clickeado,  SUM(Leido) AS Leido  FROM  (  SELECT   mail_mov.importe_inhabilitacion,  mail_mov.fecha_alta,          mail_mov.fecha_vencimiento,  sacar.cce_estado_cuenta.estado_fecha,  mail_mov.Enviado,  mail_mov.Leido,  mail_mov.Clickeado,  mail_mov.No_Enviado,  (  CASE  WHEN(sacar.cce_cuenta.tipo_cliente_codigo = 'BROKER') THEN 'BK'  ELSE 'WEB'  END  ) AS Tipo_de_Usuario  FROM sacar.cce_estado_cuenta  LEFT JOIN sacar.cce_cuenta ON sacar.cce_estado_cuenta.cuenta_id = sacar.cce_cuenta.id  LEFT JOIN  (  SELECT sacar.erp_movimiento.id_usuario,  SUM(sacar.cce_mail_movimiento.importe_movimiento) AS importe_inhabilitacion,  TRUNC(sacar.mail_registro.fecha_alta) AS fecha_alta,  MAX(sacar.erp_movimiento.fecha_vencimiento) AS fecha_vencimiento,  (  CASE  WHEN(MAX(sacar.MAIL_REGISTRO.mail_estado_id) = 1) THEN 0  ELSE 1  END  ) AS Enviado,  (  CASE  WHEN(MAX(sacar.MAIL_REGISTRO.mail_estado_id) = 2) THEN 0  ELSE 1  END  ) AS No_Enviado,  (  CASE  WHEN(MAX(sacar.MAIL_REGISTRO.click_link) LIKE 'Y') THEN 1  ELSE 0  END      ) AS Clickeado,  (  CASE  WHEN(MAX(sacar.MAIL_REGISTRO.SEE_IMAGE) LIKE 'Y') THEN 1  ELSE 0  END      ) AS Leido  FROM sacar.cce_mail_movimiento  LEFT JOIN sacar.erp_movimiento ON sacar.cce_mail_movimiento.id_movimiento = sacar.erp_movimiento.id_movimiento  LEFT JOIN sacar.mail_registro ON sacar.cce_mail_movimiento.mail_reg_id = sacar.mail_registro.mail_reg_id   WHERE (sacar.cce_mail_movimiento.mail_template_id = 'CCE_INHABILITACION_WEB_I' OR sacar.cce_mail_movimiento.mail_template_id = 'CCE_INHABILITACION_BK_I')  AND TRUNC(sacar.mail_registro.fecha_alta) BETWEEN TRUNC( $P{GC_filtro_fecha_desde_DATE_PROD} ) AND TRUNC( $P{GC_filtro_fecha_hasta_DATE_PROD} )  GROUP BY sacar.erp_movimiento.id_usuario, TRUNC(sacar.mail_registro.fecha_alta)  ) mail_mov ON sacar.cce_cuenta.usuario_id = mail_mov.id_usuario AND TRUNC(sacar.cce_estado_cuenta.estado_fecha) = mail_mov.fecha_alta  WHERE sacar.cce_estado_cuenta.estado = 'INHABILITADA'  AND (0 = DECODE($P{GC_filtro_mail_enviado_PROD} ,'Indistinto',0,1) OR Enviado = DECODE( $P{GC_filtro_mail_enviado_PROD} ,'Si',1,0) )  AND TRUNC(sacar.cce_estado_cuenta.estado_fecha) BETWEEN TRUNC( $P{GC_filtro_fecha_desde_DATE_PROD} ) AND TRUNC( $P{GC_filtro_fecha_hasta_DATE_PROD} )  )  WHERE (0 = DECODE($P{GC_filtro_tipo_usuario_PROD} ,'Indistinto',0,1) OR DECODE(Tipo_de_Usuario,'BK', 'Broker', 'Web') LIKE $P{GC_filtro_tipo_usuario_PROD} )  GROUP BY TRUNC(estado_fecha), Tipo_de_Usuario",2
"MO - Mails Enviados - Detalle","MO - Mails Enviados - Detalle","SELECT   to_char(TRUNC(sacar.mail_registro.fecha_alta)) AS Fecha,  sacar.cce_mail_movimiento.mail_template_id AS Template,                                                                                                                                                                                                                                                                              sacar.sac_usuario.usuario_id AS Id_Usuario_MO,  sacar.sac_usuario.usu_apodo AS Apodo,  (      CASE          WHEN(INSTR(sacar.cce_mail_movimiento.mail_template_id,'_BK_', 1, 1) != 0) THEN 'BK'          ELSE 'WEB'      END  ) AS Tipo_de_usuario,  sacar.sac_usuario.usu_email AS Email,  suspension_activa.tipo_sus_activa AS Grado_Suspension,  suspension_historico.total_suspensiones AS Q_Suspension_historico,  DECODE(sacar.cce_cuenta.estado, 'HABILITADA', 'H', 'I') AS Estado_de_Cuenta,  SUM(sacar.cce_mail_movimiento.importe_movimiento) AS Monto_Notificado,  MAX(sacar.cce_mail_movimiento.importe_minimo) AS Monto_Minimo,  to_char(MAX(TRUNC(sacar.erp_movimiento.fecha_movimiento))) AS Fecha_Emision_Facturas,  facturas_notificadas.CONCATENATED_STRING AS Facturas_Reclamadas,  DECODE(sacar.mail_registro.mail_estado_id, '2' , 'Si', 'No') AS  Enviado,  DECODE(sacar.mail_registro.see_image,'Y', 'Si', 'No') AS Leido,  DECODE(sacar.mail_registro.click_link,'Y', 'Si', 'No') AS Clickeado  FROM sacar.cce_mail_movimiento  LEFT JOIN sacar.erp_movimiento ON sacar.cce_mail_movimiento.id_movimiento = sacar.erp_movimiento.id_movimiento  LEFT JOIN sacar.sac_usuario ON sacar.erp_movimiento.id_usuario = sacar.sac_usuario.usuario_id  LEFT JOIN sacar.mail_registro ON sacar.cce_mail_movimiento.mail_reg_id = sacar.mail_registro.mail_reg_id  LEFT JOIN  (      SELECT sacar.crm_suspension_usuario.usuario_id,      (          CASE              WHEN (MAX(peso) = 1) THEN 'LEVE'              WHEN (MAX(peso) = 2) THEN 'MODERADA'              WHEN (MAX(peso) = 3) THEN 'GRAVE'          END      ) AS tipo_sus_activa      FROM sacar.crm_suspension_usuario      LEFT JOIN       (          SELECT 'LEVE' AS tipo_suspension, '1' AS peso FROM dual          UNION          SELECT 'MODERADA' AS tipo_suspension, '2' AS peso FROM dual          UNION          SELECT 'GRAVE' AS tipo_suspension, '3' AS peso FROM dual      ) suspension ON sacar.crm_suspension_usuario.tipo_suspension = suspension.tipo_suspension      WHERE activa LIKE 'Y'      GROUP BY sacar.crm_suspension_usuario.usuario_id  ) suspension_activa ON sacar.sac_usuario.usuario_id = suspension_activa.usuario_id  LEFT JOIN  (      SELECT COUNT(*) as total_suspensiones,      sacar.crm_suspension_usuario.usuario_id      FROM sacar.crm_suspension_usuario      GROUP BY sacar.crm_suspension_usuario.usuario_id  ) suspension_historico ON sacar.sac_usuario.usuario_id = suspension_historico.usuario_id  LEFT JOIN  (  SELECT  mail_reg_id,  SUBSTR(MAX(REPLACE(  SYS_CONNECT_BY_PATH( CONCAT( CONCAT(subtipo_comprobante, ' '), numero_comprobante) , '/')  ,'/',', ')),2) Concatenated_String  FROM   (      SELECT      sacar.cce_mail_movimiento.mail_reg_id,      sacar.erp_movimiento.subtipo_comprobante,      sacar.erp_movimiento.numero_comprobante,      row_number() OVER (Partition by sacar.cce_mail_movimiento.mail_reg_id order by sacar.cce_mail_movimiento.id_movimiento ) ROW#      FROM sacar.cce_mail_movimiento      LEFT JOIN sacar.erp_movimiento ON sacar.cce_mail_movimiento.id_movimiento = sacar.erp_movimiento.id_movimiento  )  START WITH ROW#=1  CONNECT BY PRIOR mail_reg_id = mail_reg_id  AND PRIOR row# = row# -1  GROUP BY mail_reg_id  ) facturas_notificadas ON sacar.cce_mail_movimiento.mail_reg_id = facturas_notificadas.mail_reg_id  LEFT JOIN sacar.cce_cuenta ON sacar.sac_usuario.usuario_id = sacar.cce_cuenta.usuario_id  LEFT JOIN sacar.cta_dominio ON sacar.cce_mail_movimiento.mail_template_id = sacar.cta_dominio.abreviatura  WHERE TRUNC(sacar.mail_registro.fecha_alta) BETWEEN TRUNC( $P{GC_filtro_fecha_desde_DATE_PROD} ) AND TRUNC( $P{GC_filtro_fecha_hasta_D...",2
"MO - Reporting - Preguntas que faltan Moderar","MO - Reporting - Preguntas que faltan Moderar","select Preguntas, Cantidad, to_char(TRUNC(FechaMenor)) as FechaMenor  from (  select 'PROPUESTAS' as Preguntas, count(*) as Cantidad , min(generacion) as FechaMenor  from sacar.MOD_CANDIDATO  where moderado = 'NO'  UNION  select 'TODAS' as Preguntas, count(*) as Cantidad, min(preav_fecha_creacion) as FechaMenor  from sacar.SAC_PREGUNTA_AVISO  where preav_pregunta_original is null  )",2
"Promociones Comprador","Promociones Comprador","SELECT  AV.AV_ID AS id_aviso,   av.av_titulo AS producto,           MOV.USUARIO_ID_VENDEDOR as vendedor,           USUV.USU_APODO as apodo_vendedor,           PROMOC.ID as id_promo,           PROMOC.DESCRIPCION as promo_desc,           PROMOC.HABILITADA as promo_habilitada,           '$' || AV.AV_PRECIO AS precio_mo,           '-' || decode(nvl(PROMOC.PORCENTAJE,-1),-1,0, (PROMOC.PORCENTAJE * PROMOC.PORCENTAJE_MO) / 100) || '%' as dto_vend_porc,            '$-' || (MOV.MOV_PRECIO_NO_PROMOCIONADO - MOV.MOV_PRECIO) * (1 - (nvl(PROMOC.PORCENTAJE_MO,0) / 100))  as dto_vend_peso,           '-' || decode(nvl(PROMOC.PORCENTAJE,-1),-1,0,(PROMOC.PORCENTAJE - (PROMOC.PORCENTAJE  * PROMOC.PORCENTAJE_MO) / 100)) || '%' as diferencia_mo,           '$-' || (MOV.MOV_PRECIO_NO_PROMOCIONADO - MOV.MOV_PRECIO) * (nvl(PROMOC.PORCENTAJE_MO,0) / 100) as dto_absorvido_mo_pesos,           '-' || decode(nvl(PROMOC.PORCENTAJE, -1), -1, 0, PROMOC.PORCENTAJE) || '%' AS total_porc_dto,            '-$' || (MOV.MOV_PRECIO_NO_PROMOCIONADO - MOV.MOV_PRECIO) AS dto_en_pesos_total,           '$' || MOV.MOV_PRECIO as precio_final,           AV.AV_STOCK as unid_stock,           '-$' || (((MOV.MOV_PRECIO_NO_PROMOCIONADO - MOV.MOV_PRECIO) * (nvl(PROMOC.PORCENTAJE_MO,0) / 100)) * AV.AV_STOCK) as costo_total_para_mo,           '-$' || (((MOV.MOV_PRECIO_NO_PROMOCIONADO - MOV.MOV_PRECIO) * (1 - (nvl(PROMOC.PORCENTAJE_MO,0) / 100))) * AV.AV_STOCK) as costo_del_vendedor,           '-$' || (((MOV.MOV_PRECIO_NO_PROMOCIONADO - MOV.MOV_PRECIO) * (nvl(PROMOC.PORCENTAJE_MO,0) / 100)) * AV.AV_STOCK) / 2 as cincuenta_porc_costo_bonif,           '-$' || (((MOV.MOV_PRECIO_NO_PROMOCIONADO - MOV.MOV_PRECIO) * (1 - (nvl(PROMOC.PORCENTAJE_MO,0) / 100))) * AV.AV_STOCK) / 2 as cincuenta_porc_costo_devol,           '-$' || (((MOV.MOV_PRECIO_NO_PROMOCIONADO - MOV.MOV_PRECIO) * (nvl(PROMOC.PORCENTAJE_MO,0) / 100)) * AV.AV_STOCK) as costo_total_promo,           ventas.nro_venta as ventas_total,           ((MOV.MOV_PRECIO_NO_PROMOCIONADO - MOV.MOV_PRECIO) * (nvl(PROMOC.PORCENTAJE_MO,0) / 100)) * (ventas.nro_venta / 2)  as costo_real_total,            ((MOV.MOV_PRECIO_NO_PROMOCIONADO - MOV.MOV_PRECIO) * (nvl(PROMOC.PORCENTAJE_MO,0) / 100)) * (ventas.nro_venta / 2) / 2 as costo_real_bonific,            ((MOV.MOV_PRECIO_NO_PROMOCIONADO - MOV.MOV_PRECIO) * (nvl(PROMOC.PORCENTAJE_MO,0) / 100)) * (ventas.nro_venta / 2) / 2 as costo_real_devol_peso,            CARGO.ESTADO as cargo_estado    FROM sacar.sac_aviso av INNER JOIN sacar.sac_movimiento mov ON AV.AV_ID = MOV.AV_ID    INNER JOIN sacar.sac_usuario usuv ON MOV.USUARIO_ID_VENDEDOR = USUV.USUARIO_ID    INNER JOIN sacar.fc_promocion promoc ON MOV.PROMO_COMPRADOR_ID = PROMOC.ID    inner join sacar.cce_cargo cargo on MOV.MOV_ID = CARGO.TRANSACCION_ID,    sacar.cce_estado_cargo_log cargo_log,  (select aviso_id as aviso, count(aviso_id) as nro_venta   from sacar.cce_cargo ccargo   where ccargo.ESTADO in ($P!{MO_promo_comprador_filter_estado_cargo} )   and ccargo.promo_comprador_id is not null   group by ccargo.aviso_id) ventas    where av.av_id = ventas.AVISO   and cargo_log.estado_nombre in ($P!{MO_promo_comprador_filter_estado_cargo} )  and cargo_log.cargo_id = CARGO.id  AND PROMOC.ORIGEN = $P{MO_promo_comprador_filter_tipo_promo}   AND (0 = DECODE($P{MO_promo_comprador_filter_aviso_id} ,'Ingrese ID',0,1) OR AV.AV_ID = $P{MO_promo_comprador_filter_aviso_id} )  AND CARGO.ESTADO in ($P!{MO_promo_comprador_filter_estado_cargo})   AND (0 = DECODE($P{MO_promo_comprador_filter_estado_promo} ,'TODAS',0,1) OR PROMOC.HABILITADA = $P{MO_promo_comprador_filter_estado_promo} )  AND (0 = DECODE($P{MO_promo_comprador_filter_promo_id} ,'Ingrese Promo ID',0,1) OR to_char(PROMOC.ID) = $P{MO_promo_comprador_filter_promo_id} )  AND (0 = DECODE($P{MO_promo_comprador_filter_usuario_vend_id} ,'Ingrese ID',0,1) OR usuv.USUARIO_ID = $P{MO_promo_comprador_filter_usuario_vend_id} )  AND DECODE ($P{GC_filtro_tipo_fecha},                           'Fecha generacion', TRUNC ...",2
"MO - Moderacion - Patrones que se buscan en preguntas","MO - Moderacion - Patrones que se buscan en preguntas","select *  from sacar.MOD_PALABRA  ",2
"MO - MENSUAL GMV x Mes x Tipo Cliente - Bonificaciones","MO - MENSUAL GMV x Mes x Tipo Cliente - Bonificaciones","SELECT  SUM (monto) AS gmv,u.tius_id  FROM sacar.sac_usuario u, sacar.cce_cuenta cu, sacar.cce_cargo ca  WHERE 0 = 0  AND ca.cuenta_id = cu.ID  AND ca.tipo_cargo_id = 3  AND u.usuario_id = cu.usuario_id  and trunc(ca.GENERACION) >= $P{MO_reporting_filtro_fecha_desde_DATE}  and trunc(ca.GENERACION) <= $P{MO_reporting_filtro_fecha_hasta_DATE}  GROUP BY u.tius_id",2
"MO - MENSUAL GMV x Mes x Categoria - Comisiones","MO - MENSUAL GMV x Mes x Categoria - Comisiones","select SUM (DECODE (ca.aviso_moneda,'P', ca.aviso_precio * ca.aviso_cantidad, 'D', ca.aviso_precio * ca.aviso_cantidad * (DECODE (TO_CHAR (ca.generacion, 'mm/yyyy'), to_char(sysdate-10,'mm/yyyy'),3.82 )))) GMV, bsq.l1 ID_CATEGORIA, bsq.DESCRIPCION_L1 CATEGORIA  from sacar.cce_cargo ca, sacar.BSQ_AGRUPADOR_CATEGORIA bsq, REPORTE_SACAR_AVISO a   where 0=0  and a.AV_ID = ca.aviso_id  and a.CATE_ID = bsq.CATEGORIA_ID  and ca.tipo_cargo_id = 1  and trunc(ca.GENERACION) >= $P{MO_reporting_filtro_fecha_desde_DATE}  and trunc(ca.GENERACION) <= $P{MO_reporting_filtro_fecha_hasta_DATE}  group by TO_CHAR (ca.generacion, 'mm/yyyy'),bsq.l1, bsq.DESCRIPCION_L1",2
"MO - MENSUAL GMV Listing total x Tipo Usuario","MO - MENSUAL GMV Listing total x Tipo Usuario","select decode(u.tius_id,1,'BK',2,'WEB')TU,count(1) CANTIDAD, a.AV_PRODUCTO_ESTADO  from sacar.sac_aviso a, sacar.sac_usuario u  where 0=0  and a.usuario_id = u.usuario_id  and a.av_estado=3  and trunc(a.AV_FECHA_CREACION) >= $P{MO_reporting_filtro_fecha_desde_DATE}  and trunc(a.AV_FECHA_CREACION) <= $P{MO_reporting_filtro_fecha_hasta_DATE}  group by decode(u.tius_id,1,'BK',2,'WEB'), a.AV_PRODUCTO_ESTADO",2
"MO - MENSUAL GMS x Categoria","MO - MENSUAL GMS x Categoria","select bsq.l1 as ID_CATEGORIA, cat.CATE_DESCRIPCION as DESCRIPCION  , sum(ca.aviso_cantidad) as CANTIDAD  , sum( decode(a.av_moneda,'P',1,'D',3.82) * ca.aviso_precio*ca.aviso_cantidad) as GMS   from sacar.bsq_agrupador_categoria bsq, sacar.sac_categoria cat  ,REPORTE_SACAR_AVISO a, sacar.cce_cargo ca  where 0=0  and bsq.l1 = cat.CATE_ID  and bsq.CATEGORIA_ID = a.cate_id   and ca.AVISO_ID = a.AV_ID  and ca.TIPO_CARGO_ID = 1 --SIN CONTAR BONIFICACIONES NI DESTAQUES  and trunc(ca.GENERACION) >= $P{MO_reporting_filtro_fecha_desde_DATE}  and trunc(ca.GENERACION) <= $P{MO_reporting_filtro_fecha_hasta_DATE}  group by bsq.l1, cat.CATE_DESCRIPCION   order by id_categoria asc",2
"MO - MENSUAL UsuariosConPublicacionEnLosUltimos6meses","MO - MENSUAL UsuariosConPublicacionEnLosUltimos6meses","select padre.*, cu.ESTADO   from (select u.usuario_id, u.usu_apodo, u.usu_nombre, u.usu_apellido, u.usu_email ,u.usu_cod_area_tel,u.usu_telefono,tu.TIUS_DESCRIPCION, count(a.av_id)CANTIDAD  from sacar.sac_usuario u, REPORTE_SACAR_AVISO a, sacar.sac_tipo_usuario tu  where 0=0  and u.tius_id = tu.TIUS_ID  and a.usuario_id = u.usuario_id  and a.AV_FECHA_CREACION between  sysdate - 180 and sysdate - 1  group by u.usuario_id, u.usu_apodo, u.usu_nombre, u.usu_apellido, u.usu_email ,u.usu_cod_area_tel,u.usu_telefono,tu.TIUS_DESCRIPCION)padre ,sacar.cce_cuenta cu  where 0=0   and padre.usuario_id = cu.usuario_id (+)",2
"MO - MENSUAL GrandesVendedoresReputacionVentasL1","MO - MENSUAL GrandesVendedoresReputacionVentasL1","select USUARIO_ID,APODO,NOMBRE,APELLIDO,AREA_TEL,TEL,EMAIL,LOC,PROVINCIA  ,TIPO_USU,ESTADO,CATEGORIA,max(ventas)as Ventas,REPUTACION from (  select u.usuario_id USUARIO_ID, u.usu_apodo APODO, u.usu_nombre NOMBRE, u.usu_apellido APELLIDO  , u.USU_COD_AREA_TEL AREA_TEL,u.USU_TELEFONO TEL, u.USU_EMAIL EMAIL,u.usu_localidad LOC  ,pr.prv_nombre PROVINCIA, tu.TIUS_DESCRIPCION TIPO_USU, cu.ESTADO ESTADO, cat.descripcion_l1 CATEGORIA  , count(ca.id)VENTAS, rep.PUNTAJE REPUTACION  from sacar.sac_usuario u, sacar.sac_tipo_usuario tu, sacar.cce_cuenta cu  ,sacar.cce_cargo ca, sacar.sac_provincias pr, sacar.cal_reputacion rep  ,sacar.bsq_agrupador_categoria cat, REPORTE_SACAR_AVISO a  where 0=0  and u.usuario_id = cu.USUARIO_ID  and u.TIUS_ID = tu.TIUS_ID  and ca.TIPO_CARGO_ID = 1  and cu.id=ca.cuenta_id  and u.PRV_ID = pr.PRV_ID  and u.usuario_id = rep.USUARIO_ID  and cat.categoria_id = a.cate_id  and a.av_id = ca.aviso_id  and u.tius_id = 1  and trunc(ca.GENERACION) >= $P{MO_reporting_filtro_fecha_desde_DATE}  and trunc(ca.GENERACION) <= $P{MO_reporting_filtro_fecha_hasta_DATE}  group by u.usuario_id, u.usu_apodo, u.usu_nombre, u.usu_apellido, u.USU_COD_AREA_TEL  ,u.USU_TELEFONO, u.USU_EMAIL,u.usu_localidad,pr.prv_nombre  , tu.TIUS_DESCRIPCION, cu.ESTADO, rep.PUNTAJE  ,cat.descripcion_l1   order by u.usuario_id asc)  group by USUARIO_ID,APODO,NOMBRE,APELLIDO,AREA_TEL,TEL,EMAIL,LOC,PROVINCIA  ,TIPO_USU,ESTADO,CATEGORIA,REPUTACION  order by usuario_id",2
"MO - Promociones Comprador Ventas","Promociones Comprador Ventas","select distinct CARGO.PROMO_COMPRADOR_ID as promocion,      cargo.aviso_id,      count(cargo.aviso_id) over (partition by cargo.aviso_id, to_char(cargo.actualizacion), CARGO.PROMO_COMPRADOR_ID order by to_char(cargo.actualizacion) desc) as cantidad,      to_char(cargo.actualizacion) as fecha,      MOV.USUARIO_ID_VENDEDOR as vendedor_id,      UV.USU_apodo as apodo_vendedor  from sacar.cce_cargo cargo      inner join sacar.sac_movimiento mov on CARGO.TRANSACCION_ID = MOV.MOV_ID      inner join sacar.sac_usuario uv on MOV.USUARIO_ID_VENDEDOR = UV.USUARIO_ID  where CARGO.PROMO_COMPRADOR_ID is not null  AND  CARGO.ESTADO in ($P!{MO_promo_comprador_filter_estado_cargo} )  AND (0 = DECODE($P{MO_promo_comprador_filter_aviso_id} ,'Ingrese ID',0,1)   OR AVISO_ID = $P{MO_promo_comprador_filter_aviso_id} )   AND DECODE ($P{GC_filtro_tipo_fecha},                           'Fecha generacion', TRUNC (generacion),                           TRUNC (actualizacion)                          ) BETWEEN trunc($P{GC_filtro_fecha_desde_DATE}) AND trunc($P{GC_filtro_fecha_hasta_DATE})  AND (0 = DECODE($P{MO_promo_comprador_filter_usuario_vend_id} ,'Ingrese ID',0,1)   OR uv.USUARIO_ID = $P{MO_promo_comprador_filter_usuario_vend_id} )  AND (0 = DECODE($P{MO_promo_comprador_filter_promo_id} ,'Ingrese Promo ID',0,1)   OR to_char(CARGO.PROMO_COMPRADOR_ID) = $P{MO_promo_comprador_filter_promo_id} )  order by fecha desc",2
"MO - MENSUAL General Saldo (Facturado - Cobrado)","MO - MENSUAL General Saldo (Facturado - Cobrado)","select padre1.*, sum(padre1.facturado-padre1.pagado) as SALDO from  (select padre.*, SUM(nps.monto) as PAGADO from   (select u.usuario_id, u.usu_apodo, u.usu_nombre, u.usu_apellido, u.USU_COD_AREA_TEL  ,u.USU_TELEFONO, u.USU_EMAIL,u.usu_localidad,pr.prv_nombre, tu.TIUS_DESCRIPCION  ,cu.id CUENTA, cu.ESTADO, SUM(decode(ca.aviso_moneda,'P',1,'D',3.30)*ca.monto) as FACTURADO  from sacar.sac_usuario u, sacar.cce_cuenta cu, sacar.sac_tipo_usuario tu, sacar.sac_provincias pr ,sacar.cce_cargo ca  where 0=0  and u.usuario_id = cu.usuario_id  and u.tius_id = tu.tius_id  and u.prv_id = pr.PRV_ID  and ca.cuenta_id = cu.id  and ca.estado = 'EN_LOTE'  group by u.usuario_id, u.usu_apodo, u.usu_nombre, u.usu_apellido, u.USU_COD_AREA_TEL  ,u.USU_TELEFONO, u.USU_EMAIL,u.usu_localidad,pr.prv_nombre, tu.TIUS_DESCRIPCION  ,cu.id, cu.ESTADO)padre,sacar.cce_pago_nps nps  where 0=0  and nps.CUENTA_ID = padre.CUENTA  and (nps.estado = 'AUTORIZADO' or nps.estado='AUTORIZADO_POR_SOLICITUD')  and trunc(nps.GENERACION) >= $P{MO_reporting_filtro_fecha_desde_DATE}  group by padre.usuario_id, padre.usu_apodo, padre.usu_nombre, padre.usu_apellido  ,padre.USU_COD_AREA_TEL,padre.USU_TELEFONO, padre.USU_EMAIL,padre.usu_localidad,padre.prv_nombre  , padre.TIUS_DESCRIPCION, padre.cuenta, padre.estado, padre.facturado)padre1  where 0=0  group by padre1.usuario_id, padre1.usu_apodo, padre1.usu_nombre, padre1.usu_apellido  ,padre1.USU_COD_AREA_TEL,padre1.USU_TELEFONO, padre1.USU_EMAIL,padre1.usu_localidad,padre1.prv_nombre  , padre1.TIUS_DESCRIPCION, padre1.cuenta, padre1.estado, padre1.facturado, padre1.pagado  order by usuario_id",2
"MO - Buscador - Mapeo término categoria","MO - Buscador - Mapeo término categoria","select t.termino, c.CATE_ID, c.path  from sacar.BSQ_TERMINO_CATEGORIA t, (select cate_id, SYS_CONNECT_BY_PATH(cate_descripcion, '->') PATH  from sacar.sac_categoria  start with cate_padre_id = 1  connect by prior cate_id = cate_padre_id) c  where t.categoria_id = c.cate_id",2
"MO - Buscador - Uso de los buscadores (ultimos 10 dias)","MO - Buscador - Uso de los buscadores (ultimos 10 dias)","select decode(machine,'bsqavz','Nuevo (SolR)','Viejo (Oracle)') buscador, count(*) cantidad, avg(lobu_fecha_fin-lobu_fecha_inicio) tiempo_rta  from sacar.sac_log_busqueda  where lobu_fecha_creacion > trunc(sysdate)-10   group by decode(machine,'bsqavz','Nuevo (SolR)','Viejo (Oracle)')",2
"MO - Buscador - Busquedas sin resultados (ultimos 10 dias)","MO - Buscador - Busquedas sin resultados (ultimos 10 dias)","select lower(lobu_titulo) keyword, count(*) cantidad  from sacar.sac_log_busqueda  where lobu_ocurrencias = 0  and lobu_titulo is not null  and lobu_vendedor_id is null  and lobu_categoria_id is null  and lobu_fecha_creacion > trunc(sysdate)-10  and lower(lobu_titulo) not like 'compra prueba'   group by lower(lobu_titulo)  order by 2 desc  ",2
"MO - Buscador - 25 Palabras mas buscadas (ultimos 10 días)","MO - Buscador - 25 Palabras mas buscadas (ultimos 10 días)","select *  from (  select lower(lobu_titulo) keyword, count(*) cantidad  from sacar.sac_log_busqueda  where lobu_titulo is not null  and lobu_vendedor_id is null  and lobu_categoria_id is null  and lobu_fecha_creacion > trunc(sysdate)-10  and lower(lobu_titulo) not like 'compra prueba'   group by lower(lobu_titulo)  order by 2 desc  )  where rownum <= 25  ",2
"MO - MENSUAL GMV Listing Live","MO - MENSUAL GMV Listing Live","select cat.DESCRIPCION_L1, decode(u.tius_id,1,'BK',2,'WEB')TU,count(1) CANTIDAD, a.AV_PRODUCTO_ESTADO  from sacar.bsq_agrupador_categoria cat, sacar.sac_aviso a, sacar.sac_usuario u  where 0=0  and a.usuario_id = u.usuario_id  and a.cate_id = cat.categoria_id  and a.av_estado=3  and trunc(a.AV_FECHA_CREACION) >= $P{MO_reporting_filtro_fecha_desde_DATE}  and trunc(a.AV_FECHA_CREACION) <= $P{MO_reporting_filtro_fecha_hasta_DATE}  group by cat.DESCRIPCION_L1, decode(u.tius_id,1,'BK',2,'WEB'), a.AV_PRODUCTO_ESTADO  order by cat.DESCRIPCION_L1 ",2
"MO - Buscador - Busquedas con pocos resultados (ultimos 10 dias)","MO - Buscador - Busquedas con pocos resultados (ultimos 10 dias)","select lower(lobu_titulo) keyword, count(*) cantidad  from sacar.sac_log_busqueda  where lobu_ocurrencias > 0 and lobu_ocurrencias < 10  and lobu_titulo is not null  and lobu_vendedor_id is null  and lobu_categoria_id is null  and lobu_fecha_creacion > trunc(sysdate)-10  and lower(lobu_titulo) not like 'compra prueba'   group by lower(lobu_titulo)  order by 2 desc  ",2
"MO - Categorias - Listado","MO - Categorias - Listado","select categoria_id, l1, descripcion_l1, path  from sacar.BSQ_AGRUPADOR_CATEGORIA",2
"MO - Procesos de interfase con PRESEA corridos ayer","MO - Procesos de interfase con PRESEA corridos ayer","select proceso, nivel, count(*) as Cantidad  from sacar.GNR_LOG  where OBJETO_TIPO = 'INTERFAZ_PRESEA'  and trunc(generacion) = trunc(sysdate)-1  and texto not like '%No hubo nuevos registros para ser procesados'  group by proceso, nivel  order by Cantidad desc",2
"MO - MENSUAL GMV x Mes x Tipo Cliente - Comisiones sobre Ventas","MO - MENSUAL GMV x Mes x Tipo Cliente - Comisiones sobre Ventas","SELECT  SUM (DECODE (ca.aviso_moneda,'P', ca.aviso_precio * ca.aviso_cantidad, 'D', ca.aviso_precio * ca.aviso_cantidad * (DECODE (TO_CHAR (ca.generacion, 'mm/yyyy'), to_char(sysdate-10, 'mm/yyyy'),3.82)))) AS gmv, u.tius_id  FROM sacar.sac_usuario u, sacar.cce_cuenta cu, sacar.cce_cargo ca  WHERE 0 = 0  AND ca.cuenta_id = cu.ID  AND ca.tipo_cargo_id = 1  AND u.usuario_id = cu.usuario_id  and trunc(ca.GENERACION) >= $P{MO_reporting_filtro_fecha_desde_DATE}  and trunc(ca.GENERACION) <= $P{MO_reporting_filtro_fecha_hasta_DATE}  GROUP BY u.tius_id",2
"MO - MENSUAL GMV x Mes x Tipo Producto","MO - MENSUAL GMV x Mes x Tipo Producto","SELECT  SUM (DECODE (ca.aviso_moneda,'P', ca.aviso_precio * ca.aviso_cantidad, 'D', ca.aviso_precio * ca.aviso_cantidad * (DECODE (TO_CHAR (ca.generacion, 'mm/yyyy'),to_char(sysdate-10,'mm/yyyy'),3.82)))) AS gmv, a.AV_PRODUCTO_ESTADO  FROM sacar.cce_cargo ca, REPORTE_SACAR_AVISO a  WHERE 0 = 0  AND ca.tipo_cargo_id = 1  AND ca.AVISO_ID=a.AV_ID  and trunc(ca.GENERACION) >= $P{MO_reporting_filtro_fecha_desde_DATE}  and trunc(ca.GENERACION) <= $P{MO_reporting_filtro_fecha_hasta_DATE}  GROUP BY TO_CHAR (ca.generacion, 'mm/yyyy'), a.AV_PRODUCTO_ESTADO",2
"MO - Percepciones Recibidas","MO - Percepciones Recibidas","select TO_CHAR(PERCEP.FECHA_PERCEPCION, 'dd/mm/yyyy') as FECHA_FACTURA,         MOV.SUBTIPO_COMPROBANTE as TIPO_COMPROBANTE,         MOV.numero_comprobante as NUMERO_COMPROBANTE,         USUARIO.USUARIO_ID as ID_MO,         usuario.usu_apodo as APODO,         CUENTA.TIPO_CLIENTE_CODIGO as TIPO_US,         IVA.CONDICION as TIPORESP,          '21%' as ALIC_IVA,         PERCEP.MONTO_PERCEPCION  as PERCEPIB,         PERCEP.PORCENTAJE  as ALIC_IIBB,         MOV.IMPORTE_MOVIMIENTO as TOTAL_COMPROBANTE  from sacar.sac_usuario usuario,       sacar.ERP_PERCEPCION percep,       sacar.ERP_MOVIMIENTO mov,       sacar.CCE_DATOS_FACTURACION fact,       sacar.CCE_CONDICION_IVA iva,       sacar.CCE_CUENTA cuenta  where USUARIO.USUARIO_ID = PERCEP.ID_USUARIO  and USUARIO.USUARIO_ID = MOV.ID_USUARIO  and MOV.numero_comprobante = PERCEP.numero_comprobante  and USUARIO.USUARIO_ID = FACT.USUARIO_ID  and FACT.CONDICION_IVA_ID = IVA.ID  and USUARIO.USUARIO_ID = CUENTA.USUARIO_ID   and trunc(PERCEP.FECHA_PERCEPCION) = to_date($P{percep_filtro_fecha}, 'dd/mm/yyyy')  and (0 = DECODE($P{percep_filtro_tipo_usu} ,'Seleccione Tipo Usuario',0,1) OR CUENTA.TIPO_CLIENTE_CODIGO = $P{percep_filtro_tipo_usu} )     AND (0 = DECODE($P{percep_filtro_apodo} ,'Ingrese Apodo',0,1) OR usuario.usu_apodo = $P{percep_filtro_apodo} )     AND (0 = DECODE($P{percep_filtro_usuario} ,'Ingrese Usuario',0,1) OR usuario.usuario_id = $P{percep_filtro_usuario} )  AND (0 = DECODE($P{percep_filtro_alicIIBB} ,'0',0,1) OR PERCEP.PORCENTAJE = $P{percep_filtro_alicIIBB} )  AND (0 = DECODE($P{percep_filtro_iva} ,'Seleccione Condicion IVA',0,1) OR FACT.CONDICION_IVA_ID = $P{percep_filtro_iva} )",2
"MO - Usuarios generados los ultimos 7 días con publicaciones","MO - Usuarios generados los ultimos 7 días con publicaciones","select u.usuario_id, u.usu_apodo, to_char(u.usu_fecha_ingreso,'yyyy-mm-dd') fecha_ingreso, u.usu_cod_area_tel, u.usu_telefono,          ( select nvl(sum(monto),0) from sacar.cce_cargo ca, sacar.cce_cuenta cu where ca.cuenta_id = cu.id and tipo_cargo_id = 2 and cu.usuario_id = u.usuario_id ) monto_destaques_contratados,           ( select count(*) from sacar.sac_aviso a1 where a1.usuario_id = u.usuario_id ) q_avisos_publicados,           ( select count(*) from sacar.sac_aviso a1, sacar.pgs_forma_pago p1 where a1.usuario_id = u.usuario_id and a1.av_id = p1.aviso_id and p1.medio_pago_id = 1 ) q_avisos_publicados_ps -- categoria publicada  ,U.USU_SUSPENDIDO  from sacar.sac_usuario u  where trunc(usu_fecha_ingreso) >= trunc(sysdate-7)  and exists (      select 1      from sacar.sac_aviso a      where a.usuario_id = u.usuario_id   )   order by 6 desc  ",2
"MO - Usuarios sin CUIT y su inversion en destaques","MO - Usuarios sin CUIT y su inversion en destaques","select us.usu_apodo, us.tius_id, sum(ca.monto) monto, tipo_documento.tipo, nro_documento.nro_documento  from sacar.cce_cargo ca, sacar.cce_cuenta cu, sacar.sac_usuario us,       (select td1.TIPO, df1.usuario_id from sacar.cce_datos_facturacion df1, sacar.cce_tipo_documento td1 where df1.tipo_documento_id = td1.id  ) tipo_documento,      (select df1.NRO_DOCUMENTO, df1.usuario_id from sacar.cce_datos_facturacion df1  ) nro_documento  where ca.tipo_cargo_id = 2  and ca.cuenta_id = cu.id  and ca.ESTADO = 'EN_LOTE'  and us.USU_SUSPENDIDO = 'N'  and cu.usuario_id = us.usuario_id  and nro_documento.USUARIO_ID (+)= us.usuario_id  and tipo_documento.USUARIO_ID (+)= us.usuario_id    and ca.generacion > $P{MO_reporting_filtro_fecha_desde_DATE}  and ca.generacion < $P{MO_reporting_filtro_fecha_hasta_DATE}  and not exists (  select 1  from sacar.cce_datos_facturacion df  where us.usuario_id = df.USUARIO_ID  and df.TIPO_DOCUMENTO_ID = 80  )  and us.usu_apodo not like 'DirectSales'  group by us.usu_apodo, us.tius_id, nro_documento.nro_documento, tipo_documento.tipo  having sum(ca.monto) > 100  order by 3 desc    ",2
"MO - Usuarios con una unica compra (solo ultimos 6 meses)","MO - Usuarios con una unica compra (solo ultimos 6 meses)","select u.usuario_id, u.usu_email, u.usu_apodo, u.usu_nombre, u.usu_apellido, to_char(u.usu_fecha_ingreso,'YYYY-MM-DD') fecha_ingreso, u.usu_cod_area_tel, u.usu_telefono, u.usu_suspendido  from sacar.sac_usuario u  where 1 =       (      select count(*)      from sacar.sac_movimiento m1      where m1.usuario_id = u.usuario_id        )      and exists (      select 1      from sacar.sac_movimiento m1      where m1.usuario_id = u.usuario_id      and m1.mov_fecha_creacion >= $P{MO_reporting_filtro_fecha_desde_DATE}      and m1.mov_fecha_creacion <= $P{MO_reporting_filtro_fecha_hasta_DATE}      ) ",2
"MO - Usuarios con avisos que se inactivaron ayer","MO - Usuarios con avisos que se inactivaron ayer","select u.usuario_id, u.usu_apodo, u.usu_email,          sacar.GET_CATEGORIA_USUARIO(u.usuario_id) categoria,          (select count(distinct ea.av_id) from sacar.sac_estado_aviso ea           where trunc(ea.esav_fecha_creacion) = $P{MO_reporting_filtro_fecha_DATE}           and ea.esav_estado <> 3           and ea.esav_usuario_id = u.usuario_id) cant_avisos_inactivados_total,          (select count(distinct ea.av_id) from sacar.sac_estado_aviso ea           where trunc(ea.esav_fecha_creacion) = $P{MO_reporting_filtro_fecha_DATE}           and ea.esav_estado = 4           and ea.esav_usuario_id = u.usuario_id) cant_avisos_vencidos          from sacar.sac_usuario u  where exists (      select 1       from sacar.sac_estado_aviso ea      where trunc(ea.esav_fecha_creacion) = $P{MO_reporting_filtro_fecha_DATE}      and ea.esav_usuario_id = u.usuario_id      and ea.esav_estado <> 3   )  and u.usu_suspendido = 'N'  and not exists (      select *      from sacar.cce_cuenta c      where u.usuario_id = c.usuario_id      and c.estado = 'INHABILITADA'  )   order by 5 desc",2
"MO - LOTES_ENVIADOS_A_FACTURAR",LOTES_ENVIADOS_A_FACTURAR,"SELECT       LOTE.ID AS LOTE,      LOTE.TIPO_LOTE AS TIPO_LOTE,          LOTE.MONTO AS MONTO_LOTE,      LOTE.ALI_DEST AS ALICUOTA_DESTAQUE,      LOTE.IMP_DEST AS IMPORTE_DESTAQUE,      LOTE.BAS_DEST AS BASE_IMPONIB_DEST,          LOTE.ALI_PIB1 AS ALICUOTA_CABA,      LOTE.IMP_PIB1 AS IMPORTE_CABA,      LOTE.BAS_PIB1 AS BASE_IMPONIB_CABA,          LOTE.ALI_PIB2 AS ALICUOTA_TUCUMAN,      LOTE.IMP_PIB2 AS IMPORTE_TUCUMAN,      LOTE.BAS_PIB2 AS BASE_IMPONIB_TUCUMAN,          LOTE.ALI_PIVA AS ALICUOTA_IVA,      LOTE.IMP_PIVA AS IMPORTE_IVA,      LOTE.BAS_PIVA AS BASE_IMPONIB_IVA,      LOTE.RESPUESTA_IVA AS RESPUESTA_IVA,      TO_CHAR(LOTE.RESPUESTA_IVA_FECHA) AS RESPUESTA_IVA_FECHA,      (LOTE.MONTO + nvl(decode(nvl(LOTE.IMP_DEST, 0), 0, LOTE.IMP_PIB1, LOTE.IMP_DEST),0) + nvl(LOTE.IMP_PIB2,0) + nvl(LOTE.IMP_PIVA,0)) AS MONTO_TOTAL_A_FACTURAR,      LOTE.ESTADO AS LOTE_ESTADO,      CUENTA.USUARIO_ID AS USUARIO,      USU.TIUS_ID AS TIPO_USUARIO,      DF.TIPO_DOCUMENTO_ID AS TIPO_DOC,      DF.NRO_DOCUMENTO AS NUM_DOC,      DF.CONDICION_IVA_ID AS COND_IVA,      USU_REG.USU_DNI AS USU_DNI,      TO_CHAR(LOTE.GENERACION) AS GENERACION,      TO_CHAR(MOV.FECHA_MOVIMIENTO) AS FECHA_MOVIMIENTO,      MOV.TIPO_MOVIMIENTO AS TIPO_MOVIMIENTO,      MOV.SUBTIPO_COMPROBANTE AS SUBTIPO_COMPROBANTE,      MOV.DETALLE_MOVIMIENTO AS DETALLE_MOVIMIENTO,      MOV.NUMERO_COMPROBANTE AS NUMERO_COMPROBANTE,      MOV.IMPORTE_MOVIMIENTO AS IMPORTE_FACTURA,          TO_CHAR(MOV.FECHA_VENCIMIENTO) AS VENCIMIENTO                FROM       SACAR.CCE_LOTE LOTE,       SACAR.ERP_MOVIMIENTO MOV,      SACAR.CCE_CUENTA CUENTA,      SACAR.CCE_DATOS_FACTURACION DF,      SACAR.SAC_USUARIO_REGISTRO USU_REG,      SACAR.SAC_USUARIO USU  WHERE  CUENTA.ID = LOTE.CUENTA_ID  AND MOV.LOTES_ID(+) = TO_CHAR(LOTE.ID)  AND LOTE.ENVIO_ESTADO = 'ENVIADO'  AND CUENTA.ENVIO_ESTADO = 'RECIBIDO'  AND LOTE.TIPO_LOTE IN ('C','D')   AND CUENTA.USUARIO_ID = DF.USUARIO_ID(+)  AND CUENTA.USUARIO_ID = USU_REG.USUARIO_ID  AND CUENTA.USUARIO_ID = USU.USUARIO_ID  AND TRUNC(LOTE.ENVIO_FECHA) BETWEEN TRUNC($P{filtro_fecha_desde_LF}) AND TRUNC($P{filtro_fecha_hasta_LF})  ",2
"MO - Listing de usuarios con avisos cargados por VendedorPro","MO - Listing de usuarios con avisos cargados por VendedorPro","select u.usuario_id, u.usu_apodo, u.usu_email, to_char(u.usu_fecha_ingreso,'YYYY-MM-DD') fecha_ingreso, decode(u.tius_id,2,'Web',1,'Broker','SMS') segmento,      c.puntaje, c.calificaciones_positivas, c.calificaciones_negativas,       ( select count(*) from sacar.sac_aviso a where a.usuario_id = u.usuario_id ) totales,      ( select count(*) from sacar.sac_aviso a where a.usuario_id = u.usuario_id and a.av_estado = 3 ) totales_activos,      ( select count(*) from sacar.sac_aviso a where a.usuario_id = u.usuario_id and a.av_estado <> 3 ) totales_no_activos,      ( select count(*) from sacar.sac_aviso a where av_creado_por = 'WEB' and av_estado = 3 and a.usuario_id = u.usuario_id ) web_activos,      ( select count(*) from sacar.sac_aviso a where av_creado_por = 'WEB' and av_estado <> 3 and a.usuario_id = u.usuario_id ) no_activos,           ( select count(*) from sacar.sac_aviso a where av_creado_por = 'CARGADOR' and a.usuario_id = u.usuario_id ) cargador,      ( select count(*) from sacar.sac_aviso a where av_creado_por = 'CARGADOR' and av_estado = 3 and a.usuario_id = u.usuario_id ) cargador_activos,      ( select count(*) from sacar.sac_aviso a where av_creado_por = 'CARGADOR' and av_estado = 4 and a.usuario_id = u.usuario_id ) cargador_vencidos,      ( select count(*) from sacar.sac_aviso a where av_creado_por = 'CARGADOR' and av_estado = 5 and a.usuario_id = u.usuario_id ) cargador_cerrados,      ( select count(*) from sacar.sac_aviso a where av_creado_por = 'CARGADOR' and av_estado = 6 and a.usuario_id = u.usuario_id ) cargador_borrados,      ( select count(*) from sacar.sac_aviso a where av_creado_por = 'CARGADOR' and av_estado = 7 and a.usuario_id = u.usuario_id ) cargador_rechazados,      ( select count(*) from sacar.sac_aviso a where av_creado_por = 'CARGADOR' and av_estado = 8 and a.usuario_id = u.usuario_id ) cargador_archivado,      ( select count(*) from sacar.sac_aviso a where av_creado_por = 'CARGADOR' and av_estado = 9 and a.usuario_id = u.usuario_id ) cargador_inactivo,      ( select count(*) from sacar.sac_aviso a where av_creado_por = 'CARGADOR' and av_estado = 10 and a.usuario_id = u.usuario_id ) cargador_cuenta_inhabilitada,      ( select count(*) from sacar.sac_aviso a where av_creado_por = 'CARGADOR' and av_estado = 11 and a.usuario_id = u.usuario_id ) cargador_a_archivar,      ( select count(*) from sacar.sac_aviso a where av_creado_por = 'CARGADOR' and av_estado = 12 and a.usuario_id = u.usuario_id ) cargador_pausados,      ( select count(*) from sacar.sac_aviso a where av_creado_por = 'CARGADOR' and av_estado = 12 and a.usuario_id = u.usuario_id ) cargador_borrado_logico,      ( select count(*) from sacar.sac_aviso a where av_creado_por = 'CARGADOR' and av_estado = 12 and a.usuario_id = u.usuario_id ) cargador_baja_por_suspension,      (      select count(*) from sacar.cce_cargo ca, sacar.cce_cuenta cu       where ca.cuenta_id = cu.id and cu.usuario_id = u.usuario_id       and ca.tipo_cargo_id = 1 and to_char(ca.generacion,'mm-yyyy') = to_char(sysdate-30,'mm-yyyy')       ) ventas_mes1,      (      select count(*) from sacar.cce_cargo ca, sacar.cce_cuenta cu       where ca.cuenta_id = cu.id and cu.usuario_id = u.usuario_id       and ca.tipo_cargo_id = 1 and to_char(ca.generacion,'mm-yyyy') = to_char(sysdate-60,'mm-yyyy')       ) ventas_mes2,      (      select count(*) from sacar.cce_cargo ca, sacar.cce_cuenta cu       where ca.cuenta_id = cu.id and cu.usuario_id = u.usuario_id       and ca.tipo_cargo_id = 1 and to_char(ca.generacion,'mm-yyyy') = to_char(sysdate-90,'mm-yyyy')       ) ventas_mes3,      (      select sum(monto) from sacar.cce_cargo ca, sacar.cce_cuenta cu       where ca.cuenta_id = cu.id and cu.usuario_id = u.usuario_id        and ca.tipo_cargo_id in (2,7) and to_char(ca.generacion,'mm-yyyy') = to_char(sysdate-30,'mm-yyyy')       ) inversion_mes1,      (      select sum(monto) from sacar.cce_cargo ca, sacar.cce_cuenta cu       where ca.cuenta_id = cu.id and cu.usuario_id = u.usuario_id   ...",2
"MO - Usuarios con avisos que se inactivaron ayer (BETA)","MO - Usuarios con avisos que se inactivaron ayer (BETA)","select u.usuario_id, u.usu_apodo, u.usu_email, c.descripcion_l1, sum(b.cant_avisos_cerrados) cant_avisos_cerrados, sum(b.cant_avisos_vencidos) cant_avisos_vencidos,  sum(b.cantidad_total) cantidad_total     from   (  select saca_1.usuario_id, saca_1.cate_id,  (select count(*) from sacar.sac_aviso where usuario_id = saca_1.usuario_id and av_estado = 5 and cate_id = saca_1.cate_id and av_estado not in (3)  and trunc(av_fecha_expiracion) >= $P{MO_reporting_filtro_fecha_desde_DATE}  and trunc(av_fecha_expiracion) <= $P{MO_reporting_filtro_fecha_hasta_DATE}  ) cant_avisos_cerrados,  (select count(*) from sacar.sac_aviso where usuario_id = saca_1.usuario_id and av_estado = 4 and cate_id = saca_1.cate_id and av_estado not in (3)  and trunc(av_fecha_expiracion) >= $P{MO_reporting_filtro_fecha_desde_DATE}  and trunc(av_fecha_expiracion) <= $P{MO_reporting_filtro_fecha_hasta_DATE}  ) cant_avisos_vencidos,  count(*) cantidad_total   from sacar.sac_aviso saca_1  where saca_1.av_estado not in (3)  and trunc(saca_1.av_fecha_expiracion) >= $P{MO_reporting_filtro_fecha_desde_DATE}  and trunc(saca_1.av_fecha_expiracion) <= $P{MO_reporting_filtro_fecha_hasta_DATE}  group by saca_1.usuario_id, saca_1.cate_id  ) b, sacar.bsq_agrupador_categoria c, sacar.sac_usuario u  where b.usuario_id = u.usuario_id  and b.cate_id = c.categoria_id  and u.usu_suspendido = 'N'  group by u.usuario_id, u.usu_apodo, u.usu_email, c.descripcion_l1  order by cantidad_total desc, usu_apodo ",2
"MO - FACTURACION_LOTES_EXCLUIDOS",FACTURACION_LOTES_EXCLUIDOS,"(  SELECT      LOTE.ID AS LOTE,      LOTE.TIPO_LOTE AS TIPO_LOTE,      'NO_DF' AS TIPO_EXCLUSION,      LOTE.MONTO AS MONTO,      CUENTA.USUARIO_ID AS USUARIO,      TO_CHAR(LOTE.GENERACION) AS GENERACION,      NULL AS TIPO_SUSPENSION       FROM       SACAR.CCE_LOTE LOTE,      SACAR.CCE_CUENTA CUENTA,      SACAR.CCE_DATOS_FACTURACION DF,      SACAR.SAC_USUARIO_REGISTRO USU_REG  WHERE        LOTE.CUENTA_ID = CUENTA.ID       AND CUENTA.USUARIO_ID = DF.USUARIO_ID(+)      AND CUENTA.USUARIO_ID = USU_REG.USUARIO_ID      AND LOTE.ESTADO IN ('CERRADO','EXCLUIDO')      AND LOTE.ENVIO_ESTADO = 'NO_ENVIADO'      AND LOTE.TIPO_LOTE IN ('C','D')       AND (MONTO / 1.21 > 1000 AND DF.USUARIO_ID IS NULL AND USU_REG.USU_DNI IS NULL)  )  UNION  (  SELECT      LOTE.ID AS LOTE,      LOTE.TIPO_LOTE AS TIPO_LOTE,      'SUSPENSION' AS TIPO_EXCLUSION,      LOTE.MONTO AS MONTO,      CUENTA.USUARIO_ID AS USUARIO,      TO_CHAR(LOTE.GENERACION) AS GENERACION,      SUSP.TIPO_SUSPENSION AS TIPO_SUSPENSION      FROM       SACAR.CCE_LOTE LOTE      INNER JOIN SACAR.CCE_CUENTA CUENTA ON LOTE.CUENTA_ID = CUENTA.ID           INNER JOIN SACAR.CRM_SUSPENSION_USUARIO SUSP ON CUENTA.USUARIO_ID = SUSP.USUARIO_ID  WHERE       LOTE.ESTADO IN ('CERRADO','EXCLUIDO')            AND LOTE.ENVIO_ESTADO = 'NO_ENVIADO'      AND LOTE.TIPO_LOTE IN ('C','D')       AND SUSP.ACTIVA = 'Y' AND (SUSP.TIPO_SUSPENSION = 'GRAVE' OR SUSP.TIPO_SUSPENSION = 'MODERADA')  )  UNION  (  SELECT       LOTE.ID AS LOTE,      LOTE.TIPO_LOTE AS TIPO_LOTE,      'EXCLUIDO' AS TIPO_EXCLUSION,      LOTE.MONTO AS MONTO,      CUENTA.USUARIO_ID AS USUARIO,      TO_CHAR(LOTE.GENERACION) AS GENERACION,      NULL AS TIPO_SUSPENSION      FROM       SACAR.CCE_LOTE LOTE,      SACAR.CCE_CUENTA CUENTA   WHERE       LOTE.CUENTA_ID = CUENTA.ID      AND LOTE.ESTADO = 'EXCLUIDO'  )  union  (  SELECT      LOTE.ID AS LOTE,      LOTE.TIPO_LOTE AS TIPO_LOTE,      'NO_CUENTA_PRESEA' AS TIPO_EXCLUSION,      LOTE.MONTO AS MONTO,      CUENTA.USUARIO_ID AS USUARIO,      TO_CHAR(LOTE.GENERACION) AS GENERACION,      NULL AS TIPO_SUSPENSION       FROM       SACAR.CCE_LOTE LOTE,      SACAR.CCE_CUENTA CUENTA  WHERE        LOTE.CUENTA_ID = CUENTA.ID       AND LOTE.ESTADO IN ('PERCEPCION', 'CERRADO')      AND LOTE.ENVIO_ESTADO = 'NO_ENVIADO'      AND LOTE.TIPO_LOTE IN ('C','D')   AND CUENTA.ENVIO_ESTADO = 'NO_ENVIADO'  )",2
"MO - Log Publicación","MO - Log Publicación","select LP.ID_PUBLICACION, LP.ACCION, LP.TIPO_PUBLICACION, LP.DURACION_MS, LP.ID_USUARIO, LP.TRANSACCION_OK, to_char(LP.FECHA, 'DD/MM/YYYY') AS FECHA, LP.INFO_ADICIONAL from sacar.log_publicacion lp  where id_publicacion is not null  and trunc(fecha) between trunc(sysdate - 7) and trunc(sysdate) ",2
"MO - Estadistica - Destaques por hora","MO - Estadistica - Destaques por hora","select * from (  select to_char(horas.hora,'00') hora,           (select count(*) from sacar.cce_cargo where tipo_cargo_id in (2,7) and trunc(generacion) = trunc($P{MO_reporting_filtro_fecha_DATE}) and to_char(generacion,'hh24') = horas.hora) destaques  from   (  select 0 hora from dual  union  select 1 hora from dual  union  select 2 from dual  union  select 3 from dual  union  select 4 from dual  union  select 5 from dual  union  select 6 from dual  union  select 7 from dual  union  select 8 from dual  union  select 9 from dual  union  select 10 from dual  union  select 11 from dual  union  select 12 from dual  union  select 13 from dual  union  select 14 from dual  union  select 15 from dual  union  select 16 from dual  union  select 17 from dual  union  select 18 from dual  union  select 19 from dual  union  select 20 from dual  union  select 21 from dual  union  select 22 from dual  union  select 23 from dual  ) horas  where (to_char(sysdate,'hh24') >= horas.hora or trunc($P{MO_reporting_filtro_fecha_DATE}) <> trunc(sysdate))  union  select 'TOTAL',          (select count(*) from sacar.cce_cargo where tipo_cargo_id in (2,7) and trunc(generacion) = trunc($P{MO_reporting_filtro_fecha_DATE})) destaques  from dual  )  order by 1",2
"MO - Estadistica - Comisiones por hora","MO - Estadistica - Comisiones por hora","select * from  (  select to_char(horas.hora,'00') hora,           (select count(*) from sacar.cce_cargo where tipo_cargo_id = 1 and trunc(generacion) = trunc($P{MO_reporting_filtro_fecha_DATE}) and to_char(generacion,'hh24') = horas.hora) comisiones  from   (  select 0 hora from dual  union  select 1 hora from dual  union  select 2 from dual  union  select 3 from dual  union  select 4 from dual  union  select 5 from dual  union  select 6 from dual  union  select 7 from dual  union  select 8 from dual  union  select 9 from dual  union  select 10 from dual  union  select 11 from dual  union  select 12 from dual  union  select 13 from dual  union  select 14 from dual  union  select 15 from dual  union  select 16 from dual  union  select 17 from dual  union  select 18 from dual  union  select 19 from dual  union  select 20 from dual  union  select 21 from dual  union  select 22 from dual  union  select 23 from dual  ) horas  where (to_char(sysdate,'hh24') >= horas.hora or trunc($P{MO_reporting_filtro_fecha_DATE}) <> trunc(sysdate))  union  select 'TOTAL',          (select count(*) from sacar.cce_cargo where tipo_cargo_id = 1 and trunc(generacion) = trunc($P{MO_reporting_filtro_fecha_DATE})) comisiones  from dual  )  order by 1 ",2
"MO - Estadistica - Publicaciones por hora","MO - Estadistica - Publicaciones por hora","select * from (  select to_char(horas.hora,'00') hora,           (select count(*) from sacar.sac_aviso where av_creado_por = 'WEB' and trunc(av_fecha_creacion) = trunc($P{MO_reporting_filtro_fecha_DATE}) and to_char(av_fecha_creacion,'hh24') = horas.hora) publicaciones   from   (  select 0 hora from dual  union  select 1 hora from dual  union  select 2 from dual  union  select 3 from dual  union  select 4 from dual  union  select 5 from dual  union  select 6 from dual  union  select 7 from dual  union  select 8 from dual  union  select 9 from dual  union  select 10 from dual  union  select 11 from dual  union  select 12 from dual  union  select 13 from dual  union  select 14 from dual  union  select 15 from dual  union  select 16 from dual  union  select 17 from dual  union  select 18 from dual  union  select 19 from dual  union  select 20 from dual  union  select 21 from dual  union  select 22 from dual  union  select 23 from dual  ) horas  where (to_char(sysdate,'hh24') >= horas.hora or trunc($P{MO_reporting_filtro_fecha_DATE}) <> trunc(sysdate))  union  select 'TOTAL',          (select count(*) from sacar.sac_aviso where av_creado_por = 'WEB' and trunc(av_fecha_creacion) = trunc($P{MO_reporting_filtro_fecha_DATE})) publicaciones   from dual  )  order by 1",2
"MO - Usuarios que nunca compraron (filtrados por fechas de registro)","MO - Usuarios que nunca compraron (filtrados por fechas de registro)","select u.usuario_id, u.usu_email, u.usu_apodo, u.usu_nombre, u.usu_apellido, to_char(u.usu_fecha_ingreso,'YYYY-MM-DD') fecha_ingreso, u.usu_cod_area_tel, u.usu_telefono, u.usu_suspendido  from sacar.sac_usuario u  where usu_fecha_ingreso >= $P{MO_reporting_filtro_ingreso_desde_DATE}  and usu_fecha_ingreso <= $P{MO_reporting_filtro_ingreso_hasta_DATE}  and not exists (      select 1      from sacar.sac_movimiento m1      where m1.usuario_id = u.usuario_id   )  and not exists (      select 1      from sacar_h.sac_movimiento_h m2      where m2.usuario_id = u.usuario_id      )",2
"MO - Oper PS500 16hs reducido",ZZ_MO_Oper_PS500_16hs_reducido,"select cargo.id cargo, cargo.monto, to_char(cargo.generacion,'dd/mm/yyyy hh24:mi:ss') generacion, cargo.aviso_id,           cargo.transaccion_id, cargo.aviso_precio, cargo.aviso_cantidad, comprador.usuario_id comprador, comprador.usu_apodo apodo_comprador, comprador.usu_email mail_comprador,          vendedor.usuario_id vendedor, vendedor.usu_apodo apodo_vendedor, vendedor.usu_email mail_vendedor,          DECODE (vendedor.tius_id, 1, 'BK', 2, 'WEB') tuv  from sacar.pgs_operacion operacion, sacar.cce_cargo cargo,       sacar.sac_usuario comprador, sacar.sac_usuario vendedor  where operacion.cargo_id = cargo.id  and operacion.vendedor_id = vendedor.usuario_id  and operacion.comprador_id = comprador.usuario_id  AND cargo.aviso_precio_pesos >= 500  and operacion.generacion >  TO_DATE (to_char(sysdate,'DD/MM/RRRR')||' 08:00','DD/MM/RRRR hh24:mi')  and operacion.generacion <=  TO_DATE (to_char(sysdate,'DD/MM/RRRR')||' 16:00','DD/MM/RRRR hh24:mi')",2
"MO - Log Publicacion - Resumen","MO - Log Publicacion - Resumen","select * from (  select  LP.TIPO_PUBLICACION,           LP.ACCION,           TO_CHAR(((sum(decode( decode(LP.TRANSACCION_OK,'N',1,0), 0, 0, case when decode( accion,'CARGA_FOTO',SUBSTR(REPLACE(REPLACE(INFO_ADICIONAL,'El peso de la imagen es de: ',''),' bytes y la extension es: ',''),1,INSTR(REPLACE(REPLACE(INFO_ADICIONAL,'El peso de la imagen es de: ',''),' bytes y la extension es: ',''),'.')-1),0) < (1024*1024*2) then 1 else 0 end) )/count(*)))*100,'990.99') tasa_error,           count(*) total_observaciones,           TO_CHAR(AVG(LP.DURACION_MS),'99999990.9999') tiempo_promedio_ms    from sacar.log_publicacion lp  where id_publicacion is not null  and trunc(fecha) between trunc(sysdate - 1) and trunc(sysdate)  and tipo_publicacion is not null  group by LP.TIPO_PUBLICACION, LP.ACCION  UNION  select  LP.TIPO_PUBLICACION,           'CARGA_FOTO_MAYOR_TAMAÑO',           TO_CHAR((count(*)/(select count(*) from sacar.log_publicacion lp where id_publicacion is not null and trunc(fecha) between trunc(sysdate - 1) and trunc(sysdate) and tipo_publicacion is not null and accion = 'CARGA_FOTO'))*100,'990.99') tasa_error,           count(*) total_observaciones,           TO_CHAR(AVG(LP.DURACION_MS),'99999990.9999') tiempo_promedio_ms    from sacar.log_publicacion lp  where id_publicacion is not null  and trunc(fecha) between trunc(sysdate - 1) and trunc(sysdate)  and tipo_publicacion is not null  and accion = 'CARGA_FOTO'  AND TRANSACCION_OK = 'N'  AND SUBSTR(REPLACE(REPLACE(INFO_ADICIONAL,'El peso de la imagen es de: ',''),' bytes y la extension es: ',''),1,INSTR(REPLACE(REPLACE(INFO_ADICIONAL,'El peso de la imagen es de: ',''),' bytes y la extension es: ',''),'.')-1) >= 1024*1024*2  group by LP.TIPO_PUBLICACION, LP.ACCION  )  order by 1, 2",2
"MO - CARGOS_ENVIADOS_A_FACTURAR",CARGOS_ENVIADOS_A_FACTURAR,"SELECT       CAR.ID AS CARGO,      LOTE.ID AS LOTE,      LOTE.TIPO_LOTE AS TIPO_LOTE,      LOTE.ESTADO AS LOTE_ESTADO,  CAR.AV_PRODUCTO_ESTADO AS NUEVO_O_USADO,      CUENTA.USUARIO_ID AS USUARIO,      USU.USU_APODO AS USU_APODO,      CUENTA.ID AS CUENTA,      COMP.USUARIO_ID AS COMP_ID,      COMP.USU_APODO AS COMP_APODO,      PROV.PRV_NOMBRE AS COMP_PROV,      TO_CHAR(CAR.GENERACION) AS CARGO_GENERACION,          TO_CHAR(LOTE.GENERACION) AS LOTE_GENERACION,        CAR.MONTO AS CARGO_MONTO,      TRUNC(CAR.MONTO, 2) AS CARGO_MONTO_DOS_DIG,      CAR.AVISO_PRECIO_PESOS AS AVISO_PRECIO_PESOS,      CAR.AVISO_CANTIDAD AS AVISO_CANTIDAD,        LOTE.MONTO AS MONTO_LOTE,      (LOTE.MONTO + nvl(decode(nvl(LOTE.IMP_DEST, 0), 0, LOTE.IMP_PIB1, LOTE.IMP_DEST),0) + nvl(LOTE.IMP_PIB2,0) + nvl(LOTE.IMP_PIVA,0)) AS MONTO_TOTAL_A_FACTURAR,      LOTE.ALI_DEST AS ALICUOTA_DESTAQUE,      LOTE.IMP_DEST AS IMPORTE_DESTAQUE,      LOTE.BAS_DEST AS BASE_IMPONIB_DEST,          LOTE.ALI_PIB1 AS ALICUOTA_CABA,      LOTE.IMP_PIB1 AS IMPORTE_CABA,      LOTE.BAS_PIB1 AS BASE_IMPONIB_CABA,          LOTE.ALI_PIB2 AS ALICUOTA_TUCUMAN,      LOTE.IMP_PIB2 AS IMPORTE_TUCUMAN,      LOTE.BAS_PIB2 AS BASE_IMPONIB_TUCUMAN,          LOTE.ALI_PIVA AS ALICUOTA_IVA,      LOTE.IMP_PIVA AS IMPORTE_IVA,      LOTE.BAS_PIVA AS BASE_IMPONIB_IVA,      LOTE.RESPUESTA_IVA AS RESPUESTA_IVA,      TO_CHAR(LOTE.RESPUESTA_IVA_FECHA) AS RESPUESTA_IVA_FECHA  FROM       SACAR.CCE_LOTE LOTE,       SACAR.CCE_CARGO CAR       LEFT JOIN SACAR.SAC_MOVIMIENTO MOV ON CAR.TRANSACCION_ID = MOV.MOV_ID      LEFT JOIN SACAR.SAC_USUARIO COMP ON MOV.USUARIO_ID = COMP.USUARIO_ID      LEFT JOIN SACAR.SAC_PROVINCIAS PROV ON COMP.PRV_ID = PROV.PRV_ID,         SACAR.CCE_CUENTA CUENTA,      SACAR.SAC_USUARIO USU      WHERE  CUENTA.ID = LOTE.CUENTA_ID  AND LOTE.ENVIO_ESTADO = 'ENVIADO'  AND LOTE.TIPO_LOTE IN ('C','D')   AND LOTE.ID = CAR.LOTE_ID  AND CUENTA.ENVIO_ESTADO = 'RECIBIDO'  AND CUENTA.USUARIO_ID = USU.USUARIO_ID  AND TRUNC(LOTE.ENVIO_FECHA) BETWEEN TRUNC($P{filtro_fecha_desde_LF}) AND TRUNC($P{filtro_fecha_hasta_LF})  ",2
"MO - Estadistica - Registros por hora","MO - Estadistica - Registros por hora","select * from  (  select to_char(horas.hora,'00') hora,           (select count(*) from sacar.sac_usuario where trunc(usu_fecha_ingreso) = trunc($P{MO_reporting_filtro_fecha_DATE}) and to_char(usu_fecha_ingreso,'hh24') = horas.hora) registros   from   (  select 0 hora from dual  union  select 1 hora from dual  union  select 2 from dual  union  select 3 from dual  union  select 4 from dual  union  select 5 from dual  union  select 6 from dual  union  select 7 from dual  union  select 8 from dual  union  select 9 from dual  union  select 10 from dual  union  select 11 from dual  union  select 12 from dual  union  select 13 from dual  union  select 14 from dual  union  select 15 from dual  union  select 16 from dual  union  select 17 from dual  union  select 18 from dual  union  select 19 from dual  union  select 20 from dual  union  select 21 from dual  union  select 22 from dual  union  select 23 from dual  ) horas  where (to_char(sysdate,'hh24') >= horas.hora or trunc($P{MO_reporting_filtro_fecha_DATE}) <> trunc(sysdate))  union  select 'TOTAL',          (select count(*) from sacar.sac_usuario where trunc(usu_fecha_ingreso) = trunc($P{MO_reporting_filtro_fecha_DATE})) registros   from dual  )  order by 1 ",2
"MO - Usuarios que tuvieron listing activo en los ultimos 3 meses","MO - Usuarios que tuvieron listing activo en los ultimos 3 meses","select u.usuario_id, u.usu_apodo, u.usu_email, to_char(u.usu_fecha_ingreso,'YYYY-MM-DD') fecha_ingreso, decode(u.tius_id,2,'Web',1,'Broker','SMS') segmento,      (select c.puntaje from sacar.cal_reputacion c where u.usuario_id = c.usuario_id ) puntaje,      (select c.calificaciones_positivas from sacar.cal_reputacion c where u.usuario_id = c.usuario_id ) calificaciones_positivas,       (select c.calificaciones_negativas from sacar.cal_reputacion c where u.usuario_id = c.usuario_id ) calificaciones_negativas,        ( select count(*) from sacar.sac_aviso a where a.usuario_id = u.usuario_id ) totales,      ( select count(*) from sacar.sac_aviso a where a.usuario_id = u.usuario_id and a.av_estado = 3 ) totales_activos,      ( select count(*) from sacar.sac_aviso a where a.usuario_id = u.usuario_id and a.av_estado <> 3 ) totales_no_activos,      ( select count(*) from sacar.sac_aviso a where av_creado_por = 'WEB' and av_estado = 3 and a.usuario_id = u.usuario_id ) web_activos,      ( select count(*) from sacar.sac_aviso a where av_creado_por = 'WEB' and av_estado <> 3 and a.usuario_id = u.usuario_id ) no_activos,           ( select count(*) from sacar.sac_aviso a where av_creado_por = 'CARGADOR' and a.usuario_id = u.usuario_id ) cargador,      ( select count(*) from sacar.sac_aviso a where av_creado_por = 'CARGADOR' and av_estado = 3 and a.usuario_id = u.usuario_id ) cargador_activos,      ( select count(*) from sacar.sac_aviso a where av_creado_por = 'CARGADOR' and av_estado <> 3 and a.usuario_id = u.usuario_id ) cargador_no_activos,      (      select count(*) from sacar.cce_cargo ca, sacar.cce_cuenta cu       where ca.cuenta_id = cu.id and cu.usuario_id = u.usuario_id       and ca.tipo_cargo_id = 1 and to_char(ca.generacion,'mm-yyyy') = to_char(sysdate-30,'mm-yyyy')       ) ventas_mes1,      (      select count(*) from sacar.cce_cargo ca, sacar.cce_cuenta cu       where ca.cuenta_id = cu.id and cu.usuario_id = u.usuario_id       and ca.tipo_cargo_id = 1 and to_char(ca.generacion,'mm-yyyy') = to_char(sysdate-60,'mm-yyyy')       ) ventas_mes2,      (      select count(*) from sacar.cce_cargo ca, sacar.cce_cuenta cu       where ca.cuenta_id = cu.id and cu.usuario_id = u.usuario_id       and ca.tipo_cargo_id = 1 and to_char(ca.generacion,'mm-yyyy') = to_char(sysdate-90,'mm-yyyy')       ) ventas_mes3,      (      select sum(monto) from sacar.cce_cargo ca, sacar.cce_cuenta cu       where ca.cuenta_id = cu.id and cu.usuario_id = u.usuario_id        and ca.tipo_cargo_id in (2,7) and to_char(ca.generacion,'mm-yyyy') = to_char(sysdate-30,'mm-yyyy')       ) inversion_mes1,      (      select sum(monto) from sacar.cce_cargo ca, sacar.cce_cuenta cu       where ca.cuenta_id = cu.id and cu.usuario_id = u.usuario_id       and ca.tipo_cargo_id in (2,7) and to_char(ca.generacion,'mm-yyyy') = to_char(sysdate-60,'mm-yyyy')       ) inversion_mes2,      (      select sum(monto) from sacar.cce_cargo ca, sacar.cce_cuenta cu       where ca.cuenta_id = cu.id and cu.usuario_id = u.usuario_id       and ca.tipo_cargo_id in (2,7) and to_char(ca.generacion,'mm-yyyy') = to_char(sysdate-90,'mm-yyyy')       ) inversion_mes3              from sacar.sac_usuario u  where exists (      select 1      from sacar.sac_aviso a1      where ( av_estado = 3 or av_fecha_expiracion > (sysdate-90) )      and a1.usuario_id = u.usuario_id      and a1.portal_id = u.portal_id      )  ",2
"MO - Carga de fotos - Detalle","MO - Carga de fotos - Detalle","select  SUBSTR(INFO_ADICIONAL,INSTR(INFO_ADICIONAL,'.')+1,LENGTH(INFO_ADICIONAL)) extension,          case when SUBSTR(REPLACE(REPLACE(INFO_ADICIONAL,'El peso de la imagen es de: ',''),' bytes y la extension es: ',''),1,INSTR(REPLACE(REPLACE(INFO_ADICIONAL,'El peso de la imagen es de: ',''),' bytes y la extension es: ',''),'.')-1) >= 1024*1024*2 then 'LIMITE_SUPERADO' else 'LIMITE_OK' END as peso,          TRANSACCION_OK,          count(*) total_observaciones,           TO_CHAR(AVG(LP.DURACION_MS),'99999990.9999') tiempo_promedio_ms  from sacar.log_publicacion lp  where id_publicacion is not null  and trunc(fecha) between trunc(sysdate - 1) and trunc(sysdate)  and tipo_publicacion is not null  and accion = 'CARGA_FOTO'  group by SUBSTR(INFO_ADICIONAL,INSTR(INFO_ADICIONAL,'.')+1,LENGTH(INFO_ADICIONAL)),          case when SUBSTR(REPLACE(REPLACE(INFO_ADICIONAL,'El peso de la imagen es de: ',''),' bytes y la extension es: ',''),1,INSTR(REPLACE(REPLACE(INFO_ADICIONAL,'El peso de la imagen es de: ',''),' bytes y la extension es: ',''),'.')-1) >= 1024*1024*2 then 'LIMITE_SUPERADO' else 'LIMITE_OK' END,          TRANSACCION_OK  order by 1, 2, 3 ",2
"MO - ARCIBA MENSUAL",MO_ARCIBA_MENSUAL,"select       lo.tipo_lote,      to_char(trunc(LO.ENVIO_FECHA)) as fecha_envio_presea,      lo.tipo_comprobante,      lo.codigo_factura as nro_comprobante,      lo.ali_dest as percep_destaque,      lo.bas_dest as base_destaque,      LO.IMP_DEST as importe_destaque,      lo.ali_pib1 as percep_comision,      lo.bas_pib1 as base_comision,      LO.IMP_PIB1 as importe_comision,      DF.NRO_DOCUMENTO as cuit,      US.USUARIO_ID as usuario_id,      US.USU_APODO as apodo,      decode(nvl(ii.agente_percepcion, 'AR'), 'AR', '', 'AR') as AR,      decode(nvl(sim.percepcion, 99), 99, '', 'RS') as RS,      decode(tipo_lote , 'D'          ,decode(ali_dest, 3, '16', decode(ali_dest, 2,decode(decode(nvl(sim.percepcion, 99), 99, '', 'RS') , 'RS' , '18' , '14') , '14'))           ,decode(ali_pib1, 3, '24', decode(ali_pib1, 1.5, '23', '18'))) as codigo_norma     from sacar.cce_lote lo,       sacar.cce_cuenta cu,      sacar.sac_usuario us,      SACAR.CCE_DATOS_FACTURACION df,      SACAR.CCE_ALTO_RIESGO_IIBB ii,      SACAR.CCE_REGIMEN_SIMPLIFICADO sim  where lo.estado = 'FACTURADO'       and trunc(lo.envio_fecha, 'MONTH') = trunc($P{CC_fecha}, 'MONTH')      and lo.tipo_comprobante in ('FCB', 'FCA')       and (lo.ali_dest is not null or lo.ali_pib1 is not null)      and LO.CUENTA_ID = CU.ID      and CU.USUARIO_ID = US.USUARIO_ID      and US.USUARIO_ID = DF.USUARIO_ID (+)      and DF.NRO_DOCUMENTO = II.CUIT (+)      and DF.NRO_DOCUMENTO = SIM.CUIT (+)      and (0= decode($P{GC_filtro_apodo_PROD},'Ingresar Apodo',0,1) or us.usu_APODO = $P{GC_filtro_apodo_PROD})      and (0=decode($P{GC_filtro_id_usuario_PROD},0,0,1) or us.usuario_id=to_number($P{GC_filtro_id_usuario_PROD}))      and (0= decode($P{ARCIBA_CUIT},'Ingresar cuit',0,1) or DF.NRO_DOCUMENTO = $P{ARCIBA_CUIT})      and (0= decode($P{ARCIBA_NRO_COMPROBANTE},'Ingresar nro comprobante',0,1) or lo.codigo_factura = $P{ARCIBA_NRO_COMPROBANTE})  order by lo.tipo_lote asc, nro_comprobante asc",2
"MO - Moderacion - Avisos con video de ayer","MO - Moderacion - Avisos con video de ayer","SELECT usu.usu_apodo||'  |  '||'http://www.masoportunidades.com.ar/aviso/' || av.av_id || '-' avisos_con_video    FROM SACAR.sac_aviso av, SACAR.sac_usuario usu   WHERE TRUNC (av.actualizacion) = TRUNC (SYSDATE)     AND av.av_creado_por NOT IN                      ('CARGADOR', 'REPUBLICACION_MASIVA_POPUP', 'MIG BROKERS')     AND av.av_estado = 3     AND av.av_url_video IS NOT NULL     AND av.usuario_id = usu.usuario_id",2
"MO - Republicacion de Avisos del Dia Anterior - adaptado","OR-Republicacion de Avisos del Dia Anterior - adaptado",,2
"MO - Facturacion_Tipo_Lote - Resumen","MO - Facturacion_Tipo_Lote - Resumen","select       CL.tipo_lote,   cue.tipo_cliente,      sum(CL.MONTO) as monto,       sum(decode(IMP_DEST, null, 0 ,IMP_DEST) + decode(IMP_PIB1, null, 0 ,IMP_PIB1) + decode(IMP_PIB2, null, 0 ,IMP_PIB2) + decode(IMP_PIVA, null, 0 ,IMP_PIVA)) as percepcion,      sum(CL.MONTO) + sum(decode(IMP_DEST, null, 0 ,IMP_DEST) + decode(IMP_PIB1, null, 0 ,IMP_PIB1) + decode(IMP_PIB2, null, 0 ,IMP_PIB2) + decode(IMP_PIVA, null, 0 ,IMP_PIVA)) as total   from sacar.cce_lote CL, sacar.erp_movimiento em, (select cu.id,   DECODE (cu.tipo_cliente_codigo,  'BROKER', 'GV',  'WEB'     ) AS tipo_cliente  from SACAR.cce_cuenta cu  where cu.tipo_cliente_codigo IN (  --seleccionamos del indice el valor del parametro  SELECT val    FROM (  --la columna ind es el valor del parametro y val lo que representa  SELECT 'Indistinto' AS ind, 'FIDEDIGNO' AS val    FROM DUAL  UNION  SELECT 'Indistinto' AS ind, 'PARTICULAR' AS val    FROM DUAL  UNION  SELECT 'Indistinto' AS ind, 'BROKER' AS val    FROM DUAL  UNION  SELECT 'Indistinto' AS ind, 'CERTIFICADO' AS val    FROM DUAL  UNION  SELECT 'Web' AS ind, 'FIDEDIGNO' AS val    FROM DUAL  UNION  SELECT 'Web' AS ind, 'PARTICULAR' AS val    FROM DUAL  UNION  SELECT 'Web' AS ind, 'CERTIFICADO' AS val    FROM DUAL  UNION  SELECT 'Broker' AS ind, 'BROKER' AS val    FROM DUAL)   WHERE ind = $P{GC_filtro_tipo_usuario_PROD})) cue  where CL.estado = 'FACTURADO'  and CL.tipo_lote in ('C','D','B')  and CL.CODIGO_FACTURA = EM.NUMERO_COMPROBANTE and CL.TIPO_COMPROBANTE = EM.SUBTIPO_COMPROBANTE                          and (trunc(EM.FECHA_MOVIMIENTO) between trunc($P{filtro_fecha_desde_FTL}) and trunc($P{filtro_fecha_hasta_FTL}))  AND cl.CUENTA_ID = cue.id  group by cl.tipo_lote, cue.tipo_cliente  ORDER BY tipo_lote, tipo_cliente",2
"MO - Log - Carga tarifario cliente","MO - Log - Carga tarifario cliente","select  SUBSTR(INFO_ADICIONAL,                 INSTR(INFO_ADICIONAL,':')+1,                 INSTR(INFO_ADICIONAL,'|')-(INSTR(INFO_ADICIONAL,':')+1)                 ) soporta_javascript,           SUBSTR(INFO_ADICIONAL,                 INSTR(INFO_ADICIONAL,'|')+1,                 INSTR(INFO_ADICIONAL,'|',INSTR(INFO_ADICIONAL,'|')+1)-(INSTR(INFO_ADICIONAL,'|')+1)) resolucion,          SUBSTR(INFO_ADICIONAL,                 INSTR(INFO_ADICIONAL,'|',INSTR(INFO_ADICIONAL,'|')+1)+1,                 INSTR(INFO_ADICIONAL,'|',INSTR(INFO_ADICIONAL,'|',INSTR(INFO_ADICIONAL,'|')+1)+1)-(INSTR(INFO_ADICIONAL,'|',INSTR(INFO_ADICIONAL,'|')+1)+1)) so,          SUBSTR(INFO_ADICIONAL,                 INSTR(INFO_ADICIONAL,'|',INSTR(INFO_ADICIONAL,'|',INSTR(INFO_ADICIONAL,'|')+1)+1)+1,                 INSTR(INFO_ADICIONAL,'|',INSTR(INFO_ADICIONAL,'|',INSTR(INFO_ADICIONAL,'|',INSTR(INFO_ADICIONAL,'|')+1)+1)+1)-(INSTR(INFO_ADICIONAL,'|',INSTR(INFO_ADICIONAL,'|',INSTR(INFO_ADICIONAL,'|')+1)+1)+1)) browser,          SUBSTR(INFO_ADICIONAL,                 INSTR(INFO_ADICIONAL,'|',INSTR(INFO_ADICIONAL,'|',INSTR(INFO_ADICIONAL,'|',INSTR(INFO_ADICIONAL,'|')+1)+1)+1)+1                 ) err,          TRANSACCION_OK, count(*) cantidad_operaciones, count(distinct id_usuario) cantidad_usuarios, avg(duracion_ms) duracion_promedio    from sacar.log_publicacion lp  where accion in ('CARGA_TARIFARIO_CLIENTE')  and id_publicacion is not null  and trunc(fecha) between trunc(sysdate - 30) and trunc(sysdate)  and tipo_publicacion is not null  group by SUBSTR(INFO_ADICIONAL,                 INSTR(INFO_ADICIONAL,':')+1,                 INSTR(INFO_ADICIONAL,'|')-(INSTR(INFO_ADICIONAL,':')+1)                 ),           SUBSTR(INFO_ADICIONAL,                 INSTR(INFO_ADICIONAL,'|')+1,                 INSTR(INFO_ADICIONAL,'|',INSTR(INFO_ADICIONAL,'|')+1)-(INSTR(INFO_ADICIONAL,'|')+1)),          SUBSTR(INFO_ADICIONAL,                 INSTR(INFO_ADICIONAL,'|',INSTR(INFO_ADICIONAL,'|')+1)+1,                 INSTR(INFO_ADICIONAL,'|',INSTR(INFO_ADICIONAL,'|',INSTR(INFO_ADICIONAL,'|')+1)+1)-(INSTR(INFO_ADICIONAL,'|',INSTR(INFO_ADICIONAL,'|')+1)+1)) ,          SUBSTR(INFO_ADICIONAL,                 INSTR(INFO_ADICIONAL,'|',INSTR(INFO_ADICIONAL,'|',INSTR(INFO_ADICIONAL,'|')+1)+1)+1,                 INSTR(INFO_ADICIONAL,'|',INSTR(INFO_ADICIONAL,'|',INSTR(INFO_ADICIONAL,'|',INSTR(INFO_ADICIONAL,'|')+1)+1)+1)-(INSTR(INFO_ADICIONAL,'|',INSTR(INFO_ADICIONAL,'|',INSTR(INFO_ADICIONAL,'|')+1)+1)+1)) ,          SUBSTR(INFO_ADICIONAL,                 INSTR(INFO_ADICIONAL,'|',INSTR(INFO_ADICIONAL,'|',INSTR(INFO_ADICIONAL,'|',INSTR(INFO_ADICIONAL,'|')+1)+1)+1)+1                 ) ,          TRANSACCION_OK",2
"MO - compradores por ciudad","MO - compradores por ciudad",,2
"MO - vendedores por ciudad","MO - vendedores por ciudad",,2
"BAC - Controles - Pagos enviados que no figuran en ERP_MOVIMIENTO","Controles - Pagos enviados que no figuran en ERP_MOVIMIENTO","select * from (
select cc.id_usuario, pdm.id_pago, pdm.id_cliente,
date_format(ep.fecha_pago,'%d/%m/%Y') dm_fecha,
        pdm.estado, ep.importe_pago,
         pdm.envio_erp_estado, date_format(pdm.envio_erp_fecha,'%d/%m/%Y') fecha_envio_ERP,
         date_format(pdm.generacion,'%d/%m/%Y') generacion, date_format(pdm.actualizacion,'%d/%m/%Y') actualizacion, date_format(ep.FECHA_ENVIO, '%d/%m/%Y') fecha_envio_interfaz, ep.TXT_ENVIO, ep.TXT_RESPUESTA
from cce_pago pdm, cce_cliente c, cce_usuario_cliente cc, erp_pago ep
where pdm.id_CLIENTE = c.id_cliente
and c.id_cliente = cc.id_cliente
and ( ep.id_portal =  $P{bac_portal_fac} or ($P{bac_portal_fac} = 0 and ep.id_portal in (select id_portal
from bac_portal where notifica_facturador = 'Y')))
and pdm.id_pago=ep.id_pago
and pdm.envio_erp_estado = 'ENVIADO'
and ep.TXT_RESPUESTA is not null
and pdm.estado = 'ACREDITADO'
and date_format(pdm.actualizacion, '%Y/%m/%d') <= curdate()
and not exists (
    select 1
    from erp_movimiento m
    where m.id_cliente = cc.id_cliente
    and m.tipo_movimiento = 'C'
    and m.tipo_cuenta_corriente = 'MO'
    and pdm.id_pago = m.id_pago
)
) aux';",4
"BAC - Controles - Pagos sin respuesta de Presea","Controles - Pagos sin respuesta de Presea","select * from (  select id_cliente, id_pago, id_medio_pago,  date_format(fecha_pago,'%d/%m/%Y') fecha_pago,          importe_pago, moneda, codigo_gateway, codigo_autorizacion, codigo_cupon,            date_format(fecha_envio,'%d/%m/%Y') fecha_envio, txt_envio, txt_respuesta  ,case (select count(*) from erp_cliente c where p.id_cliente = c.id_cliente and codigo_respuesta = 'OK')      when 0 then 'NO ENVIADO'     else 'ENVIADO'  end as ClientePresea  from erp_pago p  where txt_respuesta is null  and txt_envio is not null  and ( p.id_portal = $P{bac_portal_fac} or ($P{bac_portal_fac} = 0 and p.id_portal in (select id_portal  from bac_portal where notifica_facturador = 'Y')))  ) aux",4
"BAC - Controles - Usuarios enviados a Presea que nunca volvieron con OK","Controles - Usuarios enviados a Presea que nunca volvieron con OK","select * from (  select c.login, t1.id_cliente, t1.id_portal portal, date_format(fecha_envio,'%d/%m/%Y') fecha_envio, txt_envio, txt_respuesta  from erp_cliente t1, cce_usuario c, cce_usuario_cliente uc, bac_portal p  where c.id_usuario = uc.id_usuario  and t1.id_cliente = uc.id_cliente   and t1.id_portal=uc.id_portal and ( t1.id_portal = $P{Copy_bac_portal} or $P{Copy_bac_portal} = 0)  and t1.id_cliente_facturador is null  and p.id_portal = t1.id_portal  and p.notifica_facturador = 'Y'  and t1.txt_envio is not null  ) aux",4
"BAC - Devengamiento - Detalle","BAC-Devengamiento - Detalle","select * from (
SELECT bac_producto.nombre as ""Producto"",
cce_devengamiento.devengamiento_mes as ""Mes"",
cce_devengamiento.devengamiento_anio as ""Año"",
cce_devengamiento.cargo_monto as ""Monto total"",
cce_devengamiento.devengamiento_monto as ""Monto Devengado"",
cce_devengamiento.producto_medida as ""Medida Total"",
cce_devengamiento.devengamiento_medida as ""Medida Devengada"",
cce_usuario.login as ""Login"",
cce_usuario.id_usuario as ""Id Usuario""
FROM cce_devengamiento
LEFT JOIN cce_cargo ON cce_devengamiento.id_cargo = cce_cargo.id_cargo
LEFT JOIN bac_producto ON cce_cargo.id_producto = bac_producto.id_producto
LEFT JOIN cce_usuario_cliente ON cce_cargo.id_cliente = cce_usuario_cliente.id_cliente
LEFT JOIN cce_usuario ON cce_usuario_cliente.id_usuario = cce_usuario.id_usuario
WHERE 0=0
AND (0=if($P{Copy_bac_mes2}='0',0,1) or devengamiento_mes=$P{Copy_bac_mes2})
AND (0=if($P{Copy_bac_año}='0',0,1) or devengamiento_anio=$P{Copy_bac_año})
AND (0=if($P{Copy_bac_producto}='0',0,1) or bac_producto.id_producto=$P{Copy_bac_producto})
) aux;",4
"BAC - Devengamiento - Resumen","BAC-Devengamiento - Resumen","select * from (
SELECT bac_producto.nombre as ""Producto"",
cce_devengamiento.devengamiento_mes as ""Mes"",
cce_devengamiento.devengamiento_anio as ""Año"",
SUM(cce_devengamiento.devengamiento_monto) as ""Monto Devengado"",
SUM(cce_devengamiento.devengamiento_medida) as ""Medida Devengada""
FROM cce_devengamiento
LEFT JOIN cce_cargo ON cce_devengamiento.id_cargo = cce_cargo.id_cargo
LEFT JOIN bac_producto ON cce_cargo.id_producto = bac_producto.id_producto
WHERE 0=0
and ( bac_producto.id_portal = $P{Copy_bac_portal} or $P{Copy_bac_portal} = 0)
AND (0=if($P{Copy_bac_mes2}='0',0,1) or devengamiento_mes=$P{Copy_bac_mes2})
AND (0=if($P{Copy_bac_año}='0',0,1) or devengamiento_anio=$P{Copy_bac_año})
AND (0=if($P{Copy_bac_producto_dependiente_portal}='0',0,1) or bac_producto.id_producto=$P{Copy_bac_producto_dependiente_portal})
GROUP BY cce_devengamiento.devengamiento_anio, cce_devengamiento.devengamiento_mes, bac_producto.id_producto, bac_producto.nombre
) aux;",4
"BAC - Configuracion - Procesos","Configuracion de los horarios de los procesos","select nombre,descripcion,frecuencia,scheduling from bac_procesos",4
"BAC - Pines - Consumos Resumido","Pines - Consumos Resumido","select * from (  select t.cantidad_pines cantidad_pines_comprados, count(*) cantidad_usuarios  from  (  select usu.id_usuario, count(*) cantidad_pines  from sdp_pin p, cce_usuario usu  where p.id_usuario = usu.id_usuario  and p.id_estado_pin=2  group by usu.id_usuario  order by 2 desc  ) t  group by t.cantidad_pines  order by 1 desc  ) aux",4
"BAC - Pines - Ventas por día (administración)","Pines - Ventas por día (administración)","select * from (  select date_format(p.actualizacion,'%Y-%m-%d') dia, usu.NOMBRE usuario, i.nombre_carrier carrier ,r.DESCRIPCION producto,  count(*) cantidad,   if(usu.nombre='CLAWI S.A.',0,r.precio_venta) precio_unitario,(if(usu.nombre='CLAWI S.A.',0,r.precio_venta)*count(*)) as bruto, bm.nombre  from sdp_pin p, sdp_paquete a, cce_usuario usu, bac_producto r, bac_carriers i, bac_moneda bm  where p.id_estado_pin=2  and p.ID_PAQUETE = a.ID_PAQUETE  and a.ID_USUARIO = usu.ID_USUARIO  and a.ID_PRODUCTO = r.ID_PRODUCTO  and a.ID_CARRIER = i.ID_CARRIER  and bm.id_moneda = r.id_moneda  and date_format(p.actualizacion, '%Y-%m-%d') >= $P{bac_desde}  and date_format(p.actualizacion, '%Y-%m-%d') <= $P{bac_hasta}  group by date_format(p.actualizacion,'%Y-%m-%d') , usu.NOMBRE, i.nombre_carrier, r.DESCRIPCION, r.precio_venta  union  select 'TOTAL' dia, usu.NOMBRE usuario, i.nombre_carrier carrier ,r.DESCRIPCION producto,  count(*) cantidad,   if(usu.nombre='CLAWI S.A.',0,r.precio_venta) precio_unitario,(if(usu.nombre='CLAWI S.A.',0,r.precio_venta)*count(*)) as bruto, bm.nombre  from sdp_pin p, sdp_paquete a, cce_usuario usu, bac_producto r, bac_carriers i, bac_moneda bm  where p.id_estado_pin = 2  and p.ID_PAQUETE = a.ID_PAQUETE  and a.ID_USUARIO = usu.ID_USUARIO  and a.ID_PRODUCTO = r.ID_PRODUCTO  and a.ID_CARRIER = i.ID_CARRIER  and bm.id_moneda = r.id_moneda  and date_format(p.actualizacion, '%Y-%m-%d') >= $P{bac_desde}  and date_format(p.actualizacion, '%Y-%m-%d') <= $P{bac_hasta}  group by usu.NOMBRE, i.nombre_carrier, r.DESCRIPCION, r.precio_venta  order by 1, 2 desc  ) aux",4
"BAC - Envio Mails - Pagos acreditados a MG en el día ","Pagos acreditados a MG en el día ","select p.id_pago, p.monto_final, p.id_moneda, p.estado,          date_format(p.generacion,'%Y-%m-%d %H:%i:%s') generacion_pago,          date_format(p.generacion,'%Y-%m-%d') generacion_a_dia_cerrado,          date_format(p.actualizacion,'%Y-%m-%d %H:%i:%s') actualizacion_pago,          date_format(p.actualizacion,'%Y-%m-%d') actualizacion_a_dia_cerrado,          date_format(pdm.fecha,'%Y-%m-%d') fecha_conciliacion,          CASE pdm.medio_pago WHEN 'Pago F¿cil' THEN 'Pago Facil' WHEN 'Pago Fácil' THEN 'Pago Facil' ELSE  pdm.medio_pago END medio_pago,          p.id_pago_portal,          usu.id_usuario, usu.id_portal, usu.id_usuario_portal,          ( select ec.id_cliente_facturador from erp_cliente ec where ec.id_cliente = p.id_cliente and ec.id_portal = p.id_portal ) id_cliente_facturador,          usu.id_tipo_usuario, usu.login, usu.email, date_format(usu.generacion,'%Y-%m-%d') alta_usuario,          'DM' gateway  from cce_pago p, cce_usuario usu, cce_pago_dm pdm  where usu.id_usuario = p.id_usuario  and p.id_pago = pdm.id_pago  and p.id_portal = 1  and ( p.estado in ('ACREDITADO')  )  and date(pdm.actualizacion) >= date(now())  UNION  select p.id_pago, p.monto_final, p.id_moneda, p.estado,          date_format(p.generacion,'%Y-%m-%d %H:%i:%s') generacion_pago,          date_format(p.generacion,'%Y-%m-%d') generacion_a_dia_cerrado,          date_format(p.actualizacion,'%Y-%m-%d %H:%i:%s') actualizacion_pago,          date_format(p.actualizacion,'%Y-%m-%d') actualizacion_a_dia_cerrado,          date_format(pnps.pos_date_time,'%Y-%m-%d') fecha_conciliacion,          mp.nombre medio_pago,          p.id_pago_portal,          usu.id_usuario, usu.id_portal, usu.id_usuario_portal,          ( select ec.id_cliente_facturador from erp_cliente ec where ec.id_cliente = p.id_cliente and ec.id_portal = p.id_portal ) id_cliente_facturador,          usu.id_tipo_usuario, usu.login, usu.email, date_format(usu.generacion,'%Y-%m-%d') alta_usuario,          'NPS' gateway  from cce_pago p, cce_usuario usu, cce_pago_nps pnps, bac_medio_pago mp  where usu.id_usuario = p.id_usuario  and p.id_pago = pnps.id_pago  and p.id_portal = 1  and p.id_medio_pago = mp.id_medio_pago  and ( p.estado in ('ACREDITADO')  )  and date(pnps.actualizacion) >= date(now())  ",4
"BAC - Cuenta Corriente - Mercado Pago montos y cantidades por estado de pagos","Cuenta Corriente - Mercado Pago montos y cantidades por estado de pagos por producto","SELECT p.id_portal, p.estado, pmp.estado_pago_gateway, pmp.status, pmp.status_description, p.id_moneda, SUM(p.monto_final) as monto_total, COUNT(*) AS total  FROM cce_pago_mp pmp, cce_pago p  WHERE pmp.id_pago = p.id_pago  GROUP BY p.id_portal,p.estado, pmp.estado_pago_gateway, pmp.status, pmp.status_description, p.id_moneda",4
"BAC - Cuenta Corriente - Listado de Ventas por producto","Cuenta Corriente - Listado de Ventas por producto","select * from (  select p.id_producto Producto, p.codigo_facturacion Codigo_Facturacion, p.nombre Nombre, p.cuenta_contable Cuenta_Contable, p.centro_beneficios Centro_Beneficios,m.nombre Moneda, c.monto_parcial Precio_Unitario, sum(c.monto_final) Monto_Final,  round(c.cotizacion,8) tipo_cambio,  round(sum(c.monto_final) * c.cotizacion,2) Monto_Final_$  from cce_cargo c, bac_producto p, bac_moneda m  where c.estado='EN_LOTE' and c.id_producto = p.id_producto  and c.id_moneda=m.id_moneda  and ( p.id_portal = $P{Copy_bac_portal} or $P{Copy_bac_portal} = 0 )  and date_format(c.actualizacion, '%Y-%m-%d') between $P{bac_desde} and $P{bac_hasta}  group by p.id_producto, p.nombre, p.cuenta_contable, p.centro_beneficios, m.nombre, c.monto_parcial, round(c.cotizacion,8)  ) aux",4
"BAC - Log - Mails enviados","Log - Mails enviados","select id_mail_registro, de, para, cc, cco, asunto, template_id, mail_estado_id, usuario_id, tipo, reenvios, to_char(fecha_alta,'YYYY-MM-DD HH24:mi:ss') fecha_alta, to_char(fecha_modif,'YYYY-MM-DD HH24:mi:ss') fecha_envio, see_image, click_link  from MAIL_REGISTRO  ",4
"BAC - Pines - Consumos","Pines - Consumos","select usu.id_usuario, usu.id_usuario_portal, usu.login, usu.email, count(*) cantidad  from sdp_pin p, cce_usuario usu  where p.id_usuario = usu.id_usuario  and p.id_estado_pin = 2 and usu.id_portal=1  group by usu.id_usuario, usu.id_usuario_portal, usu.login, usu.email  order by 5 desc",4
"BAC - Pines - Estados de pines por retailer","Pines - Estados de pines por retailer","select * from (  select usu.nombre usuario, e.nombre estado, count(*) as cantidad  from sdp_pin p, sdp_pin_estado e, sdp_paquete a, cce_usuario usu  where p.id_estado_pin = e.id_pin_estado  and p.id_paquete = a.id_paquete  and a.id_usuario = usu.id_usuario  group by usu.nombre, e.nombre  order by 1, 2  ) aux",4
"BAC - Pines - Exportacion de pines","Pines - Exportacion de pines para Excel","select * from (  select p.id_paquete, p.id_pin, concat(  substr(convert(p.codigo,char),1,4), '-',   substr(convert(p.codigo, char),5,4), '-',  substr(convert(p.codigo, char),9,4),'-',   substr(convert(p.codigo, char),13,4)  ) codigo  from sdp_pin p  where p.id_paquete = $P{sdp_paquete}   order by p.id_paquete, p.id_pin  ) aux",4
"BAC - Pines - Historia de un paquete","Pines - Historia de un paquete","select * from (  select h.id_paquete_estado_historico orden, id_paquete, pe.nombre estado, m.NOMBRE motivo, observaciones,         date_format(h.generacion,'%Y-%m-%d') generacion   from sdp_paquete_estado_historico h, sdp_paquete_estado pe, sdp_paquete_motivo m  where h.id_paquete_estado = pe.ID_PAQUETE_ESTADO  and h.id_paquete_motivo = m.ID_PAQUETE_MOTIVO  and id_paquete = $P{sdp_paquete}  ) aux",4
"BAC - Pines - Historia de un pin","Pines - Historia de un pin","select * from (  select h.id_pin_estado_historico orden, p.id_pin, ep.nombre estado_pin, h.activo, date_format(h.generacion,'%Y-%m-%d %H:%i:%s') generacion    from sdp_pin_estado_historico h, sdp_pin_estado ep, sdp_pin p  where p.codigo = $P{sdp_pin}  and h.ID_ESTADO_PIN = ep.ID_PIN_ESTADO  and h.id_pin = p.id_pin  order by id_pin_estado_historico desc  ) aux",4
"BAC - Cuenta Corriente - Resumen de Pagos","Cuenta Corriente - Resumen de Pagos por portal","select * from (  select portal.nombre portal, date_format(p.actualizacion,'%Y-%m') actualizacion_pago, pais.nombre pais_Usuario, g.descripcion gateway, mp.nombre medio_pago, m.nombre moneda, SUM(p.monto_final) total, COUNT(*) cantidad_pagos  from cce_pago p, bac_moneda m, bac_gateway g, bac_medio_pago mp, cce_usuario u, bac_pais pais, bac_portal portal  where p.estado='ACREDITADO'  and m.id_moneda = p.id_moneda  and g.id_gateway = p.id_gateway  and mp.id_medio_pago = p.id_medio_pago  and u.id_usuario = p.id_usuario  and pais.id_pais = u.id_pais  and p.id_portal = portal.id_portal  and ( u.id_pais = $P{Copy_bac_pais} or $P{Copy_bac_pais} = 0 )  and ( p.id_portal = $P{Copy_bac_portal} or $P{Copy_bac_portal} = 0 )  and ( p.id_gateway = $P{bac_gateway_todos} or $P{bac_gateway_todos} = 0 )  and ( p.id_medio_pago = $P{bac_medio_pago_todos} or $P{bac_medio_pago_todos} = 0 )  and date(p.actualizacion) >= $P{bac_desde}  and date(p.actualizacion) <= $P{bac_hasta}  group by portal.nombre, date_format(p.actualizacion,'%Y-%m') desc,pais.nombre, g.descripcion, mp.nombre, m.nombre  )aux",4
"BAC - Configuraciones - Portales","Configuraciones - Portales","SELECT ID_PORTAL, NOMBRE  FROM bac_portal",4
"BAC - Pines - Listado de paquetes por retailer","Pines - Listado de paquetes por retailer","select * from (  select p.id_paquete, pe.NOMBRE estado, usu.NOMBRE, p.descuento, prod.id_producto, prod.nombre producto,           convert(p.precio_venta, char) precio_venta, m.nombre moneda, cantidad_pines, convert(p.medida, char) medida, p.unidad_medida,  p.ID_CARRIER, ca.NOMBRE_CARRIER,          date_format(p.fecha_desde,'%Y-%m-%d') vigencia_desde,           date_format(p.fecha_vencimiento,'%Y-%m-%d') vigencia_hasta,           date_format(p.generacion,'%Y-%m-%d') generacion,           date_format(p.actualizacion,'%Y-%m-%d') actualizacion,           date_format(p.fecha_baja,'%Y-%m-%d') fecha_baja,          obs.DESCRIPCION observaciones  from sdp_paquete p, sdp_paquete_estado pe, cce_usuario usu, bac_producto prod, bac_moneda m, bac_carriers ca, sdp_pkt_observaciones obs  where 1=1  and p.id_paquete_estado = pe.ID_PAQUETE_ESTADO  and p.id_usuario = usu.id_usuario  and p.id_producto = prod.id_producto  and p.id_moneda = m.id_moneda  and p.id_carrier = ca.id_carrier  and p.id_observaciones = obs.ID_PKT_OBSERVACIONES  and (p.id_usuario = $P{Copy_bac_retailer} OR $P{Copy_bac_retailer} = 0)  and (p.id_paquete = $P{sdp_paquete} OR $P{sdp_paquete} = 0 )  and (p.id_paquete_estado = $P{Copy_sdp_paquete_estado} or $P{Copy_sdp_paquete_estado} = 0 )  ) aux",4
"BAC - Configuraciones - Monedas","Configuraciones - Monedas","select ID_MONEDA, NOMBRE,      date_format(c.generacion,'%Y-%m-%d') generacion,      date_format(c.actualizacion,'%Y-%m-%d') actualizacion,      date_format(c.baja,'%Y-%m-%d') baja    from bac_moneda c",4
"BAC - Log - Errores en el quemado de pines","Log - Errores en el quemado de pines","select id, id_usuario, id_usuario_portal, codigo_pin, date_format(generacion,'%Y-%m-%d %H:%i:%s') generacion, error  from sdp_pin_errores  where date_format(generacion, '%Y-%m-%d') >= $P{bac_desde}  and date_format(generacion, '%Y-%m-%d') <= $P{bac_hasta}  ",4
"BAC - Log - Business Exceptions","Log - Business Exceptions","select id, clase, metodo, parametros, usuario, date_format(fecha,'%Y-%m-%d %H:%i:%s') fecha  from log  where date_format(fecha,'%Y-%m-%d') >= $P{bac_desde}  and date_format(fecha, '%Y-%m-%d') <= $P{bac_hasta}",4
"BAC - Log - Procesos","Log - Procesos","select id_gnr_log, to_char(fecha_generacion,'YYYY-MM-DD HH24:mi:ss') fecha_generacion, ejecucion, proceso, objeto_tipo, objeto_id, nivel, texto  from BAC_GNR_LOG  where ( proceso = $P{bac_gnr_log_proceso} or $P{bac_gnr_log_proceso} = 'TODOS' )  and ( nivel = $P{bac_gnr_log_nivel} or $P{bac_gnr_log_nivel} = 'TODOS' )  and ( objeto_tipo = $P{bac_gnr_log_objeto_tipo} or $P{bac_gnr_log_objeto_tipo} = 'TODOS' )  and trunc(fecha_generacion)>=$P{bac_desde}  and trunc(fecha_generacion)<=$P{bac_hasta}",4
"BAC - Pines - Listado de pines","Pines - Listado de pines","select * from (  select retailer.login retailer, p.id_pin, ep.nombre estado_pin, p.id_paquete, pae.nombre estado_paquete, convert(p.codigo,char) codigo,           date_format(p.generacion,'%Y-%m-%d') generacion,           date_format(p.actualizacion,'%Y-%m-%d') actualizacion,          date_format(p.baja,'%Y-%m-%d') baja,          concat(usu.Apellido, ' ', usu.Nombre) cliente_consumidor  from sdp_pin p  inner join sdp_pin_estado ep on p.id_estado_pin = ep.ID_PIN_ESTADO  inner join sdp_paquete q on p.id_paquete = q.id_paquete  inner join sdp_paquete_estado pae on q.ID_PAQUETE_ESTADO = pae.ID_PAQUETE_ESTADO  inner join cce_usuario retailer on q.ID_USUARIO = retailer.id_usuario  left join cce_usuario usu on p.id_usuario = usu.id_usuario  where  ( q.id_usuario = $P{Copy_bac_retailer} or $P{Copy_bac_retailer} = 0 )  and ( p.codigo = $P{sdp_pin} or $P{sdp_pin} =0 )  and ( p.id_paquete = $P{sdp_paquete} or $P{sdp_paquete} =0 )  and (usu.id_usuario = $P{cce_cliente} or $P{cce_cliente}  = 0 )  ) aux",4
"BAC - Pines - Listado de retailes","Pines - Listado de retailers","select id_usuario, login, email, descuento, nombre, apellido, domicilio, telefono  from cce_usuario  where ( id_portal = $P{Copy_bac_portal} OR $P{Copy_bac_portal} = 0 )  and id_tipo_usuario = 2  ",4
"BAC - Pines - Ventas por día","Pines - Ventas por día","select * from (  select 'TOTAL' as dia, usu.NOMBRE usuario, r.DESCRIPCION producto, count(*) cantidad  from sdp_pin p, sdp_paquete a, cce_usuario usu, bac_producto r  where p.id_estado_pin=2  and p.ID_PAQUETE = a.ID_PAQUETE  and a.ID_USUARIO = usu.ID_USUARIO  and a.ID_PRODUCTO = r.ID_PRODUCTO  group by 1, usu.NOMBRE, r.DESCRIPCION  union  select convert(date_format(p.actualizacion,'%Y-%m-%d'), char) dia, usu.NOMBRE usuario, r.DESCRIPCION producto, count(*) cantidad  from sdp_pin p, sdp_paquete a, cce_usuario usu, bac_producto r  where p.id_estado_pin=2  and p.ID_PAQUETE = a.ID_PAQUETE  and a.ID_USUARIO = usu.ID_USUARIO  and a.ID_PRODUCTO = r.ID_PRODUCTO  group by convert(date_format(p.actualizacion,'%Y-%m-%d'), char), usu.NOMBRE, r.DESCRIPCION  order by 1, 2 desc  ) aux",4
"BAC - Productos - Lista de precios","Productos - Lista de precios","select * from (  select p.id_producto, p.nombre producto, lp.precio_venta precio_venta, m.nombre moneda, date_format(vigencia_desde,'%Y-%m-%d %H:%i:%s') vigencia_desde,          date_format(vigencia_hasta,'%Y-%m-%d %H:%i:%s') vigencia_hasta  from bac_producto_lista_precio lp, bac_producto p, bac_moneda m  where lp.id_producto = p.id_producto  and lp.id_moneda = m.id_moneda  and ( p.id_portal = $P{Copy_bac_portal} or $P{Copy_bac_portal} = 0)  and ( lp.id_producto = $P{Copy_bac_producto_dependiente_portal} or $P{Copy_bac_producto_dependiente_portal} = 0)  order by vigencia_desde desc  ) aux",4
"BAC - Usuarios - Listado de usuarios","Usuarios - Listado de usuarios","select id,username,enabled,email  from bac_users  ",4
"BAC - Configuraciones - IVA","Configuraciones - IVA","select ID_IVA, PORCENTAJE,      date_format(c.vigencia_desde,'%Y-%m-%d') vigencia_desde,      date_format(c.vigencia_hasta,'%Y-%m-%d') vigencia_hasta,      date_format(c.generacion,'%Y-%m-%d') generacion,      date_format(c.actualizacion,'%Y-%m-%d') actualizacion,      date_format(c.baja,'%Y-%m-%d') baja   from bac_iva c",4
"BAC - Configuraciones - Paises","Configuraciones - Paises","select * from (  select pais.id_pais, pais.nombre pais  from bac_pais pais  ) aux  ",4
"BAC - Configuraciones - Procesos croneados","Configuraciones - Procesos croneados","select id_proceso, nombre, descripcion, date_format(inicio,'%Y-%m-%d') inicio, frecuencia, clase, scheduling, date_format(generacion,'%Y-%m-%d') generacion,  date_format(actualizacion,'%Y-%m-%d') actualizacion,  date_format(baja,'%Y-%m-%d') baja  from bac_procesos  ",4
"BAC - Configuraciones - Productos","Configuraciones - Productos","select * from (  select prod.id_producto, portal.NOMBRE portal, prod.nombre, prod.descripcion,           prod.precio_venta precio_venta, moneda.NOMBRE moneda, prod.medida medida, prod.unidad_medida,           prod.codigo_facturacion, prod.cuenta_contable, prod.centro_beneficios, date_format(precio.VIGENCIA_DESDE, '%Y-%m-%d') as Vigente_desde, date_format(precio.VIGENCIA_HASTA, '%Y-%m-%d') as Vigente_hasta  from bac_producto prod, bac_portal portal, bac_moneda moneda, bac_producto_lista_precio precio  where prod.ID_PORTAL = portal.ID_PORTAL  and prod.ID_MONEDA = moneda.ID_MONEDA  and prod.id_producto = precio.id_producto  ) aux",4
"BAC - Configuraciones - Tipos de clientes","Configuraciones - Tipos de clientes","select id_tipo_usuario, nombre, date_format(generacion,'%Y-%m-%d') generacion, date_format(actualizacion,'%Y-%m-%d') actualizacion,   date_format(baja,'%Y-%m-%d') baja  from  cce_tipo_usuario",4
"BAC - Controles - Cargos sin respuesta de Presea","Controles - Cargos sin respuesta de Presea","select * from (  SELECT id_cliente,          id_cargo,          date_format(fecha_cargo, '%d-%m-%Y') fecha_cargo,          descripcion,          m.nombre moneda,          precio_final,          id_lote,          tipo_lote,          date_format(fecha_cierre_lote, '%d-%m-%Y') fecha_cierre_lote,          id_movimiento,         c.id_portal,         txt_envio,          txt_respuesta     FROM erp_cargo c, bac_moneda m    WHERE      c.txt_respuesta IS NULL      and c.txt_envio IS NOT NULL      and c.id_moneda = m.id_moneda      and ( c.id_portal = $P{Copy_bac_portal} or $P{Copy_bac_portal} = 0 )  ) aux",4
"BAC - Configuraciones - Mail Templates","Configuraciones - Mail Templates","select id_mail_template, descripcion, descripcion_amigable, prioridad, de, asunto, alias, tipo, sub_template  from mail_templates  ",4
"BAC - Clientes - Listado de clientes","Clientes - Listado de clientes","select * from (  select c.id_usuario, p.nombre portal, c.id_usuario_portal, usucli.id_cliente_facturador, t.nombre tipo_usuario, c.login, c.email, c.descuento,      c.nombre, c.apellido, c.domicilio, c.codigo_postal,       pais.nombre pais, prov.nombre provincia, c.telefono,      cliente.estado estado_cuenta,      date_format(c.generacion,'%Y-%m-%d') generacion,      date_format(c.actualizacion,'%Y-%m-%d') actualizacion,      date_format(c.baja,'%Y-%m-%d') baja  from cce_usuario c, bac_portal p, cce_tipo_usuario t, bac_pais pais, bac_provincia prov, cce_cliente cliente, cce_usuario_cliente usucli  where c.ID_PORTAL = p.ID_PORTAL  and c.ID_TIPO_USUARIO = t.ID_TIPO_USUARIO  and c.id_pais = pais.id_pais  and c.id_provincia = prov.id_provincia  and c.id_usuario = usucli.id_usuario and c.id_portal = usucli.id_portal and usucli.id_cliente = cliente.id_cliente  and ( c.id_portal = $P{Copy_bac_portal} or $P{Copy_bac_portal} = 0 )  and ( c.id_tipo_usuario = $P{Copy_cce_tipo_cliente} or $P{Copy_cce_tipo_cliente} = 0 )  and ( c.id_provincia = $P{Copy_bac_provincia} or $P{Copy_bac_provincia} = 0 )  and ( c.id_usuario = $P{cce_cliente} or $P{cce_cliente} = 0 )  and ( c.id_usuario_portal = $P{cce_usuario_portal} or $P{cce_usuario_portal} = 0 )  and ( cliente.estado = $P{Copy_bac_estado_cuenta} or $P{Copy_bac_estado_cuenta} = 'TODOS' )  ) aux",4
"BAC - Configuraciones - Carriers","Configuraciones - Carriers","select id_carrier, nombre_carrier, descripcion_carrier, date_format(generacion,'%Y-%m-%d') generacion  from bac_carriers",4
"BAC - Configuraciones - Condicion ante el IVA","Configuraciones - Condicion ante el IVA","select ID_CONDICION_IVA, CONDICION_IVA_IDENTIFICADOR, CONDICION, VISIBLE,      date_format(c.generacion,'%Y-%m-%d') generacion,      date_format(c.actualizacion,'%Y-%m-%d') actualizacion,      date_format(c.baja,'%Y-%m-%d') baja   from cce_condicion_iva c",4
"BAC - Configuraciones - Empresas","Configuraciones - Empresas","SELECT ID_EMPRESA, NOMBRE  FROM bac_empresa",4
"BAC - Configuraciones - Estados de paquetes de pines","Configuraciones - Estados de paquetes de pines","select id_paquete_estado, nombre, descripcion, manual, activo, date_format(generacion,'%Y-%m-%d') generacion   from sdp_paquete_estado",4
"BAC - Configuraciones - Estados de pines","Configuraciones - Estados de pines","select id_pin_estado, nombre, descripcion, activo, facturable, date_format(generacion,'%Y-%m-%d') generacion  from sdp_pin_estado  ",4
"BAC - Configuraciones - Mail Estados","Configuraciones - Mail Estados","select ID_MAIL_ESTADO, DESCRIPCION, INTENTOS, FRECUENCIA  from mail_estados",4
"BAC - Configuraciones - Provincias","Configuraciones - Provincias","select id_provincia, prov.nombre, pais.id_pais, pais.nombre pais  from bac_provincia prov, bac_pais pais  where prov.id_pais = pais.id_pais",4
"BAC - Cuenta Corriente - Listado de cargos","Cuenta Corriente - Listado de cargos","select * from (  select usu.id_usuario, usu.id_portal, usu.id_usuario_portal, usu.login, usu.email,          c.id_cargo, c.id_lote, c.id_comprobante_portal, c.descripcion, round(c.cantidad) cantidad, c.monto_final,          m.nombre moneda, c.estado, c.id_pago,  c.tipo_resp_iva_cliente, lot.comprobante_tipo, lot.comprobante_numero,          date_format(c.generacion,'%Y-%m-%d %H:%i:%s') generacion,          date_format(c.actualizacion,'%Y-%m-%d %H:%i:%s') actualizacion,          date_format(c.baja,'%Y-%m-%d %H:%i:%s') baja,          usu.id_pais, usu.localidad, usu.nombre, usu.apellido, usu.codigo_postal, usu.domicilio, usu.telefono  from cce_cargo c, bac_producto p, bac_moneda m, cce_usuario_cliente uc, cce_usuario usu, cce_lote lot, erp_cargo er  where c.id_producto = p.id_producto  and c.id_moneda = m.id_moneda  and c.id_cliente = uc.id_cliente  and uc.id_usuario = usu.id_usuario  and c.id_lote = lot.id_lote  and ( er.id_portal = $P{Copy_bac_portal} or $P{Copy_bac_portal} = 0 )  and ( uc.id_usuario = $P{cce_cliente} or $P{cce_cliente} = 0 )  and ( usu.id_usuario_portal = $P{cce_usuario_portal} or $P{cce_usuario_portal} = 0 )  and (c.estado = $P{Copy_cce_estado_cargo} or $P{Copy_cce_estado_cargo} = 'TODOS' )  and c.generacion between $P{bac_desde} and $P{bac_hasta}  and ( ($P!{cce_tipo_producto}) = 0 or (p.id_producto in ($P!{cce_tipo_producto}) ) )  and c.id_cargo=er.id_cargo  ) aux      ",4
"BAC - Controles - Cargos enviados que no figuran en ERP_MOVIMIENTO","Controles - Cargos enviados que no figuran en ERP_MOVIMIENTO","select * from (  select c.id_cargo, c.id_producto, p.nombre producto,          c.id_cliente, cc.id_usuario, c.id_lote, c.monto_final,          date_format(l.generacion,'%Y-%m-%d') as generacion_lote,         date_format(c.generacion,'%Y-%m-%d') as generacion_cargo,         date_format(c.actualizacion,'%Y-%m-%d') as actualizacion_cargo,          c.estado,          date_format(fecha_cierre_lote,'%Y-%m-%d') as fecha_cierre_lote,          e.codigo_respuesta,          e.txt_envio,         e.txt_respuesta  from cce_cargo c, erp_cargo e, cce_lote l, bac_producto p, cce_usuario_cliente cc  where c.id_cargo = e.id_cargo  and c.id_lote = l.id_lote  and c.id_producto = p.id_producto  and c.ID_CLIENTE = cc.ID_CLIENTE  and l.generacion >= $P{bac_desde}  and l.generacion <= $P{bac_hasta}  and (p.id_portal = $P{bac_portal_fac} or $P{bac_portal_fac} = 0)  and l.COMPROBANTE_NUMERO is null  and l.estado <> 'ANULADO'  and txt_respuesta is not null  ) aux;",4
"BAC - Controles - Usuarios con mas de 1 pago en el dia","Usuarios con mas de un pago acreditado, generado en el mismo dia","select * from (  select u.id_portal portal, u.id_usuario_portal usuarioPortal, u.id_usuario usuario, u.login login, u.email email, p.id_cliente cliente, date_format(p.generacion,'%Y-%m-%d') generacion, g.descripcion gateway, count(*) cantidad  from cce_pago p, cce_usuario u, bac_gateway g  where p.estado = 'ACREDITADO'  and p.id_usuario = u.id_usuario  and p.id_gateway=g.id_gateway  and ( p.id_portal = $P{Copy_bac_portal} or $P{Copy_bac_portal} = 0 )  and ( p.id_gateway = $P{bac_gateway_todos} or $P{bac_gateway_todos} = 0   )  and date(p.generacion) >= $P{bac_desde}  and date(p.generacion) <= $P{bac_hasta}  group by u.id_portal , u.id_usuario_portal , u.id_usuario , u.login , u.email , p.id_cliente , date_format(p.generacion,'%Y-%m-%d') , g.descripcion  having count(*) >1  )aux  ;",4
"BAC - Cuenta Corriente - Listado de pagos con mas parametros ","Cuenta Corriente - Listado de pagos","SELECT p.id_pago,
        o.id_producto,
        CONCAT(o.nombre,' - ',o.descripcion) producto,
        ROUND(p.monto_final * p.cotizacion,2) monto_$ARG, p.monto_final, p.id_moneda, p.estado, NULL AS status_description,
        DATE_FORMAT(p.generacion,'%Y-%m-%d %H:%i:%s') generacion_pago,
        DATE_FORMAT(p.generacion,'%Y-%m-%d') generacion_a_dia_cerrado,
        DATE_FORMAT(p.actualizacion,'%Y-%m-%d %H:%i:%s') actualizacion_pago,
        DATE_FORMAT(p.actualizacion,'%Y-%m-%d') actualizacion_a_dia_cerrado,
        DATE_FORMAT(pdm.actualizacion,'%Y-%m-%d') fecha_conciliacion,
        CASE p.id_gateway WHEN 100 THEN '---' ELSE  pdm.medio_pago END medio_pago,
        p.id_pago_portal,
        usu.id_usuario, usu.id_portal, usu.id_usuario_portal, p.id_cliente, ec.id_cliente_facturador,
        p.comprobante_tipo, p.comprobante_numero,
        usu.id_tipo_usuario, usu.login, usu.email, usu.id_pais, a.nombre pais, DATE_FORMAT(usu.generacion,'%Y-%m-%d') alta_usuario,
        /*
        ( select m.comprobante_numero from cce_cargo c, erp_movimiento m where c.id_pago = p.id_pago and c.id_lote = m.id_lote ) factura_numero,
        ( select m.comprobante_tipo from cce_cargo c, erp_movimiento m where c.id_pago = p.id_pago and c.id_lote = m.id_lote ) factura_tipo,
        */
        g.descripcion gateway
FROM cce_pago p, cce_usuario usu, cce_pago_dm pdm, bac_gateway g, cce_cargo c, bac_producto o, bac_pais a, erp_cliente ec
WHERE usu.id_usuario = p.id_usuario
AND p.id_pago = c.id_pago
AND c.id_producto = o.id_producto
AND ec.id_cliente = p.id_cliente
AND usu.id_pais = a.id_pais
AND p.id_pago = pdm.id_pago
AND p.id_gateway = g.id_gateway
AND p.id_gateway = $P{Copy_bac_gateway}
AND ( usu.id_portal = $P{Copy_bac_portal} OR $P{Copy_bac_portal} = 0 )
AND ec.id_portal=usu.id_portal
AND ( usu.id_usuario_portal = $P{cce_usuario_portal} OR $P{cce_usuario_portal} = 0 )
AND ( p.estado IN ($P!{Copy_cce_estado_pago})  )
AND CASE WHEN $P{bac_tipo_fecha} = 1 THEN DATE(pdm.fecha)
         WHEN $P{bac_tipo_fecha} = 2 THEN DATE(p.generacion)
         ELSE DATE(pdm.actualizacion) END
    >= $P{bac_desde}
AND CASE WHEN $P{bac_tipo_fecha} = 1 THEN DATE(pdm.fecha)
         WHEN $P{bac_tipo_fecha} = 2 THEN DATE(p.generacion)
         ELSE DATE(pdm.actualizacion) END
    <= $P{bac_hasta}
UNION
SELECT p.id_pago,
        o.id_producto,
        CONCAT(o.nombre,' - ',o.descripcion) producto,
        ROUND(p.monto_final * p.cotizacion,2) monto_$ARG, p.monto_final, p.id_moneda, p.estado, NULL AS status_description,
        DATE_FORMAT(p.generacion,'%Y-%m-%d %H:%i:%s') generacion_pago,
        DATE_FORMAT(p.generacion,'%Y-%m-%d') generacion_a_dia_cerrado,
        DATE_FORMAT(p.actualizacion,'%Y-%m-%d %H:%i:%s') actualizacion_pago,
        DATE_FORMAT(p.actualizacion,'%Y-%m-%d') actualizacion_a_dia_cerrado,
        DATE_FORMAT(pnps.pos_date_time,'%Y-%m-%d') fecha_conciliacion,
        mp.nombre medio_pago,
        p.id_pago_portal,
        usu.id_usuario, usu.id_portal, usu.id_usuario_portal, p.id_cliente, ec.id_cliente_facturador,
        p.comprobante_tipo, p.comprobante_numero,
        usu.id_tipo_usuario, usu.login, usu.email, usu.id_pais, a.nombre pais, DATE_FORMAT(usu.generacion,'%Y-%m-%d') alta_usuario,
        /*
        ( select m.comprobante_numero from cce_cargo c, erp_movimiento m where c.id_pago = p.id_pago and c.id_lote = m.id_lote ) factura_numero,
        ( select m.comprobante_tipo from cce_cargo c, erp_movimiento m where c.id_pago = p.id_pago and c.id_lote = m.id_lote ) factura_tipo,
        */
        g.descripcion gateway
FROM cce_pago p, cce_usuario usu, cce_pago_nps pnps, bac_medio_pago mp, bac_gateway g, cce_cargo c, bac_producto o, bac_pais a, erp_cliente ec
WHERE usu.id_usuario = p.id_usuario
AND p.id_pago = c.id_pago
AND c.id_producto = o.id_producto
AND usu.id_pais = a.id_pais
AND p.id_pago = pnps.id_pago
AND p.id_medio_pago = mp.id_medio_pago
AND p.id_gateway = g.id_gateway
AND ec.id_cliente = p.id_cliente 
AND p.id_gateway =  $P{Copy_bac_gateway}
AND ( usu.id_portal = $P{Copy_bac_portal} OR $P{Copy_bac_portal} = 0 )
AND ec.id_portal=usu.id_portal
AND ( usu.id_usuario_portal = $P{cce_usuario_portal} OR $P{cce_usuario_portal} = 0 )
AND ( p.estado IN ($P!{Copy_cce_estado_pago})  )
AND CASE WHEN $P{bac_tipo_fecha} = 1 THEN DATE(pnps.pos_date_time)
         WHEN $P{bac_tipo_fecha} = 2 THEN DATE(p.generacion)
         ELSE DATE(pnps.actualizacion) END
    >= $P{bac_desde}
AND CASE WHEN $P{bac_tipo_fecha} = 1 THEN DATE(pnps.pos_date_time)
         WHEN $P{bac_tipo_fecha} = 2 THEN DATE(p.generacion)
         ELSE DATE(pnps.actualizacion) END
    <= $P{bac_hasta}
UNION
SELECT p.id_pago,
        o.id_producto,
        CONCAT(o.nombre,' - ',o.descripcion) producto,
        ROUND(p.monto_final * p.cotizacion,2) monto_$ARG, p.monto_final, p.id_moneda, p.estado, pmp.status_description,
        DATE_FORMAT(p.generacion,'%Y-%m-%d %H:%i:%s') generacion_pago,
        DATE_FORMAT(p.generacion,'%Y-%m-%d') generacion_a_dia_cerrado,
        DATE_FORMAT(p.actualizacion,'%Y-%m-%d %H:%i:%s') actualizacion_pago,
        DATE_FORMAT(p.actualizacion,'%Y-%m-%d') actualizacion_a_dia_cerrado,
        DATE_FORMAT(pmp.actualizacion,'%Y-%m-%d') fecha_conciliacion,
        pmp.payment_method medio_pago,
        p.id_pago_portal,
        usu.id_usuario, usu.id_portal, usu.id_usuario_portal, p.id_cliente, ec.id_cliente_facturador,
        p.comprobante_tipo, p.comprobante_numero,
        usu.id_tipo_usuario, usu.login, usu.email, usu.id_pais, a.nombre pais, DATE_FORMAT(usu.generacion,'%Y-%m-%d') alta_usuario,
        /*
        ( select m.comprobante_numero from cce_cargo c, erp_movimiento m where c.id_pago = p.id_pago and c.id_lote = m.id_lote ) factura_numero,
        ( select m.comprobante_tipo from cce_cargo c, erp_movimiento m where c.id_pago = p.id_pago and c.id_lote = m.id_lote ) factura_tipo,
        */
        g.descripcion gateway
FROM cce_pago p, cce_usuario usu, cce_pago_mp pmp, bac_gateway g, cce_cargo c, bac_producto o, bac_pais a, erp_cliente ec
WHERE usu.id_usuario = p.id_usuario
AND p.id_pago = pmp.id_pago
AND p.id_pago = c.id_pago
AND c.id_producto = o.id_producto
AND usu.id_pais = a.id_pais
AND p.id_gateway = g.id_gateway
AND ec.id_cliente = p.id_cliente
AND p.id_gateway = $P{Copy_bac_gateway}
AND ( usu.id_portal = $P{Copy_bac_portal} OR $P{Copy_bac_portal} = 0 )
AND ec.id_portal=usu.id_portal
AND ( usu.id_usuario_portal = $P{cce_usuario_portal} OR $P{cce_usuario_portal} = 0 )
AND ( p.estado IN ($P!{Copy_cce_estado_pago})  )
AND CASE WHEN $P{bac_tipo_fecha} = 1 THEN DATE(pmp.actualizacion)
         WHEN $P{bac_tipo_fecha} = 2 THEN DATE(p.generacion)
         ELSE DATE(pmp.actualizacion) END
    >= $P{bac_desde}
AND CASE WHEN $P{bac_tipo_fecha} = 1 THEN DATE(pmp.actualizacion)
         WHEN $P{bac_tipo_fecha} = 2 THEN DATE(p.generacion)
         ELSE DATE(pmp.actualizacion) END
    <= $P{bac_hasta}
UNION
SELECT p.id_pago,
        o.id_producto,
        CONCAT(o.nombre,' - ',o.descripcion) producto,
        ROUND(p.monto_final * p.cotizacion,2) monto_$ARG, p.monto_final, p.id_moneda, p.estado, NULL AS status_description,
        DATE_FORMAT(p.generacion,'%Y-%m-%d %H:%i:%s') generacion_pago,
        DATE_FORMAT(p.generacion,'%Y-%m-%d') generacion_a_dia_cerrado,
        DATE_FORMAT(p.actualizacion,'%Y-%m-%d %H:%i:%s') actualizacion_pago,
        DATE_FORMAT(p.actualizacion,'%Y-%m-%d') actualizacion_a_dia_cerrado,
        DATE_FORMAT(ppsc.actualizacion,'%Y-%m-%d') fecha_conciliacion,
        '---',
        p.id_pago_portal,
        usu.id_usuario, usu.id_portal, usu.id_usuario_portal, p.id_cliente, ec.id_cliente_facturador,
        p.comprobante_tipo, p.comprobante_numero,
        usu.id_tipo_usuario, usu.login, usu.email, usu.id_pais, a.nombre pais, DATE_FORMAT(usu.generacion,'%Y-%m-%d') alta_usuario,
        /*
        ( select m.comprobante_numero from cce_cargo c, erp_movimiento m where c.id_pago = p.id_pago and c.id_lote = m.id_lote ) factura_numero,
        ( select m.comprobante_tipo from cce_cargo c, erp_movimiento m where c.id_pago = p.id_pago and c.id_lote = m.id_lote ) factura_tipo,
        */
        g.descripcion gateway
FROM cce_pago p, cce_usuario usu, cce_pago_psc ppsc, bac_gateway g, cce_cargo c, bac_producto o, bac_pais a, erp_cliente ec
WHERE usu.id_usuario = p.id_usuario
AND p.id_pago = ppsc.id_pago
AND p.id_pago = c.id_pago
AND c.id_producto = o.id_producto
AND usu.id_pais = a.id_pais
AND p.id_gateway = g.id_gateway
AND ec.id_cliente = p.id_cliente
AND p.id_gateway = $P{Copy_bac_gateway}
AND ( usu.id_portal = $P{Copy_bac_portal} OR $P{Copy_bac_portal} = 0 )
AND ec.id_portal=usu.id_portal
AND ( usu.id_usuario_portal = $P{cce_usuario_portal} OR $P{cce_usuario_portal} = 0 )
AND ( p.estado IN ($P!{Copy_cce_estado_pago})  )
AND CASE WHEN $P{bac_tipo_fecha} = 1 THEN DATE(ppsc.actualizacion)
         WHEN $P{bac_tipo_fecha} = 2 THEN DATE(p.generacion)
         ELSE DATE(ppsc.actualizacion) END
    >= $P{bac_desde}
AND CASE WHEN $P{bac_tipo_fecha} = 1 THEN DATE(ppsc.actualizacion)
         WHEN $P{bac_tipo_fecha} = 2 THEN DATE(p.generacion)
         ELSE DATE(ppsc.actualizacion) END
    <= $P{bac_hasta}    
UNION
SELECT p.id_pago,
        o.id_producto,
        CONCAT(o.nombre,' - ',o.descripcion) producto,
        ROUND(p.monto_final * p.cotizacion,2) monto_$ARG, p.monto_final, p.id_moneda, p.estado, NULL AS status_description,
        DATE_FORMAT(p.generacion,'%Y-%m-%d %H:%i:%s') generacion_pago,
        DATE_FORMAT(p.generacion,'%Y-%m-%d') generacion_a_dia_cerrado,
        DATE_FORMAT(p.actualizacion,'%Y-%m-%d %H:%i:%s') actualizacion_pago,
        DATE_FORMAT(p.actualizacion,'%Y-%m-%d') actualizacion_a_dia_cerrado,
        '---' fecha_conciliacion,
        '---',
        p.id_pago_portal,
        usu.id_usuario, usu.id_portal, usu.id_usuario_portal, p.id_cliente, ec.id_cliente_facturador,
        p.comprobante_tipo, p.comprobante_numero,
        usu.id_tipo_usuario, usu.login, usu.email, usu.id_pais, a.nombre pais, DATE_FORMAT(usu.generacion,'%Y-%m-%d') alta_usuario,
        /*
        ( select m.comprobante_numero from cce_cargo c, erp_movimiento m where c.id_pago = p.id_pago and c.id_lote = m.id_lote ) factura_numero,
        ( select m.comprobante_tipo from cce_cargo c, erp_movimiento m where c.id_pago = p.id_pago and c.id_lote = m.id_lote ) factura_tipo,
        */
        g.descripcion gateway
FROM cce_pago p, cce_usuario usu, bac_gateway g, cce_cargo c, bac_producto o, bac_pais a, erp_cliente ec
WHERE usu.id_usuario = p.id_usuario
AND p.id_pago = c.id_pago
AND c.id_producto = o.id_producto
AND usu.id_pais = a.id_pais
AND p.id_gateway = g.id_gateway
AND ec.id_cliente = p.id_cliente
AND p.id_gateway = $P{Copy_bac_gateway} and p.id_gateway=200
AND ( usu.id_portal = $P{Copy_bac_portal} OR $P{Copy_bac_portal} = 0 )
AND ec.id_portal=usu.id_portal
AND ( usu.id_usuario_portal = $P{cce_usuario_portal} OR $P{cce_usuario_portal} = 0 )
AND ( p.estado IN ($P!{Copy_cce_estado_pago})  )
AND CASE WHEN $P{bac_tipo_fecha} = 1 THEN DATE(p.actualizacion)
         WHEN $P{bac_tipo_fecha} = 2 THEN DATE(p.generacion)
         ELSE DATE(p.actualizacion) END
    >= $P{bac_desde}
AND CASE WHEN $P{bac_tipo_fecha} = 1 THEN DATE(p.actualizacion)
         WHEN $P{bac_tipo_fecha} = 2 THEN DATE(p.generacion)
         ELSE DATE(p.actualizacion) END
    <= $P{bac_hasta} 
;",4
"Mundo Gaturro - Pagos acreditados a MG en el día","Pagos acreditados a MG en el día ","select p.id_pago, p.monto_final, p.id_moneda, p.estado,          date_format(p.generacion,'%Y-%m-%d %H:%i:%s') generacion_pago,          date_format(p.generacion,'%Y-%m-%d') generacion_a_dia_cerrado,          date_format(p.actualizacion,'%Y-%m-%d %H:%i:%s') actualizacion_pago,          date_format(p.actualizacion,'%Y-%m-%d') actualizacion_a_dia_cerrado,          date_format(pdm.fecha,'%Y-%m-%d') fecha_conciliacion,          CASE pdm.medio_pago WHEN 'Pago F¿cil' THEN 'Pago Facil' WHEN 'Pago Fácil' THEN 'Pago Facil' ELSE  pdm.medio_pago END medio_pago,          p.id_pago_portal,          usu.id_usuario, usu.id_portal, usu.id_usuario_portal,          ( select ec.id_cliente_facturador from erp_cliente ec where ec.id_cliente = p.id_cliente and ec.id_portal = p.id_portal) id_cliente_facturador,          usu.id_tipo_usuario, usu.login, usu.email, date_format(usu.generacion,'%Y-%m-%d') alta_usuario,          'DM' gateway, p.id_gateway  from cce_pago p, cce_usuario usu, cce_pago_dm pdm  where usu.id_usuario = p.id_usuario  and p.id_pago = pdm.id_pago  and p.id_portal = 1  and ( p.estado in ('ACREDITADO')  )  and date(pdm.actualizacion) >= date($P{bac_desde})  and date(pdm.actualizacion) <= date($P{bac_hasta})  UNION  select p.id_pago, p.monto_final, p.id_moneda, p.estado,          date_format(p.generacion,'%Y-%m-%d %H:%i:%s') generacion_pago,          date_format(p.generacion,'%Y-%m-%d') generacion_a_dia_cerrado,          date_format(p.actualizacion,'%Y-%m-%d %H:%i:%s') actualizacion_pago,          date_format(p.actualizacion,'%Y-%m-%d') actualizacion_a_dia_cerrado,          date_format(pnps.pos_date_time,'%Y-%m-%d') fecha_conciliacion,          mp.nombre medio_pago,          p.id_pago_portal,          usu.id_usuario, usu.id_portal, usu.id_usuario_portal,          ( select ec.id_cliente_facturador from erp_cliente ec where ec.id_cliente = p.id_cliente and ec.id_portal = p.id_portal) id_cliente_facturador,          usu.id_tipo_usuario, usu.login, usu.email, date_format(usu.generacion,'%Y-%m-%d') alta_usuario,          'NPS' gateway, p.id_gateway  from cce_pago p, cce_usuario usu, cce_pago_nps pnps, bac_medio_pago mp  where usu.id_usuario = p.id_usuario  and p.id_pago = pnps.id_pago  and p.id_portal = 1  and p.id_medio_pago = mp.id_medio_pago  and ( p.estado in ('ACREDITADO')  )  and date(pnps.actualizacion) >= date($P{bac_desde})  and date(pnps.actualizacion) <= date($P{bac_hasta})  ",4
"VXV - videos-de-un-usuario-micrositios",VXV-videos-de-un-usuario-micrositios,"select v.id_video, u.nickname ,v.upload_date, v.title, v.status
from videos v, users u
where v.id_user =  $P{VXV-usuarios-micrositios}
and v.id_user = u.id_user
order by v.id_video DESC
limit 100;",6
"VXV - prueba de update","VXV-prueba de update","update videos set modified_timestamp = current_timestamp() where id_video = 2195186;",6
"VXV - Estado de los videos de un usuario","VXV - Estado de los videos de un usuario","SELECT u.nickname, ce.timestamp_start, SUBSTR(v.title,1,30) AS TITLE, ce.id_event, ce.status , ce.tmp_file, ce.id_user, ce.try, ce.timestamp_change_status, ce.encoding_error_code, 
CONCAT('/filervideos01/data/tmp/upload/', SUBSTR(MD5(id_event),1,2),'/' , SUBSTR(MD5(id_event),3,2), '/', SUBSTR(MD5(id_event),5,2),'/', MD5(id_event))  AS Path_Upload, ce.hash,  v.id_video
FROM users u INNER JOIN content_event ce ON  u.id_user = ce.id_user 
LEFT OUTER JOIN video_details vd ON ce.id_event = vd.id_content_event
LEFT OUTER JOIN videos v ON v.id_video = vd.id_video
ORDER BY id_event DESC
LIMIT 40;
",6
"Mublet - reporte-diario","Mublet - Indicadores por día","SELECT   DATE_FORMAT(login.fecha, '%y/%m/%d') AS fecha,  login.Ultimo_Login,  mubs.cant_mubs,  activados.cant_nuevos_activados,  geo.cant_nuevos_geolocalizados,  
       (SELECT     COUNT(xx.guid) AS cant   FROM    elgg_entities xx  WHERE xx.TYPE = 'user' AND xx.site_guid = 1   AND DATE(FROM_UNIXTIME(xx.time_created)) <= login.fecha     LIMIT 7) users_mublet,
       (SELECT     COUNT(xx.guid) AS cant   FROM    elgg_entities xx  WHERE xx.TYPE = 'user' AND xx.site_guid <> 1  AND DATE(FROM_UNIXTIME(xx.time_created)) <= login.fecha   LIMIT 7) users_tyc

FROM 
	(SELECT     DATE(FROM_UNIXTIME(last_login)) AS Fecha,    COUNT(guid) AS Ultimo_Login
	FROM    elgg_users_entity   GROUP BY DATE(FROM_UNIXTIME(last_login))   ORDER BY DATE(FROM_UNIXTIME(last_login)) DESC   LIMIT 7) login 

LEFT OUTER JOIN 
(SELECT DATE(FROM_UNIXTIME(posted)) AS Fecha, COUNT(id) AS Cant_Mubs 
FROM elgg_river     GROUP BY DATE(FROM_UNIXTIME(posted))     ORDER BY DATE(FROM_UNIXTIME(posted)) DESC     LIMIT 7) mubs 
ON login.fecha = mubs.fecha 

LEFT OUTER JOIN 
(SELECT DATE(FROM_UNIXTIME(time_created)) AS Fecha,COUNT(guid) AS Cant_nuevos_Activados 
FROM elgg_entities WHERE TYPE = 'user' GROUP BY DATE(FROM_UNIXTIME(time_created)) ORDER BY DATE(FROM_UNIXTIME(time_created)) DESC LIMIT 7) activados 
ON login.fecha = activados.fecha 

LEFT OUTER JOIN 
(SELECT DATE(FROM_UNIXTIME(time_created)) AS Fecha,COUNT(DISTINCT (guid)) AS Cant_nuevos_Geolocalizados 
FROM elgg_user_locations GROUP BY DATE(FROM_UNIXTIME(time_created)) ORDER BY DATE(FROM_UNIXTIME(time_created)) DESC LIMIT 7) geo 
ON login.fecha = geo.fecha 

GROUP BY fecha 
LIMIT 7 
UNION

SELECT login.fecha, login.Ultimo_Login, mubs.cant_mubs, activados.cant_nuevos_activados, geo.cant_nuevos_geolocalizados, NULL AS  users_mublet, NULL AS users_tyc
FROM 
(SELECT DATE_FORMAT(FROM_UNIXTIME(last_login),'%x - W:%v') AS Fecha,COUNT(username) AS Ultimo_Login
FROM elgg_users_entity GROUP BY DATE_FORMAT(FROM_UNIXTIME(last_login),'%x - W:%v') ORDER BY DATE_FORMAT(FROM_UNIXTIME(last_login),'%x - W:%v') DESC LIMIT 4 ) login 

LEFT OUTER JOIN 
(SELECT DATE_FORMAT(FROM_UNIXTIME(posted ),'%x - W:%v') AS Fecha, COUNT(id) AS Cant_Mubs
FROM elgg_river GROUP BY DATE_FORMAT(FROM_UNIXTIME(posted ),'%x - W:%v') ORDER BY DATE_FORMAT(FROM_UNIXTIME(posted ),'%x - W:%v') DESC LIMIT 4	) mubs
ON login.fecha = mubs.fecha

LEFT OUTER JOIN 
(SELECT DATE_FORMAT(FROM_UNIXTIME(time_created),'%x - W:%v') AS Fecha,COUNT(guid) AS Cant_nuevos_Activados
FROM elgg_entities  WHERE TYPE='user' GROUP BY DATE_FORMAT(FROM_UNIXTIME(time_created),'%x - W:%v') ORDER BY DATE_FORMAT(FROM_UNIXTIME(time_created),'%x - W:%v') DESC LIMIT 4 ) activados
ON login.fecha = activados.fecha

LEFT OUTER JOIN 
(SELECT DATE_FORMAT(FROM_UNIXTIME(time_created),'%x - W:%v ') AS Fecha,COUNT(DISTINCT(guid)) AS Cant_nuevos_Geolocalizados
FROM elgg_user_locations   GROUP BY  DATE_FORMAT(FROM_UNIXTIME(time_created),'%x - W:%v ') ORDER BY DATE_FORMAT(FROM_UNIXTIME(time_created),'%x - W:%v ') DESC LIMIT 4) geo
ON login.fecha = geo.fecha

GROUP BY fecha
LIMIT 4

UNION
SELECT login.fecha, login.Ultimo_Login, mubs.cant_mubs, activados.cant_nuevos_activados, geo.cant_nuevos_geolocalizados, NULL AS  users_mublet, NULL AS users_tyc
FROM 
(SELECT DATE_FORMAT(FROM_UNIXTIME(last_login),'%Y-%m') AS Fecha,COUNT(username) AS Ultimo_Login
FROM elgg_users_entity GROUP BY DATE_FORMAT(FROM_UNIXTIME(last_login),'%Y-%m') ORDER BY DATE_FORMAT(FROM_UNIXTIME(last_login),'%Y-%m') DESC LIMIT 4 ) login 

LEFT OUTER JOIN 
(SELECT DATE_FORMAT(FROM_UNIXTIME(posted ),'%Y-%m') AS Fecha, COUNT(id) AS Cant_Mubs
FROM elgg_river GROUP BY DATE_FORMAT(FROM_UNIXTIME(posted ),'%Y-%m') ORDER BY DATE_FORMAT(FROM_UNIXTIME(posted ),'%Y-%m') DESC LIMIT 4	) mubs
ON login.fecha = mubs.fecha

LEFT OUTER JOIN 
(SELECT DATE_FORMAT(FROM_UNIXTIME(time_created),'%Y-%m') AS Fecha,COUNT(guid) AS Cant_nuevos_Activados
FROM elgg_entities  WHERE TYPE='user' GROUP BY DATE_FORMAT(FROM_UNIXTIME(time_created),'%Y-%m') ORDER BY DATE_FORMAT(FROM_UNIXTIME(time_created),'%Y-%m') DESC LIMIT 4 ) activados
ON login.fecha = activados.fecha

LEFT OUTER JOIN 
(SELECT DATE_FORMAT(FROM_UNIXTIME(time_created),'%Y-%m') AS Fecha,COUNT(DISTINCT(guid)) AS Cant_nuevos_Geolocalizados
FROM elgg_user_locations   GROUP BY  DATE_FORMAT(FROM_UNIXTIME(time_created),'%Y-%m') ORDER BY DATE_FORMAT(FROM_UNIXTIME(time_created),'Y:%x -W:%v ') DESC LIMIT 4) geo
ON login.fecha = geo.fecha
GROUP BY fecha;  ",7
"BLOGS DE LA GENTE - Blogs creados por dia","Devuelve una lista de los blogs creados por día","SELECT A.ANIO, A.MES, A.DIA, ifnull(NORMALES, 0) NORMAL, ifnull(SPAM, 0) SPAM, (ifnull(NORMALES,0) + ifnull(SPAM,0)) as TOTAL
FROM (
    SELECT YEAR(registered) as ANIO, MONTH(registered) as MES, DAY(registered) as DIA, count(1) as ""NORMALES""
    FROM wp_blogs
    WHERE registered BETWEEN DATE($P{blogsdelagente_fecha_inicio}) AND DATE($P{blogsdelagente_fecha_fin}) and SPAM = 0
    GROUP BY YEAR(registered), MONTH(registered), DAY(registered)
) as A LEFT JOIN (
    SELECT YEAR(registered) as ANIO, MONTH(registered) as MES, DAY(registered) as DIA, count(1) as ""SPAM""
    FROM wp_blogs
    WHERE registered BETWEEN DATE($P{blogsdelagente_fecha_inicio}) AND DATE($P{blogsdelagente_fecha_fin}) and SPAM = 1
    GROUP BY YEAR(registered), MONTH(registered), DAY(registered)
) as B ON A.DIA = B.DIA
UNION ALL
SELECT A.ANIO, A.MES, A.DIA, ifnull(NORMALES, 0) NORMAL, ifnull(SPAM, 0) SPAM, (ifnull(NORMALES,0) + ifnull(SPAM,0)) as TOTAL
FROM (
    SELECT YEAR(registered) as ANIO, MONTH(registered) as MES, DAY(registered) as DIA, count(1) as ""NORMALES""
    FROM wp_blogs
    WHERE registered BETWEEN DATE($P{blogsdelagente_fecha_inicio}) AND DATE($P{blogsdelagente_fecha_fin}) and SPAM = 0
    GROUP BY YEAR(registered), MONTH(registered), DAY(registered)
) as A RIGHT JOIN (
    SELECT YEAR(registered) as ANIO, MONTH(registered) as MES, DAY(registered) as DIA, count(1) as ""SPAM""
    FROM wp_blogs
    WHERE registered BETWEEN DATE($P{blogsdelagente_fecha_inicio}) AND DATE($P{blogsdelagente_fecha_fin}) and SPAM = 1
    GROUP BY YEAR(registered), MONTH(registered), DAY(registered)
) as B ON A.DIA = B.DIA
WHERE A.DIA IS NULL",8
"BLOGS DE LA GENTE - Comentarios creados por dia","Devuelve una lista de los comentarios creados por día","SELECT A.ANIO, A.MES, A.DIA, ifnull(NORMALES, 0) NORMALES, ifnull(SPAM, 0) SPAM, (ifnull(NORMALES,0) + ifnull(SPAM,0)) as TOTAL
FROM (
    SELECT YEAR(date_created) as ANIO, MONTH(date_created) as MES, DAY(date_created) as DIA, count(1) as NORMALES
    FROM wp_bp_user_blogs_comments b JOIN wp_users u ON u.id = b.user_id
    WHERE date_created BETWEEN DATE($P{blogsdelagente_fecha_inicio}) AND DATE($P{blogsdelagente_fecha_fin}) AND  SPAM = 0
    GROUP BY YEAR(date_created), MONTH(date_created), DAY(date_created)
) as A LEFT JOIN (
    SELECT YEAR(date_created) as ANIO, MONTH(date_created) as MES, DAY(date_created) as DIA, count(1) as SPAM
    FROM wp_bp_user_blogs_comments b JOIN wp_users u ON u.id = b.user_id
    WHERE date_created BETWEEN DATE($P{blogsdelagente_fecha_inicio}) AND DATE($P{blogsdelagente_fecha_fin}) AND  SPAM = 1
    GROUP BY YEAR(date_created), MONTH(date_created), DAY(date_created)
) as B ON A.DIA = B.DIA
UNION ALL
SELECT A.ANIO, A.MES, A.DIA, ifnull(NORMALES, 0) NORMALES, ifnull(SPAM, 0) SPAM, (ifnull(NORMALES,0) + ifnull(SPAM,0)) as TOTAL
FROM (
    SELECT YEAR(date_created) as ANIO, MONTH(date_created) as MES, DAY(date_created) as DIA, count(1) as NORMALES
    FROM wp_bp_user_blogs_comments b JOIN wp_users u ON u.id = b.user_id
    WHERE date_created BETWEEN DATE($P{blogsdelagente_fecha_inicio}) AND DATE($P{blogsdelagente_fecha_fin}) AND  SPAM = 0
    GROUP BY YEAR(date_created), MONTH(date_created), DAY(date_created)
) as A RIGHT JOIN (
    SELECT YEAR(date_created) as ANIO, MONTH(date_created) as MES, DAY(date_created) as DIA, count(1) as SPAM
    FROM wp_bp_user_blogs_comments b JOIN wp_users u ON u.id = b.user_id
    WHERE date_created BETWEEN DATE($P{blogsdelagente_fecha_inicio}) AND DATE($P{blogsdelagente_fecha_fin}) AND  SPAM = 1
    GROUP BY YEAR(date_created), MONTH(date_created), DAY(date_created)
) as B ON A.DIA = B.DIA
WHERE A.DIA IS NULL",8
"BLOGS DE LA GENTE - Lista de usuarios y mails","Devuelve una lista de los blogs creados por día","SELECT user_login, user_nicename, user_email 
FROM wp_users
WHERE spam = 0 and deleted = 0",8
"BLOGS DE LA GENTE - Posts creados por dia","Devuelve una lista de los posts creados por día","SELECT A.ANIO, A.MES, A.DIA, ifnull(NORMALES, 0) NORMALES, ifnull(SPAM, 0) SPAM, (ifnull(NORMALES,0) + ifnull(SPAM,0)) as TOTAL
FROM (
    SELECT YEAR(date_created) as ANIO, MONTH(date_created) as MES, DAY(date_created) as DIA, count(1) as NORMALES
    FROM wp_bp_user_blogs_posts b JOIN wp_users u ON u.id = b.user_id
    WHERE date_created BETWEEN DATE($P{blogsdelagente_fecha_inicio}) AND DATE($P{blogsdelagente_fecha_fin}) AND  SPAM = 0
    GROUP BY YEAR(date_created), MONTH(date_created), DAY(date_created)
) as A LEFT JOIN (
    SELECT YEAR(date_created) as ANIO, MONTH(date_created) as MES, DAY(date_created) as DIA, count(1) as SPAM
    FROM wp_bp_user_blogs_posts b JOIN wp_users u ON u.id = b.user_id
    WHERE date_created BETWEEN DATE($P{blogsdelagente_fecha_inicio}) AND DATE($P{blogsdelagente_fecha_fin}) AND  SPAM = 1
    GROUP BY YEAR(date_created), MONTH(date_created), DAY(date_created)
) as B ON A.DIA = B.DIA
UNION ALL
SELECT A.ANIO, A.MES, A.DIA, ifnull(NORMALES, 0) NORMALES, ifnull(SPAM, 0) SPAM, (ifnull(NORMALES,0) + ifnull(SPAM,0)) as TOTAL
FROM (
    SELECT YEAR(date_created) as ANIO, MONTH(date_created) as MES, DAY(date_created) as DIA, count(1) as NORMALES
    FROM wp_bp_user_blogs_posts b JOIN wp_users u ON u.id = b.user_id
    WHERE date_created BETWEEN DATE($P{blogsdelagente_fecha_inicio}) AND DATE($P{blogsdelagente_fecha_fin}) AND  SPAM = 0
    GROUP BY YEAR(date_created), MONTH(date_created), DAY(date_created)
) as A RIGHT JOIN (
    SELECT YEAR(date_created) as ANIO, MONTH(date_created) as MES, DAY(date_created) as DIA, count(1) as SPAM
    FROM wp_bp_user_blogs_posts b JOIN wp_users u ON u.id = b.user_id
    WHERE date_created BETWEEN DATE($P{blogsdelagente_fecha_inicio}) AND DATE($P{blogsdelagente_fecha_fin}) AND  SPAM = 1
    GROUP BY YEAR(date_created), MONTH(date_created), DAY(date_created)
) as B ON A.DIA = B.DIA
WHERE A.DIA IS NULL
",1
"BLOGS DE LA GENTE - Usuarios creados por dia","Devuelve una lista de los usuarios creados por día","SELECT A.ANIO, A.MES, A.DIA, ifnull(NORMALES, 0) NORMALES, ifnull(SPAM, 0) SPAM, (ifnull(NORMALES,0) + ifnull(SPAM,0)) as TOTAL
FROM (
    SELECT YEAR(user_registered) as ANIO, MONTH(user_registered) as MES, DAY(user_registered) as DIA, count(1) as ""NORMALES""
    FROM wp_users
    WHERE user_registered BETWEEN DATE($P{blogsdelagente_fecha_inicio}) AND DATE($P{blogsdelagente_fecha_fin}) and SPAM = 0
    GROUP BY YEAR(user_registered), MONTH(user_registered), DAY(user_registered)
) as A LEFT JOIN (
    SELECT YEAR(user_registered) as ANIO, MONTH(user_registered) as MES, DAY(user_registered) as DIA, count(1) as ""SPAM""
    FROM wp_users
    WHERE user_registered BETWEEN DATE($P{blogsdelagente_fecha_inicio}) AND DATE($P{blogsdelagente_fecha_fin}) and SPAM = 1
    GROUP BY YEAR(user_registered), MONTH(user_registered), DAY(user_registered)
) as B ON A.DIA = B.DIA
UNION ALL
SELECT A.ANIO, A.MES, A.DIA, ifnull(NORMALES, 0) NORMALES, ifnull(SPAM, 0) SPAM, (ifnull(NORMALES,0) + ifnull(SPAM,0)) as TOTAL
FROM (
    SELECT YEAR(user_registered) as ANIO, MONTH(user_registered) as MES, DAY(user_registered) as DIA, count(1) as ""NORMALES""
    FROM wp_users
    WHERE user_registered BETWEEN DATE($P{blogsdelagente_fecha_inicio}) AND DATE($P{blogsdelagente_fecha_fin}) and SPAM = 0
    GROUP BY YEAR(user_registered), MONTH(user_registered), DAY(user_registered)
) as A RIGHT JOIN (
    SELECT YEAR(user_registered) as ANIO, MONTH(user_registered) as MES, DAY(user_registered) as DIA, count(1) as ""SPAM""
    FROM wp_users
    WHERE user_registered BETWEEN DATE($P{blogsdelagente_fecha_inicio}) AND DATE($P{blogsdelagente_fecha_fin}) and SPAM = 1
    GROUP BY YEAR(user_registered), MONTH(user_registered), DAY(user_registered)
) as B ON A.DIA = B.DIA
WHERE A.DIA IS NULL",8
"MG - Estadistica - Login usuarios unicos","Usuarios unicos logueados entre fechas","select 'TOTAL' as username, count(distinct(username)) as logins from xlogs where result='LOG-IN' and log_date >= $P{MG-login_fecha_desde} and log_date <= $P{MG-login_fecha_hasta} union select lower(username) as username, count(*) as logins from xlogs where result='LOG-IN' and log_date >= $P{MG-login_fecha_desde} and log_date <= $P{MG-login_fecha_hasta} group by username;",9
"MG - Estadistica - Status Total","Status de registraciones por fecha de creacion y  totales de estados y logins unicos","select 'TOTAL Status' as fecha_creacion,status, count(*) as cantidad from gaturros group by status union select 'TOTAL Unicos' as fecha_creacion, 'LOGIN' as status, count(distinct(username)) as cantidad from xlogs where result='LOG-IN' union select date_format(created,'%Y/%m/%d') as fecha_creacion, status, count(*) as cantidad from gaturros group by fecha_creacion, status ",9
"MG - Estadistica - Usuarios Activados","Usuarios activados por dia","select 'TOTAL' as fecha_activacion, 'Usuarios Activados' as fecha_registracion, count(*) as cantidad from gaturros where status='S5' union select date_format(activated,'%Y/%m/%d') as fecha_activacion, date_format(created,'%Y/%m/%d') as fecha_registracion,  count(*) as cantidad from gaturros where status='S5' group by fecha_activacion,fecha_registracion; ",9
"MG - Estadistica - Usuarios concurrentes","Usuarios concurrentes desde una fecha en adelante","select snapshot, valor from xmetrica where snapshot >= $P{MG-concurrentes_desde};",9
"MG - Listado Newsletter","Nombres de Gaturros y Tutores","select UPPER(g.username),g.gen,lower(t.tutor_email) from gaturros g,tutors t where g.status='S5' and t.tutor_id=g.tutor_id
",9
"MG - Moderacion - Actividades de un gaturro","Celular - Messages - Reportes que realizo y que lo referenciaron","select tstamp,'celular' tipo, sender, recipient,message
from mailmessages where sender =  $P{MG-filtro_nombre_gaturro}
union
select tstamp, 'room', sender,convert(room_id, char(8)), message
from chatmessages cm join globalchatmessages gcm on gcm.chatmessage_id = cm.id
join roomchatmessages rcm on rcm.chatmessage_id = cm.id
where sender = $P{MG-filtro_nombre_gaturro}
union
select date, 'reporte' tipo, username, bully, description
from abuseREPORT
where username = upper($P{MG-filtro_nombre_gaturro})
union
select now(), 'reportado' tipo, username, bully, description
from abuseREPORT
where bully = upper($P{MG-filtro_nombre_gaturro})
order by 1 desc",9
"MG - Moderacion - Logins de un Gaturro","Logins de un gaturro - IPs","select log_date, log_time, username, log_ip, result
from xlogs where username= $P{MG-filtro_nombre_gaturro}
order by 1 desc",9
"MG - Moderacion - Matrix Mensajes","Filtros sobre Mensajes Celular y Chat","select tstamp,'celular' tipo, sender, recipient,message
from mailmessages where sender regexp  $P{MG-filtro_gaturro_origen}
and recipient regexp  $P{MG-filtro_gaturro_origen} 
and message regexp $P{MG-filtro_descripcion} 
and tstamp >= $P{MG-filtro_fecha_desde}
and tstamp <= $P{MG-filtro_fecha_hasta}
union
select tstamp, 'room', sender,convert(room_id, char(8)), message
from chatmessages cm join globalchatmessages gcm on gcm.chatmessage_id = cm.id
join roomchatmessages rcm on rcm.chatmessage_id = cm.id
where sender regexp  $P{MG-filtro_gaturro_origen}
and message regexp $P{MG-filtro_descripcion} 
and message != ''
and tstamp >= $P{MG-filtro_fecha_desde}
and tstamp <= $P{MG-filtro_fecha_hasta}
order by 1",9
"MG - Moderacion - Nombres de Gaturros","Nombres de Gaturros creados por fecha","select date_format(g.created,'%Y/%m/%d') as fecha_creacion, g.username, t.tutor_email
from gaturros g join tutors t on (t.tutor_id=g.tutor_id) where g.status='S5' and  g.created >= $P{MG-reporte_fecha_desde}
order by 1,2",9
"MG - Moderacion - Reportes MeMolestaron","Filtros sobre reportes de abuso","select id, username, bully, description
from abuseREPORT
where description regexp $P{MG-filtro_descripcion}
and username regexp $P{MG-filtro_abuse_denunciante}
and bully regexp $P{MG-filtro_abuse_denunciado}
order by 1 desc",9
"MG - Pases - utilizacion de un pase","Pase utilizado por un usuario","select  *  from xbuys where buy_medio_num=$P{MG-pase}",9
"MO-Usuarios Reputacion Negativa","Usuario NO suspendidos con reputacion menor a -3","select U.USU_APODO, U.USUARIO_ID, r.puntaje 
from sacar.cal_reputacion r, SACAR.SAC_USUARIO u
where r.puntaje < -3
and r.usuario_id = u.USUARIO_ID
and u.usu_suspendido = 'N'
order by r.puntaje ",2
"MO - DIARIO Cargos mayores a 100","Diario - Cargos mayores a 100","select padre.*, hijo.calif from
(SELECT  cu.usuario_id, u.usu_apodo, u.usu_nombre, u.usu_apellido,u.usu_email, tu.tius_descripcion, SUM (ca.monto) total, cu.estado, u.usu_suspendido, to_char (u.usu_fecha_ingreso, 'DD/MM/RRRR') Fecha_Ingreso
    FROM sacar.cce_cargo ca,
         sacar.cce_tipo_cargo tc,
         sacar.cce_cuenta cu,
         sacar.sac_usuario u,
         sacar.sac_tipo_usuario tu
   WHERE ca.estado = 'GENERADO'
     AND ca.tipo_cargo_id = tc.ID
     AND ca.cuenta_id = cu.ID
     AND u.usuario_id = cu.usuario_id
     AND u.tius_id = tu.tius_id
     and u.tius_id = 2
     and u.usu_suspendido = 'N'
     and trunc(u.USU_FECHA_ACEPTA_CONDICIONES) > 
to_date('01/01/2008','DD/MM/RRRR')
GROUP BY cu.usuario_id,
         u.usu_apodo,
         u.usu_nombre,
         u.usu_apellido,
         u.usu_email,
         tu.tius_descripcion,
         cu.estado,
         u.usu_suspendido,
         u.usu_fecha_ingreso
  HAVING SUM (ca.monto) > 100)padre, 
(select c.usuario_calificado_id,count(1)CALIF from
sacar.cal_calificacion c
where c.estado = 'CONFIRMADA'
group by c.usuario_calificado_id)hijo
where 0=0
AND padre.usuario_id = hijo.usuario_calificado_id (+)
and (calif < 50 or calif is null)
ORDER BY padre.total ASC",2
"MO - SEMANAL Destaque Semanal GV","Semanal Destaque Semanal GV","select u.usuario_id, u.usu_apodo, u.usu_email, ca.DESTAQUE_TITULO, to_char(ca.generacion,'DD/MM/RRRR')FECHA
, count(ca.id)CANTIDAD, sum(ca.monto)MONTO
from sacar.cce_cargo ca, sacar.cce_cuenta cu, sacar.sac_usuario u
where 0=0
and u.usuario_id = cu.USUARIO_ID
and ca.cuenta_id = cu.id
and trunc(ca.generacion) between
trunc(sysdate -7) and trunc(sysdate -1)
and ca.TIPO_CARGO_ID = 2
and u.TIUS_ID = 1
group by u.usuario_id, u.usu_apodo, u.usu_email, ca.DESTAQUE_TITULO,to_char(ca.generacion,'DD/MM/RRRR')
order by 1,5",2
"Reporte ORIGINAL diario de subscripciones y registros (AGC)","Reporte Original Agustina","select * from (
(
select 'TOTAL SUBSCRIPCIONES' entidad, c.name ciudad, 'TOTAL' fecha, count(*) cantidad_total, sum(is_subscribed) activos
from subscriptions s, cities c
where s.city_id = c.id
group by c.name
)
union
(
select 'TOTAL USUARIOS' entidad, 'GENERAL', 'TOTAL', count(*) cantidad_total, sum(is_active) activos
from users u
)
union
(
select 'SUBSCRIPCIONES x DIA', c.name, date_format(s.created,'%Y/%m/%d'), count(*), sum(is_subscribed)
from subscriptions s, cities c
where s.city_id = c.id
and date(s.created) >= date(concat(year(now()),'-',month(now()),'-01'))
and date(s.created) < date(concat(year(now()),'-',(month(now())+1),'-01'))
group by c.name, date(s.created)
order by 2,3
)
UNION
(
select 'REGISTROS x DIA', 'GENERAL', date_format(s.created,'%Y/%m/%d'), count(*), sum(is_active)
from users s, cities c
where date(s.created) >= date(concat(year(now()),'-',month(now()),'-01'))
and date(s.created) < date(concat(year(now()),'-',(month(now())+1),'-01'))
group by date(s.created)
order by 2,3
) 
) t;",2
"Club Cupon - Perfiles completados entre fechas","Perfiles completados entre fechas","select * from (
select u.id, u.username, u.email, u.available_balance_amount,
        up.first_name, up.middle_name, up.last_name,
        up.dni, up.other_sites, up.dob fecha_nac, up.about_me,
        (select name from neighbourhoods c where c.id = up.neighbourhood_id) barrio,
        (select name from cities c where c.id = up.city_id) ciudad,
        up.zip_code,
        (case when up.cell_carrier = 1 then 'Personal' when up.cell_carrier = 2 then 'Movistar' when up.cell_carrier = 3 then 'Claro' when up.cell_carrier = 4 then 'Nextel' else '' end ) carrier,
        (case when up.cell_carrier <> 0 then concat(up.cell_prefix,'-',up.cell_number) else null end) celular,
        up.is_sms_enabled,
        up.gender,
        (select a.content from answers a, user_answers ua where a.question_id = ua.question_id and a.id = ua.answer_id and a.question_id = 1 and ua.user_id = u.id ) estado_civil,
      CONCAT_WS(',',
      (select distinct a.content from answers a, user_answers ua where a.question_id = ua.question_id and a.id = ua.answer_id and a.question_id = 2 and answer_id = 6 and ua.user_id = u.id ),
      (select distinct a.content from answers a, user_answers ua where a.question_id = ua.question_id and a.id = ua.answer_id and a.question_id = 2 and answer_id = 7 and ua.user_id = u.id),
      (select distinct a.content from answers a, user_answers ua where a.question_id = ua.question_id and a.id = ua.answer_id and a.question_id = 2 and answer_id = 8 and ua.user_id = u.id),
      (select distinct a.content from answers a, user_answers ua where a.question_id = ua.question_id and a.id = ua.answer_id and a.question_id = 2 and answer_id = 9 and ua.user_id = u.id),
      (select distinct a.content from answers a, user_answers ua where a.question_id = ua.question_id and a.id = ua.answer_id and a.question_id = 2 and answer_id = 10 and ua.user_id = u.id),
      (select distinct 'Otros' from answers a, user_answers ua where a.question_id = ua.question_id and a.id = ua.answer_id and a.question_id = 2 and a.creator = 'user' and ua.user_id = u.id)
      ) comida_favorita,
      CONCAT_WS(',',
      (select distinct a.content from answers a, user_answers ua where a.question_id = ua.question_id and a.id = ua.answer_id and a.question_id = 3 and answer_id = 11 and ua.user_id = u.id ),
      (select distinct a.content from answers a, user_answers ua where a.question_id = ua.question_id and a.id = ua.answer_id and a.question_id = 3 and answer_id = 12 and ua.user_id = u.id),
      (select distinct a.content from answers a, user_answers ua where a.question_id = ua.question_id and a.id = ua.answer_id and a.question_id = 3 and answer_id = 14 and ua.user_id = u.id),
      (select distinct a.content from answers a, user_answers ua where a.question_id = ua.question_id and a.id = ua.answer_id and a.question_id = 3 and answer_id = 15 and ua.user_id = u.id),
      (select distinct a.content from answers a, user_answers ua where a.question_id = ua.question_id and a.id = ua.answer_id and a.question_id = 3 and answer_id = 16 and ua.user_id = u.id),
      (select distinct a.content from answers a, user_answers ua where a.question_id = ua.question_id and a.id = ua.answer_id and a.question_id = 3 and answer_id = 1064 and ua.user_id = u.id),
      (select distinct a.content from answers a, user_answers ua where a.question_id = ua.question_id and a.id = ua.answer_id and a.question_id = 3 and answer_id = 1065 and ua.user_id = u.id),
      (select distinct 'Otros' from answers a, user_answers ua where a.question_id = ua.question_id and a.id = ua.answer_id and a.question_id = 3 and a.creator = 'user' and ua.user_id = u.id)
      ) salidas,
      CONCAT_WS(',',
      (select distinct a.content from answers a, user_answers ua where a.question_id = ua.question_id and a.id = ua.answer_id and a.question_id = 6 and answer_id = 30 and ua.user_id = u.id ),
      (select distinct a.content from answers a, user_answers ua where a.question_id = ua.question_id and a.id = ua.answer_id and a.question_id = 6 and answer_id = 31 and ua.user_id = u.id),
      (select distinct a.content from answers a, user_answers ua where a.question_id = ua.question_id and a.id = ua.answer_id and a.question_id = 6 and answer_id = 33 and ua.user_id = u.id),
      (select distinct a.content from answers a, user_answers ua where a.question_id = ua.question_id and a.id = ua.answer_id and a.question_id = 6 and answer_id = 34 and ua.user_id = u.id),
      (select distinct a.content from answers a, user_answers ua where a.question_id = ua.question_id and a.id = ua.answer_id and a.question_id = 6 and answer_id = 35 and ua.user_id = u.id),
      (select distinct a.content from answers a, user_answers ua where a.question_id = ua.question_id and a.id = ua.answer_id and a.question_id = 6 and answer_id = 1066 and ua.user_id = u.id),
      (select distinct a.content from answers a, user_answers ua where a.question_id = ua.question_id and a.id = ua.answer_id and a.question_id = 6 and answer_id = 1067 and ua.user_id = u.id),
      (select distinct 'Otros' from answers a, user_answers ua where a.question_id = ua.question_id and a.id = ua.answer_id and a.question_id = 6 and a.creator = 'user' and ua.user_id = u.id)
      ) ofertas_interes,
      CONCAT_WS(',',
      (select distinct a.content from answers a, user_answers ua where a.question_id = ua.question_id and a.id = ua.answer_id and a.question_id = 7 and answer_id = 1053 and ua.user_id = u.id ),
      (select distinct a.content from answers a, user_answers ua where a.question_id = ua.question_id and a.id = ua.answer_id and a.question_id = 7 and answer_id = 1054 and ua.user_id = u.id),
      (select distinct a.content from answers a, user_answers ua where a.question_id = ua.question_id and a.id = ua.answer_id and a.question_id = 7 and answer_id = 1055 and ua.user_id = u.id),
      (select distinct a.content from answers a, user_answers ua where a.question_id = ua.question_id and a.id = ua.answer_id and a.question_id = 7 and answer_id = 1056 and ua.user_id = u.id),
      (select distinct 'Otros' from answers a, user_answers ua where a.question_id = ua.question_id and a.id = ua.answer_id and a.question_id = 7 and a.creator = 'user' and ua.user_id = u.id)
      ) otros_sitios,
      CONCAT_WS(',',
      (select distinct a.content from answers a, user_answers ua where a.question_id = ua.question_id and a.id = ua.answer_id and a.question_id = 8 and answer_id = 1057 and ua.user_id = u.id ),
      (select distinct a.content from answers a, user_answers ua where a.question_id = ua.question_id and a.id = ua.answer_id and a.question_id = 8 and answer_id = 1058 and ua.user_id = u.id),
      (select distinct 'Otros' from answers a, user_answers ua where a.question_id = ua.question_id and a.id = ua.answer_id and a.question_id = 8 and a.creator = 'user' and ua.user_id = u.id)
      ) hijos,
      CONCAT_WS(',',
      (select distinct a.content from answers a, user_answers ua where a.question_id = ua.question_id and a.id = ua.answer_id and a.question_id = 9 and answer_id = 1059 and ua.user_id = u.id ),
      (select distinct a.content from answers a, user_answers ua where a.question_id = ua.question_id and a.id = ua.answer_id and a.question_id = 9 and answer_id = 1060 and ua.user_id = u.id),
      (select distinct a.content from answers a, user_answers ua where a.question_id = ua.question_id and a.id = ua.answer_id and a.question_id = 9 and answer_id = 1061 and ua.user_id = u.id),
      (select distinct 'Otros' from answers a, user_answers ua where a.question_id = ua.question_id and a.id = ua.answer_id and a.question_id = 9 and a.creator = 'user' and ua.user_id = u.id)
      ) edad_de_los_hijos
from users u, user_profiles up
where 1=1
and u.id = up.user_id
and date(up.modified) >= date($P{CC_fecha_desde})
and date(up.modified) <= date($P{CC_fecha_hasta})
) t
;
",1
name,desc,query,10
"CLICK AVISOS","Reporte Diario - Q de Avisos","(select '01 - Avisos sin validar del día anterior: ' || count(*) as contador
from CLNPOSTING p 
where confirmed = 0 
and trunc(publicationdate) = trunc(sysdate-1) 
and not exists ( select 1 from CLNUSERS u where u.iduser = p.iduser and u.mailverified = 1 )) 
UNION
(select '02 - Q de avisos publicados el día anterior (MO): '||count(*) as contador
from CLNPOSTING p 
where trunc(publicationdate) = trunc(sysdate-1) 
and iduser = 3)
UNION
(select '04 - Q de comentarios: '||count(*) as contador
from CLNCOMMENTS )
UNION
(select '05 - Q de mensajes: '||count(*) as contador
from CLNMESSAGES )
UNION
(select '03 - Q de avisos publicados el día anterior (no MO): '||count(*) as contador
from CLNPOSTING p 
where trunc(publicationdate) = trunc(sysdate-1) 
and iduser <> 3)
UNION
(select '06 - Q de usuarios validados: ' || count(*) as contador
from CLNUSERS 
where mailverified = 1 )
UNION
(select '07 - Stock de avisos sin validar: ' || count(*) as contador
from CLNPOSTING p 
where confirmed = 0 
and not exists ( select 1 from CLNUSERS u where u.iduser = p.iduser and u.mailverified = 1 )) 
UNION
select '08 - Stock de avisos validados (MO): '|| count(*) 
from CLNPOSTING p 
where confirmed = 1 
and iduser = 3 
UNION
( select '09 - Stock de avisos validados (no MO): ' || count(*) as contador
  from CLNPOSTING P1 
 WHERE iduser <> 3
   and P1.ROWID IN ((SELECT P2.ROWID 
                      FROM CLNPOSTING P2 
                     WHERE confirmed = 1)
                     UNION  
                     (SELECT P3.ROWID 
                      FROM CLNPOSTING P3 
                     WHERE confirmed = 0 
                       and exists (select 1 
                                     from CLNUSERS u 
                                    where u.iduser = P3.iduser 
                                      and u.mailverified = 1))))
UNION                     
(select '10 - Stock de usuarios registrados: ' || count(*) as contador
from CLNUSERS) ",10
"CLICK AVISOS - Categorias"," Q de avisos publicados por categoría el día anterior","select idcategory, (select name from CLNCATEGORY where idcategory = p.idcategory) descCategory,count(*) as contador 
from CLNPOSTING p 
where trunc(publicationdate) = trunc(sysdate-1) 
group by idcategory",10
"CLICK AVISOS - Localidades","Q de avisos publicados por localidades el día anterior","select idlocation, (select name from CLNLOCATION where idlocation = p.idlocation) descLocation, 
       count(*) as contador
from CLNPOSTING p 
where trunc(publicationdate) = trunc(sysdate-1) 
group by idlocation ",10
"CLICK AVISOS - Usuarios registrados con publicaciones (vendedores)","Usuarios registrados con publicaciones (vendedores)","SELECT usr.iduser, usr.mail
FROM CLNUSERS usr
WHERE ((SELECT count(*)
        FROM CLNPOSTING pst
        WHERE pst.iduser = usr.iduser AND pst.active = 1) > 0 )
AND enabled = 1
AND enabledbyuser = 1

o

select count(CLNUSERS.iduser) from CLNUSERS 
where EXISTS(select * from CLNPOSTING where CLNPOSTING.iduser = CLNUSERS.iduser)",10
"CLICK AVISOS - Stock de avisos propios por categoria","Stock de avisos propios por categoria","select idcategory, (select name from CLNCATEGORY where idcategory = p.idcategory) descCategory,count(*) as contador 
from CLNPOSTING p 
where iduser <> 3
group by idcategory",10
"CLICK AVISOS - Atencion - Busqueda de usuario","Busqueda de usuario (por mail)","select iduser, mail, password, username, firstname, lastname, nrodoc, to_char(birthdate,'dd/mm/yyyy') birthdate, telhome, cellphone, straddress, idlocation, ismale, enabled, mailverified, receivenewsletter
from CLNUSERS
where mail like $P{CA_filtro_mail}",10
"CLICK AVISOS - Atencion - Avisos de un usuario","Avisos de un usuario (por mail)","select idposting, idcategory, p.idlocation, p.iduser, title, to_char(publicationdate,'dd/mm/yyyy') publicationdate, offensive, spam, categorymissmatch, approved, moderated, visible, confirmed, neighbourhood, viewcount, commentcount, messagecount, searchcount
from CLNPOSTING p, CLNUSERS u
where p.iduser = u.iduser
and u.mail like $P{CA_filtro_mail}",10
"CLICK AVISOS - Atencion - Usuario dueño de determinado posting","Usuario dueño de determinado posting","select u.iduser, u.username, u.password, u.mail, firstname, lastname, nrodoc, to_char(birthdate,'dd/mm/yyyy') birthdate, telhome, cellphone, straddress, u.idlocation, ismale, enabled, mailverified, receivenewsletter
from CLNPOSTING p, CLNUSERS u
where p.iduser = u.iduser
and p.idposting = $P{CA_filtro_posting}
",10
"CLICK AVISOS - Avisos publicados en el día","Reporte Diario - Q de Avisos","(select '01 - Q de avisos publicados en el día (MO): '||count(*) as contador
from CLNPOSTING p 
where trunc(publicationdate) = trunc(sysdate)
and iduser = 3)
UNION
(select '02 - Q de avisos publicados el en día (no MO): '||count(*) as contador
from CLNPOSTING p 
where trunc(publicationdate) = trunc(sysdate) 
and iduser <> 3)",10
"CLICK AVISOS - Usuarios registrados","Usuarios registrados","select iduser, mail, username, mailverified
from CLNUSERS",10
"CLICK AVISOS - Stock de avisos propios por localidad","Stock de avisos propios por localidad","select idlocation, (select name from CLNLOCATION where idlocation = p.idlocation) descLocation,count(*) as contador 
from CLNPOSTING p 
where iduser <> 3
group by idlocation",10
"CLICK AVISOS - Stock de avisos propios por provincia","Stock de avisos propios por provincia","select location.descripcion, count(*) cantidad
from CLNPOSTING p, (
select idlocation, substr(path,instr(path,'>',1),instr(path,'>',12)) descripcion from (
select level nivel, idlocation, idlocationparent, name, sys_connect_by_path(name,'>') path
  from CLNLOCATION
  where deleted = 0
  start with idlocationparent is null
  connect by prior idlocation = idlocationparent
)) location
where iduser <> 3
and p.idlocation = location.idlocation
group by location.descripcion",10
"CLICK AVISOS - Stock de avisos propios por categoria L1","Stock de avisos propios por categoria L1","select L1.descripcion, count(*) cantidad
from CLNPOSTING p, (
select idcategory, substr(path,instr(path,'>',1),instr(path,'>',4)) descripcion from (
select level nivel, idcategory, idcategoryparent, name, sys_connect_by_path(name,'>') path
  from CLNCATEGORY
  where deleted = 0
  start with idcategoryparent is null
  connect by prior idcategory = idcategoryparent
)) L1
where iduser <> 3
and p.idcategory = L1.idcategory
group by L1.descripcion",10
"CLICK AVISOS - Categorias L1"," Q de avisos publicados por categoría L1 el día anterior","select L1.descripcion, count(*) cantidad
from CLNPOSTING p, (
select idcategory, substr(path,instr(path,'>',1),instr(path,'>',4)) descripcion from (
select level nivel, idcategory, idcategoryparent, name, sys_connect_by_path(name,'>') path
  from CLNCATEGORY
  where deleted = 0
  start with idcategoryparent is null
  connect by prior idcategory = idcategoryparent
)) L1
where iduser <> 3
and trunc(publicationdate) = trunc(sysdate-1)
and p.idcategory = L1.idcategory
group by L1.descripcion",10
"CLICK AVISOS - Provincias","Q de avisos publicados por provincias el día anterior","select L1.descripcion, count(*) cantidad
from CLNPOSTING p, (
select idcategory, substr(path,instr(path,'>',1),instr(path,'>',4)) descripcion from (
select level nivel, idcategory, idcategoryparent, name, sys_connect_by_path(name,'>') path
  from CLNCATEGORY
  where deleted = 0
  start with idcategoryparent is null
  connect by prior idcategory = idcategoryparent
)) L1
where iduser <> 3
and trunc(publicationdate) = trunc(sysdate-1) 
and p.idcategory = L1.idcategory
group by L1.descripcion",10
"CLICK AVISOS - Stock de usuarios no validados","Stock de usuarios no validados","select iduser, mail, password, username, firstname, lastname, nrodoc, to_char(birthdate,'dd/mm/yyyy') birthdate, telhome, cellphone, straddress, idlocation, ismale, enabled, mailverified, receivenewsletter
from CLNUSERS
where mailverified = 0",10
"CLICK AVISOS - Avisos más comentados","Avisos más comentados","select idposting
from CLNCOMMENTS",10
"CLICK AVISOS - Avisos por día última semana","Reporte de avisos publicado por día","(select 'Q de avisos publicados el día anterior (no MO): '||count(*) as contador
from CLNPOSTING p 
where trunc(publicationdate) = trunc(sysdate-1) 
and iduser <> 3)
UNION
(select 'Q de avisos publicados hace 2 días(no MO): '||count(*) as contador
from CLNPOSTING p 
where trunc(publicationdate) = trunc(sysdate-2) 
and iduser <> 3)
UNION
(select 'Q de avisos publicados publicados hace 3 días(no MO): '||count(*) as contador
from CLNPOSTING p 
where trunc(publicationdate) = trunc(sysdate-3) 
and iduser <> 3)
UNION
(select 'Q de avisos publicados publicados hace 4 días (no MO): '||count(*) as contador
from CLNPOSTING p 
where trunc(publicationdate) = trunc(sysdate-4) 
and iduser <> 3)
UNION
(select 'Q de avisos publicados hace 5 días(no MO): '||count(*) as contador
from CLNPOSTING p 
where trunc(publicationdate) = trunc(sysdate-5) 
and iduser <> 3)
UNION
(select 'Q de avisos publicados publicados hace 6 días(no MO): '||count(*) as contador
from CLNPOSTING p 
where trunc(publicationdate) = trunc(sysdate-6) 
and iduser <> 3)
UNION
(select 'Q de avisos publicados publicados hace 7 días (no MO): '||count(*) as contador
from CLNPOSTING p 
where trunc(publicationdate) = trunc(sysdate-7) 
and iduser <> 3)",10
"CLICK AVISOS - 25 avisos mas comentados","25 avisos mas comentados","select p.idposting, cantidad cantidad_comentarios, title, offensive, spam, categorymissmatch, approved, moderated, visible, confirmed
from (  
 select idposting, count(*) cantidad
 from CLNCOMMENTS
 group by idposting
 order by 2 desc
 ) mascomentados, CLNPOSTING p
where mascomentados.idposting = p.idposting
and rownum <= 25",10
"CLICK AVISOS - 25 avisos mas vistos","25 avisos mas vistos","select p.idposting, cantidad cantidad_visitas, title, offensive, spam, categorymissmatch, approved, moderated, visible, confirmed
from (  
 select idposting, count(*) cantidad
 from CLNVIEWSDATES
 group by idposting
 order by 2 desc
 ) mascomentados, CLNPOSTING p
where mascomentados.idposting = p.idposting
and rownum <= 25 ",10
"CLICK AVISOS - 25 avisos mas buscados","25 avisos mas buscados (consulta lenta)","select * 
from 
(
select p.idposting, p.searchcount
from CLNPOSTING p
where p.searchcount > 8000
order by p.searchcount desc
)
where rownum <= 25 ",10
"CLICK AVISOS - Denuncias","Listado de denuncias","SELECT ud1.iduser iduser_reportado, ud1.username nombre_reportado, ud1.mail mail_reportado, ud1.telhome tel_reportado, ud1.cellphone cel_reportado, 
ud2.iduser iduser_reporta, ud2.username nombre_reporta,
       ud2.mail mail_reporta, ud2.telhome tel_reporta, ud2.cellphone cel_reporta, d.text denuncia
  FROM CLNUSERS ud1, CLNUSERS ud2, CLNCOMPLAINT d
 WHERE ud2.iduser = d.iduser AND ud1.iduser = d.iduserreported
ORDER BY d.datecomplaint desc",10
"Prueba con replica","prueba con replica","select idlocation, (select name from CLNLOCATION where idlocation = p.idlocation) descLocation, 
       count(*) as contador
from CLNPOSTING p 
where trunc(publicationdate) = trunc(sysdate-1) 
group by idlocation ",10
"clickavisos - cantidad de avisos","clickavisos - cantidad de avisos","select count(*) as Cantidad
from CLNPOSTING
where trunc(publicationdate) = trunc(sysdate)-1
",10
"CLICK AVISOS - cantidad de avisos","CLICK AVISOS - cantidad de avisos","select count(*)
from CLNPOSTING
where trunc(publicationdate) = trunc(sysdate)-1
",10
"Confronte/Shop1 - Crawler últimas corridas","Confronte/Shop1 - Crawler últimas corridas","select * from(
 select CASE b.type  WHEN 1 THEN 'Confronte'
									   WHEN 2 THEN 'Shop1' ELSE 'Desconocido' END 'Type',
				b.id,
        b.name,
				b.premium,
        fs.10_urls_read,				
        fs.20_offers_read,
        fs.20_offers_inserted,
        fs.20_offers_updated,
        fs.20_offers_inserted + fs.20_offers_updated offers_insert_y_update,
				IFNULL(ofertas.cantidad, 0 ) Cant_ofertas_visibles,
				FROM_UNIXTIME(fs.10_start_ts) 10_start_ts,
				FROM_UNIXTIME(fs.10_end_ts) 10_end_ts,
			  FROM_UNIXTIME(fs.20_start_ts) 20_start_ts,
			  FROM_UNIXTIME(fs.20_end_ts) 20_end_ts,
				IF(fs.status = '1', 'FS_RUNNING', 'FS_END') 'fs_status'
from biz b
inner join foursome_run fs on fs.biz_fk = b.id and fs.id = (select max(fsr.id) from foursome_run fsr where fsr.biz_fk = b.id)
left outer join (select of.biz_fk, count(1) cantidad from offer of where !(of.flags & 0x4000) and of.showable = 1 and of.seen = 1 GROUP BY of.biz_fk) ofertas
on ofertas.biz_fk = b.id
where b.status = 1
and b.country = 'AR'
and !(b.flags & 0x80)
-- and fs.10_urls_read = 1
-- and (fs.20_offers_read = 0 or (fs.20_offers_updated = 0 and fs.20_offers_inserted =0))
-- and b.id = 4131
--  order by fs.10_urls_read, fs.20_offers_read desc
 order by 1,11, 12 desc,ifnull(fs.20_offers_inserted+fs.20_offers_updated,0), 5 desc
)consulta",3
"Confronte/Shop1 - Tiendas repetidas","Tiendas repetidas","select * from (
SELECT b1.id id1, b1.name name1, b1.url url1,
       b2.id id2, b2.name name2, b2.url url2
FROM biz b1, biz b2
where replace(replace(replace(b1.url,'.com',''),'.ar',''),'.org','') like
      concat('%',replace(replace(replace(b2.url,'.com',''),'.ar',''),'.org',''),'%')
and b1.id <> b2.id
and b1.status = 1
and b2.status = 1
and b1.country = b2.country
and b1.country = 'AR'
) t;",3
"Confronte/Shop1 - Tiendas aprobadas sin ofertas","Tiendas aprobadas sin ofertas","select case type when 1 then 'Confronte' when 2 then 'Shop1' when 0 then 'Desconocido' end tipo, b.id, b.name
from biz b
where b.country = 'AR'
and b.status = 1
and not exists (
  select *
  from offer o
  where o.biz_fk = b.id
  and o.seen = 1 and o.showable = 1
)
order by 1
;",3
"Confronte/Shop1 - Tiendas aprobadas sin indicacion de tipo","Tiendas aprobadas sin indicacion de tipo","select case type when 1 then 'Confronte' when 2 then 'Shop1' when 0 then 'Desconocido' end tipo, b.id, b.name
from biz b
where b.country = 'AR'
and b.status = 1
and type = 0
",3
"Confronte/Shop1 - Tiendas a revisar","Tiendas a revisar","select *
from (
select b.id biz_id, b.name biz_name,
    (select count(distinct o.id) from offer o where o.biz_fk = b.id and o.showable = 1 and o.seen = 1 ) ofertas_totales,
    (select count(distinct o.id) from offer o, offer_error_log oel where o.id = oel.offer_fk and o.biz_fk = b.id ) ofertas_analizadas,
    (select count(distinct o.id) from offer o, offer_error_log oel where o.id = oel.offer_fk and o.biz_fk = b.id and ( (url_code <> 200 ) or (o.img_url is not null and not (img_code = 200 or img_code = 0 ) ) or (unavailable_pattern <> null) or (price_error = 1)) and o.showable = 1 and o.seen = 1 ) ofertas_con_error,
    ((select count(distinct o.id) from offer o, offer_error_log oel where o.id = oel.offer_fk and o.biz_fk = b.id and ( (url_code <> 200 ) or (o.img_url is not null and not (img_code = 200 or img_code = 0 ) ) or (unavailable_pattern <> null) or (price_error = 1)) and o.showable = 1 and o.seen = 1 ) /
     (select count(distinct o.id) from offer o, offer_error_log oel where o.id = oel.offer_fk and o.biz_fk = b.id ) * 100 ) tasa_error
from biz b
where country = 'AR'
and b.status = 1
and (select count(*) from offer o where o.biz_fk = b.id and o.showable = 1 and o.seen = 1 ) > 0
and (
      ( (b.type = 2) and ($P{CO_Sitio} = 'Shop1') )
      or
      ( (b.type = 1) and ($P{CO_Sitio} = 'Confronte') )
      )
) t
order by tasa_error desc, ofertas_totales desc
;",3
"Confronte/Shop1 - Q de tiendas","Q de tiendas aprobadas son al menos una oferta","select case type when 1 then 'Confronte' when 2 then 'Shop1' when 0 then 'Desconocido' end tipo, count(*) cantidad
from biz b
where b.country = 'AR'
and b.status = 1
and exists (
  select *
  from offer o
  where o.biz_fk = b.id
  and o.seen = 1 and o.showable = 1
)
group by type
;",3
"Confronte/Shop1 - Q de Ofertas","Q de Ofertas","select case type when 1 then 'Confronte' when 2 then 'Shop1' when 0 then 'Desconocido' end 'Tipo Tienda', t.*
from (
 SELECT
 			b.type,
 			count(1)'Ofertas',
 			SUM(o.seen) 'Visibles',
         SUM(o.seen && o.product_fk IS NOT NULL) 'Con producto' ,
         SUM(o.seen && o.product_fk IS NULL && o.category_fk IS NOT NULL) 'Sin producto/Con Categoria',
         SUM(o.seen && o.product_fk IS NULL && o.brand_fk IS NOT NULL)  'Sin producto/Con Marca',
         SUM(o.seen && o.product_fk IS NULL && o.category_fk IS NULL) 'Sin producto/Sin Categoria',
         SUM(o.seen && o.product_fk IS NULL && o.brand_fk IS NULL)  'Sin producto/Sin Marca',
         SUM(o.seen = FALSE) 'No visibles'
   FROM  offer o,
   		biz b
   where b.id = o.biz_fk
	  and b.country= 'AR'
    and b.status = 1
	group by b.type
) t;
",3
"Shop1 - Consulta estado oferta por categoría","Shop1 - Consulta estado oferta por categoría","select * from(
				 select c.id 'category_id',
								ifnull(c.name,'Categoría nula') 'category_name',
								count(1) 'Visibles',
							  SUM(o.category_fk IS NOT NULL) 'Con Categoria',
							  SUM(o.category_fk IS NOT NULL && o.flags & 0x02) 'Con Categoria Confirmada',
							  SUM(o.category_fk IS NOT NULL) - SUM(o.category_fk IS NOT NULL && o.flags & 0x02) 'Con Categoria a Confirmar',
							  SUM(o.product_fk IS NOT NULL) 'Con producto' ,								
							  SUM(o.product_fk IS NULL && o.category_fk IS NOT NULL && o.flags & 0x02) 'Sin producto/Con Categoria Confirmada',
							  SUM(o.product_fk IS NULL && o.brand_fk IS NOT NULL)  'Sin producto/Con Marca',         
							  SUM(o.product_fk IS NULL && o.category_fk IS NULL) 'Sin producto/Sin Categoria',
							  SUM(o.product_fk IS NULL && o.brand_fk IS NULL)  'Sin producto/Sin Marca',
							  SUM(o.product_fk IS NOT NULL || o.brand_fk IS NOT NULL || o.category_fk IS NOT  NULL)  'Con producto o Marca o Categoria'
					 from biz as b 
		 inner join offer as  o on o.biz_fk = b.id  and o.str NOT LIKE '%Ofertas%borradas%' and o.showable = 1 and o.seen = 1
		  left outer join category as c on c.id = o.category_fk
			 	  where b.status = 1 
						and b.country = 'AR'
						and b.type = 2
			 group by c.id, c.name
			 order by 3 desc) consulta",3
"SHOP1 - ALERTAS - Productos Fantasmas Sin Oferta Asociada","Productos Fantasmas Sin Oferta Asociada ( No deberian existir )","select * from catalog_product_flat_1 where id_confronte = 0 and entity_id not in (select product_id from offer_offers) order by entity_id",12
"Shop1 MG - Historia de una orden de compra","Historia de una orden de compra","SELECT * FROM sales_flat_order_status_history s
where parent_id = $P{SH1_MG_filtro_orden};",12
"Shop1 MG - Ventas / Intentos de pago","Ventas / Intentos de pago","select * from (SELECT s.increment_id 'order / seller_op_id', s.entity_id 'id_interno',
     s.status, s.grand_total, s.customer_email, s.customer_firstname,
     s.customer_lastname, s.bac_payment_id, s.bac_lot_id, s.mp_op_id,
     a.postcode, a.street, a.city, a.telephone, a.country_id, s.increment_id,
     s.total_item_count, g.created_at, g.updated_at,
     i.name, i.price, i.qty_ordered, p.last_trans_id
FROM sales_flat_order s, sales_flat_order_grid g, sales_flat_order_item i,
   sales_flat_order_payment p, sales_flat_order_address a
where 1=1
and s.entity_id = g.entity_id
and s.entity_id = i.order_id
and s.entity_id = p.entity_id
and s.shipping_address_id = a.entity_id
and date(g.updated_at) >= date($P{filtro_fecha_desde_LF})
and date(g.updated_at) <= date($P{filtro_fecha_hasta_LF})
and ( $P{SH1_MG_filtro_status} = 'TODOS' or $P{SH1_MG_filtro_status} = s.status )
)t;
",12
"Club Cupon - Utilizacion de monedero","Utilizacion de monedero","select *
from (
select de.id id_pago, de.bac_id id_pago_bac, de.quantity cantidad,
       de.internal_amount monto_monedero, de.parcial_amount monto_pagado,
       d.discounted_price precio_oferta, d.id id_oferta, d.name nombre_oferta,
       u.id id_usuario, u.username, u.email, u.available_balance_amount saldo_monedero
from deal_externals de, deals d, users u
where de.deal_id = d.id
and de.user_id = u.id
and external_status = 'A'
and date(de.created) >= date('2012-01-01')
and date(de.created) >= date($P{CC_fecha_desde}) 
and date(de.created) <= date($P{CC_fecha_hasta})
and internal_amount > 0
) t
;",1
