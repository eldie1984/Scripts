<?xml version="1.0" encoding="UTF-8"?>
<?mso-application progid="Excel.Sheet"?>
<Workbook xmlns="urn:schemas-microsoft-com:office:spreadsheet"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:x="urn:schemas-microsoft-com:office:excel"
xmlns:ss="urn:schemas-microsoft-com:office:spreadsheet"
xmlns:html="http://www.w3.org/TR/REC-html40">
<Worksheet ss:Name="Table1">
	<Table>
		<Column ss:Index="1" ss:AutoFitWidth="0" ss:Width="110"/>
		<Column ss:Index="2" ss:AutoFitWidth="0" ss:Width="110"/>
		<Row>
			<Cell><Data ss:Type="String">name</Data></Cell>
			<Cell><Data ss:Type="String">REPORT_QUERY</Data></Cell>
		</Row>

		<Row>
			<Cell><Data ss:Type="String">BAC-Controles - Pagos sin respuesta de Presea</Data></Cell>
			<Cell><Data ss:Type="String">select * from (  select id_cliente, id_pago, id_medio_pago,  date_format(fecha_pago,&#39;%d/%m/%Y&#39;) fecha_pago,          importe_pago, moneda, codigo_gateway, codigo_autorizacion, codigo_cupon,            date_format(fecha_envio,&#39;%d/%m/%Y&#39;) fecha_envio, txt_envio, txt_respuesta  ,case (select count(*) from erp_cliente c where p.id_cliente = c.id_cliente and codigo_respuesta = &#39;OK&#39;)      when 0 then &#39;NO ENVIADO&#39;     else &#39;ENVIADO&#39;  end as ClientePresea  from erp_pago p  where txt_respuesta is null  and txt_envio is not null  and ( p.id_portal = $P{bac_portal_fac} or ($P{bac_portal_fac} = 0 and p.id_portal in (select id_portal  from bac_portal where notifica_facturador = &#39;Y&#39;)))  ) aux</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Controles - Usuarios enviados a Presea que nunca volvieron con OK</Data></Cell>
			<Cell><Data ss:Type="String">select * from (  select c.login, t1.id_cliente, t1.id_portal portal, date_format(fecha_envio,&#39;%d/%m/%Y&#39;) fecha_envio, txt_envio, txt_respuesta  from erp_cliente t1, cce_usuario c, cce_usuario_cliente uc, bac_portal p  where c.id_usuario = uc.id_usuario  and t1.id_cliente = uc.id_cliente   and ( t1.id_portal = $P{Copy_bac_portal} or $P{Copy_bac_portal} = 0)  and t1.id_cliente_facturador is null  and p.id_portal = t1.id_portal  and p.notifica_facturador = &#39;Y&#39;  and t1.txt_envio is not null  ) aux</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Devengamiento - Detalle</Data></Cell>
			<Cell><Data ss:Type="String">select * from (  SELECT bac_producto.nombre as &quot;Producto&quot;,  cce_devengamiento.devengamiento_mes as &quot;Mes&quot;,  cce_devengamiento.devengamiento_anio as &quot;Año&quot;,  cce_devengamiento.cargo_monto as &quot;Monto total&quot;,  cce_devengamiento.devengamiento_monto as &quot;Monto Devengado&quot;,  cce_devengamiento.producto_medida as &quot;Medida Total&quot;,  cce_devengamiento.devengamiento_medida as &quot;Medida Devengada&quot;,  cce_usuario.login as &quot;Login&quot;,  cce_usuario.id_usuario as &quot;Id Usuario&quot;  FROM cce_devengamiento  LEFT JOIN cce_cargo ON cce_devengamiento.id_cargo = cce_cargo.id_cargo  LEFT JOIN bac_producto ON cce_cargo.id_producto = bac_producto.id_producto  LEFT JOIN cce_usuario_cliente ON cce_cargo.id_cliente = cce_usuario_cliente.id_cliente  LEFT JOIN cce_usuario ON cce_usuario_cliente.id_usuario = cce_usuario.id_usuario  WHERE 0=0  AND (0=if($P{Copy_bac_mes2}=&#39;0&#39;,0,1) or devengamiento_mes=$P{Copy_bac_mes2})  AND (0=if($P{Copy_bac_año}=&#39;0&#39;,0,1) or devengamiento_anio=$P{Copy_bac_año})  AND (0=if($P{Copy_bac_producto}=&#39;0&#39;,0,1) or bac_producto.id_producto=$P{Copy_bac_producto})  ) aux;</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Devengamiento - Resumen</Data></Cell>
			<Cell><Data ss:Type="String">select * from (  SELECT bac_producto.nombre as &quot;Producto&quot;,  cce_devengamiento.devengamiento_mes as &quot;Mes&quot;,  cce_devengamiento.devengamiento_anio as &quot;Año&quot;,  SUM(cce_devengamiento.devengamiento_monto) as &quot;Monto Devengado&quot;,  SUM(cce_devengamiento.devengamiento_medida) as &quot;Medida Devengada&quot;  FROM cce_devengamiento  LEFT JOIN cce_cargo ON cce_devengamiento.id_cargo = cce_cargo.id_cargo  LEFT JOIN bac_producto ON cce_cargo.id_producto = bac_producto.id_producto  WHERE 0=0  and ( bac_producto.id_portal = $P{Copy_bac_portal} or $P{Copy_bac_portal} = 0)  AND (0=if($P{Copy_bac_mes2}=&#39;0&#39;,0,1) or devengamiento_mes=$P{Copy_bac_mes2})  AND (0=if($P{Copy_bac_año}=&#39;0&#39;,0,1) or devengamiento_anio=$P{Copy_bac_año})  AND (0=if($P{Copy_bac_producto_dependiente_portal}=&#39;0&#39;,0,1) or bac_producto.id_producto=$P{Copy_bac_producto_dependiente_portal})  GROUP BY cce_devengamiento.devengamiento_anio, cce_devengamiento.devengamiento_mes, bac_producto.id_producto, bac_producto.nombre  ) aux;</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Pines - Consumos Resumido</Data></Cell>
			<Cell><Data ss:Type="String">select * from (  select t.cantidad_pines cantidad_pines_comprados, count(*) cantidad_usuarios  from  (  select usu.id_usuario, count(*) cantidad_pines  from sdp_pin p, cce_usuario usu  where p.id_usuario = usu.id_usuario  and p.id_estado_pin=2  group by usu.id_usuario  order by 2 desc  ) t  group by t.cantidad_pines  order by 1 desc  ) aux</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Pines - Ventas por día (administración)</Data></Cell>
			<Cell><Data ss:Type="String">select * from (  select date_format(p.actualizacion,&#39;%Y-%m-%d&#39;) dia, usu.NOMBRE usuario, i.nombre_carrier carrier ,r.DESCRIPCION producto,  count(*) cantidad,   if(usu.nombre=&#39;CLAWI S.A.&#39;,0,r.precio_venta) precio_unitario,(if(usu.nombre=&#39;CLAWI S.A.&#39;,0,r.precio_venta)*count(*)) as bruto, bm.nombre  from sdp_pin p, sdp_paquete a, cce_usuario usu, bac_producto r, bac_carriers i, bac_moneda bm  where p.id_estado_pin=2  and p.ID_PAQUETE = a.ID_PAQUETE  and a.ID_USUARIO = usu.ID_USUARIO  and a.ID_PRODUCTO = r.ID_PRODUCTO  and a.ID_CARRIER = i.ID_CARRIER  and bm.id_moneda = r.id_moneda  and date_format(p.actualizacion, &#39;%Y-%m-%d&#39;) &gt;= $P{bac_desde}  and date_format(p.actualizacion, &#39;%Y-%m-%d&#39;) &lt;= $P{bac_hasta}  group by date_format(p.actualizacion,&#39;%Y-%m-%d&#39;) , usu.NOMBRE, i.nombre_carrier, r.DESCRIPCION, r.precio_venta  union  select &#39;TOTAL&#39; dia, usu.NOMBRE usuario, i.nombre_carrier carrier ,r.DESCRIPCION producto,  count(*) cantidad,   if(usu.nombre=&#39;CLAWI S.A.&#39;,0,r.precio_venta) precio_unitario,(if(usu.nombre=&#39;CLAWI S.A.&#39;,0,r.precio_venta)*count(*)) as bruto, bm.nombre  from sdp_pin p, sdp_paquete a, cce_usuario usu, bac_producto r, bac_carriers i, bac_moneda bm  where p.id_estado_pin = 2  and p.ID_PAQUETE = a.ID_PAQUETE  and a.ID_USUARIO = usu.ID_USUARIO  and a.ID_PRODUCTO = r.ID_PRODUCTO  and a.ID_CARRIER = i.ID_CARRIER  and bm.id_moneda = r.id_moneda  and date_format(p.actualizacion, &#39;%Y-%m-%d&#39;) &gt;= $P{bac_desde}  and date_format(p.actualizacion, &#39;%Y-%m-%d&#39;) &lt;= $P{bac_hasta}  group by usu.NOMBRE, i.nombre_carrier, r.DESCRIPCION, r.precio_venta  order by 1, 2 desc  ) aux</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Envio Mails - Pagos acreditados a MG en el día </Data></Cell>
			<Cell><Data ss:Type="String">select p.id_pago, p.monto_final, p.id_moneda, p.estado,          date_format(p.generacion,&#39;%Y-%m-%d %H:%i:%s&#39;) generacion_pago,          date_format(p.generacion,&#39;%Y-%m-%d&#39;) generacion_a_dia_cerrado,          date_format(p.actualizacion,&#39;%Y-%m-%d %H:%i:%s&#39;) actualizacion_pago,          date_format(p.actualizacion,&#39;%Y-%m-%d&#39;) actualizacion_a_dia_cerrado,          date_format(pdm.fecha,&#39;%Y-%m-%d&#39;) fecha_conciliacion,          CASE pdm.medio_pago WHEN &#39;Pago F¿cil&#39; THEN &#39;Pago Facil&#39; WHEN &#39;Pago Fácil&#39; THEN &#39;Pago Facil&#39; ELSE  pdm.medio_pago END medio_pago,          p.id_pago_portal,          usu.id_usuario, usu.id_portal, usu.id_usuario_portal,          ( select ec.id_cliente_facturador from erp_cliente ec where ec.id_cliente = p.id_cliente ) id_cliente_facturador,          usu.id_tipo_usuario, usu.login, usu.email, date_format(usu.generacion,&#39;%Y-%m-%d&#39;) alta_usuario,          &#39;DM&#39; gateway  from cce_pago p, cce_usuario usu, cce_pago_dm pdm  where usu.id_usuario = p.id_usuario  and p.id_pago = pdm.id_pago  and p.id_portal = 1  and ( p.estado in (&#39;ACREDITADO&#39;)  )  and date(pdm.actualizacion) &gt;= date(now())  UNION  select p.id_pago, p.monto_final, p.id_moneda, p.estado,          date_format(p.generacion,&#39;%Y-%m-%d %H:%i:%s&#39;) generacion_pago,          date_format(p.generacion,&#39;%Y-%m-%d&#39;) generacion_a_dia_cerrado,          date_format(p.actualizacion,&#39;%Y-%m-%d %H:%i:%s&#39;) actualizacion_pago,          date_format(p.actualizacion,&#39;%Y-%m-%d&#39;) actualizacion_a_dia_cerrado,          date_format(pnps.pos_date_time,&#39;%Y-%m-%d&#39;) fecha_conciliacion,          mp.nombre medio_pago,          p.id_pago_portal,          usu.id_usuario, usu.id_portal, usu.id_usuario_portal,          ( select ec.id_cliente_facturador from erp_cliente ec where ec.id_cliente = p.id_cliente ) id_cliente_facturador,          usu.id_tipo_usuario, usu.login, usu.email, date_format(usu.generacion,&#39;%Y-%m-%d&#39;) alta_usuario,          &#39;NPS&#39; gateway  from cce_pago p, cce_usuario usu, cce_pago_nps pnps, bac_medio_pago mp  where usu.id_usuario = p.id_usuario  and p.id_pago = pnps.id_pago  and p.id_portal = 1  and p.id_medio_pago = mp.id_medio_pago  and ( p.estado in (&#39;ACREDITADO&#39;)  )  and date(pnps.actualizacion) &gt;= date(now())  </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Cuenta Corriente - Mercado Pago montos y cantidades por estado de pagos</Data></Cell>
			<Cell><Data ss:Type="String">SELECT p.id_portal, p.estado, pmp.estado_pago_gateway, pmp.status, pmp.status_description, p.id_moneda, SUM(p.monto_final) as monto_total, COUNT(*) AS total  FROM cce_pago_mp pmp, cce_pago p  WHERE pmp.id_pago = p.id_pago  GROUP BY p.id_portal,p.estado, pmp.estado_pago_gateway, pmp.status, pmp.status_description, p.id_moneda</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Cuenta Corriente - Listado de Ventas por producto</Data></Cell>
			<Cell><Data ss:Type="String">select * from (  select p.id_producto Producto, p.codigo_facturacion Codigo_Facturacion, p.nombre Nombre, p.cuenta_contable Cuenta_Contable, p.centro_beneficios Centro_Beneficios,m.nombre Moneda, c.monto_parcial Precio_Unitario, sum(c.monto_final) Monto_Final,  round(c.cotizacion,8) tipo_cambio,  round(sum(c.monto_final) * c.cotizacion,2) Monto_Final_$  from cce_cargo c, bac_producto p, bac_moneda m  where c.estado=&#39;EN_LOTE&#39; and c.id_producto = p.id_producto  and c.id_moneda=m.id_moneda  and ( p.id_portal = $P{Copy_bac_portal} or $P{Copy_bac_portal} = 0 )  and date_format(c.actualizacion, &#39;%Y-%m-%d&#39;) between $P{bac_desde} and $P{bac_hasta}  group by p.id_producto, p.nombre, p.cuenta_contable, p.centro_beneficios, m.nombre, c.monto_parcial, round(c.cotizacion,8)  ) aux</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Log - Mails enviados</Data></Cell>
			<Cell><Data ss:Type="String">select id_mail_registro, de, para, cc, cco, asunto, template_id, mail_estado_id, usuario_id, tipo, reenvios, to_char(fecha_alta,&#39;YYYY-MM-DD HH24:mi:ss&#39;) fecha_alta, to_char(fecha_modif,&#39;YYYY-MM-DD HH24:mi:ss&#39;) fecha_envio, see_image, click_link  from MAIL_REGISTRO  </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Pines - Consumos</Data></Cell>
			<Cell><Data ss:Type="String">select usu.id_usuario, usu.id_usuario_portal, usu.login, usu.email, count(*) cantidad  from sdp_pin p, cce_usuario usu  where p.id_usuario = usu.id_usuario  and p.id_estado_pin = 2 and usu.id_portal=1  group by usu.id_usuario, usu.id_usuario_portal, usu.login, usu.email  order by 5 desc</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Pines - Estados de pines por retailer</Data></Cell>
			<Cell><Data ss:Type="String">select * from (  select usu.nombre usuario, e.nombre estado, count(*) as cantidad  from sdp_pin p, sdp_pin_estado e, sdp_paquete a, cce_usuario usu  where p.id_estado_pin = e.id_pin_estado  and p.id_paquete = a.id_paquete  and a.id_usuario = usu.id_usuario  group by usu.nombre, e.nombre  order by 1, 2  ) aux</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Pines - Exportacion de pines</Data></Cell>
			<Cell><Data ss:Type="String">select * from (  select p.id_paquete, p.id_pin, concat(  substr(convert(p.codigo,char),1,4), &#39;-&#39;,   substr(convert(p.codigo, char),5,4), &#39;-&#39;,  substr(convert(p.codigo, char),9,4),&#39;-&#39;,   substr(convert(p.codigo, char),13,4)  ) codigo  from sdp_pin p  where p.id_paquete = $P{sdp_paquete}   order by p.id_paquete, p.id_pin  ) aux</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Pines - Historia de un paquete</Data></Cell>
			<Cell><Data ss:Type="String">select * from (  select h.id_paquete_estado_historico orden, id_paquete, pe.nombre estado, m.NOMBRE motivo, observaciones,         date_format(h.generacion,&#39;%Y-%m-%d&#39;) generacion   from sdp_paquete_estado_historico h, sdp_paquete_estado pe, sdp_paquete_motivo m  where h.id_paquete_estado = pe.ID_PAQUETE_ESTADO  and h.id_paquete_motivo = m.ID_PAQUETE_MOTIVO  and id_paquete = $P{sdp_paquete}  ) aux</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Pines - Historia de un pin</Data></Cell>
			<Cell><Data ss:Type="String">select * from (  select h.id_pin_estado_historico orden, p.id_pin, ep.nombre estado_pin, h.activo, date_format(h.generacion,&#39;%Y-%m-%d %H:%i:%s&#39;) generacion    from sdp_pin_estado_historico h, sdp_pin_estado ep, sdp_pin p  where p.codigo = $P{sdp_pin}  and h.ID_ESTADO_PIN = ep.ID_PIN_ESTADO  and h.id_pin = p.id_pin  order by id_pin_estado_historico desc  ) aux</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Cuenta Corriente - Resumen de Pagos</Data></Cell>
			<Cell><Data ss:Type="String">select * from (  select portal.nombre portal, date_format(p.actualizacion,&#39;%Y-%m&#39;) actualizacion_pago, pais.nombre pais_Usuario, g.descripcion gateway, mp.nombre medio_pago, m.nombre moneda, SUM(p.monto_final) total, COUNT(*) cantidad_pagos  from cce_pago p, bac_moneda m, bac_gateway g, bac_medio_pago mp, cce_usuario u, bac_pais pais, bac_portal portal  where p.estado=&#39;ACREDITADO&#39;  and m.id_moneda = p.id_moneda  and g.id_gateway = p.id_gateway  and mp.id_medio_pago = p.id_medio_pago  and u.id_usuario = p.id_usuario  and pais.id_pais = u.id_pais  and p.id_portal = portal.id_portal  and ( u.id_pais = $P{Copy_bac_pais} or $P{Copy_bac_pais} = 0 )  and ( p.id_portal = $P{Copy_bac_portal} or $P{Copy_bac_portal} = 0 )  and ( p.id_gateway = $P{bac_gateway_todos} or $P{bac_gateway_todos} = 0 )  and ( p.id_medio_pago = $P{bac_medio_pago_todos} or $P{bac_medio_pago_todos} = 0 )  and date(p.actualizacion) &gt;= $P{bac_desde}  and date(p.actualizacion) &lt;= $P{bac_hasta}  group by portal.nombre, date_format(p.actualizacion,&#39;%Y-%m&#39;) desc,pais.nombre, g.descripcion, mp.nombre, m.nombre  )aux</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Configuraciones - Portales</Data></Cell>
			<Cell><Data ss:Type="String">SELECT ID_PORTAL, NOMBRE  FROM bac_portal</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Pines - Listado de paquetes por retailer</Data></Cell>
			<Cell><Data ss:Type="String">select * from (  select p.id_paquete, pe.NOMBRE estado, usu.NOMBRE, p.descuento, prod.id_producto, prod.nombre producto,           convert(p.precio_venta, char) precio_venta, m.nombre moneda, cantidad_pines, convert(p.medida, char) medida, p.unidad_medida,  p.ID_CARRIER, ca.NOMBRE_CARRIER,          date_format(p.fecha_desde,&#39;%Y-%m-%d&#39;) vigencia_desde,           date_format(p.fecha_vencimiento,&#39;%Y-%m-%d&#39;) vigencia_hasta,           date_format(p.generacion,&#39;%Y-%m-%d&#39;) generacion,           date_format(p.actualizacion,&#39;%Y-%m-%d&#39;) actualizacion,           date_format(p.fecha_baja,&#39;%Y-%m-%d&#39;) fecha_baja,          obs.DESCRIPCION observaciones  from sdp_paquete p, sdp_paquete_estado pe, cce_usuario usu, bac_producto prod, bac_moneda m, bac_carriers ca, sdp_pkt_observaciones obs  where 1=1  and p.id_paquete_estado = pe.ID_PAQUETE_ESTADO  and p.id_usuario = usu.id_usuario  and p.id_producto = prod.id_producto  and p.id_moneda = m.id_moneda  and p.id_carrier = ca.id_carrier  and p.id_observaciones = obs.ID_PKT_OBSERVACIONES  and (p.id_usuario = $P{Copy_bac_retailer} OR $P{Copy_bac_retailer} = 0)  and (p.id_paquete = $P{sdp_paquete} OR $P{sdp_paquete} = 0 )  and (p.id_paquete_estado = $P{Copy_sdp_paquete_estado} or $P{Copy_sdp_paquete_estado} = 0 )  ) aux</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Configuraciones - Monedas</Data></Cell>
			<Cell><Data ss:Type="String">select ID_MONEDA, NOMBRE,      date_format(c.generacion,&#39;%Y-%m-%d&#39;) generacion,      date_format(c.actualizacion,&#39;%Y-%m-%d&#39;) actualizacion,      date_format(c.baja,&#39;%Y-%m-%d&#39;) baja    from bac_moneda c</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Log - Errores en el quemado de pines</Data></Cell>
			<Cell><Data ss:Type="String">select id, id_usuario, id_usuario_portal, codigo_pin, date_format(generacion,&#39;%Y-%m-%d %H:%i:%s&#39;) generacion, error  from sdp_pin_errores  where date_format(generacion, &#39;%Y-%m-%d&#39;) &gt;= $P{bac_desde}  and date_format(generacion, &#39;%Y-%m-%d&#39;) &lt;= $P{bac_hasta}  </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Log - Business Exceptions</Data></Cell>
			<Cell><Data ss:Type="String">select id, clase, metodo, parametros, usuario, date_format(fecha,&#39;%Y-%m-%d %H:%i:%s&#39;) fecha  from log  where date_format(fecha,&#39;%Y-%m-%d&#39;) &gt;= $P{bac_desde}  and date_format(fecha, &#39;%Y-%m-%d&#39;) &lt;= $P{bac_hasta}</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Log - Procesos</Data></Cell>
			<Cell><Data ss:Type="String">select id_gnr_log, to_char(fecha_generacion,&#39;YYYY-MM-DD HH24:mi:ss&#39;) fecha_generacion, ejecucion, proceso, objeto_tipo, objeto_id, nivel, texto  from BAC_GNR_LOG  where ( proceso = $P{bac_gnr_log_proceso} or $P{bac_gnr_log_proceso} = &#39;TODOS&#39; )  and ( nivel = $P{bac_gnr_log_nivel} or $P{bac_gnr_log_nivel} = &#39;TODOS&#39; )  and ( objeto_tipo = $P{bac_gnr_log_objeto_tipo} or $P{bac_gnr_log_objeto_tipo} = &#39;TODOS&#39; )  and trunc(fecha_generacion)&gt;=$P{bac_desde}  and trunc(fecha_generacion)&lt;=$P{bac_hasta}</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Pines - Listado de pines</Data></Cell>
			<Cell><Data ss:Type="String">select * from (  select retailer.login retailer, p.id_pin, ep.nombre estado_pin, p.id_paquete, pae.nombre estado_paquete, convert(p.codigo,char) codigo,           date_format(p.generacion,&#39;%Y-%m-%d&#39;) generacion,           date_format(p.actualizacion,&#39;%Y-%m-%d&#39;) actualizacion,          date_format(p.baja,&#39;%Y-%m-%d&#39;) baja,          concat(usu.Apellido, &#39; &#39;, usu.Nombre) cliente_consumidor  from sdp_pin p  inner join sdp_pin_estado ep on p.id_estado_pin = ep.ID_PIN_ESTADO  inner join sdp_paquete q on p.id_paquete = q.id_paquete  inner join sdp_paquete_estado pae on q.ID_PAQUETE_ESTADO = pae.ID_PAQUETE_ESTADO  inner join cce_usuario retailer on q.ID_USUARIO = retailer.id_usuario  left join cce_usuario usu on p.id_usuario = usu.id_usuario  where  ( q.id_usuario = $P{Copy_bac_retailer} or $P{Copy_bac_retailer} = 0 )  and ( p.codigo = $P{sdp_pin} or $P{sdp_pin} =0 )  and ( p.id_paquete = $P{sdp_paquete} or $P{sdp_paquete} =0 )  and (usu.id_usuario = $P{cce_cliente} or $P{cce_cliente}  = 0 )  ) aux</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Pines - Listado de retailes</Data></Cell>
			<Cell><Data ss:Type="String">select id_usuario, login, email, descuento, nombre, apellido, domicilio, telefono  from cce_usuario  where ( id_portal = $P{Copy_bac_portal} OR $P{Copy_bac_portal} = 0 )  and id_tipo_usuario = 2  </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Pines - Ventas por día</Data></Cell>
			<Cell><Data ss:Type="String">select * from (  select &#39;TOTAL&#39; as dia, usu.NOMBRE usuario, r.DESCRIPCION producto, count(*) cantidad  from sdp_pin p, sdp_paquete a, cce_usuario usu, bac_producto r  where p.id_estado_pin=2  and p.ID_PAQUETE = a.ID_PAQUETE  and a.ID_USUARIO = usu.ID_USUARIO  and a.ID_PRODUCTO = r.ID_PRODUCTO  group by 1, usu.NOMBRE, r.DESCRIPCION  union  select convert(date_format(p.actualizacion,&#39;%Y-%m-%d&#39;), char) dia, usu.NOMBRE usuario, r.DESCRIPCION producto, count(*) cantidad  from sdp_pin p, sdp_paquete a, cce_usuario usu, bac_producto r  where p.id_estado_pin=2  and p.ID_PAQUETE = a.ID_PAQUETE  and a.ID_USUARIO = usu.ID_USUARIO  and a.ID_PRODUCTO = r.ID_PRODUCTO  group by convert(date_format(p.actualizacion,&#39;%Y-%m-%d&#39;), char), usu.NOMBRE, r.DESCRIPCION  order by 1, 2 desc  ) aux</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Productos - Lista de precios</Data></Cell>
			<Cell><Data ss:Type="String">select * from (  select p.id_producto, p.nombre producto, lp.precio_venta precio_venta, m.nombre moneda, date_format(vigencia_desde,&#39;%Y-%m-%d %H:%i:%s&#39;) vigencia_desde,          date_format(vigencia_hasta,&#39;%Y-%m-%d %H:%i:%s&#39;) vigencia_hasta  from bac_producto_lista_precio lp, bac_producto p, bac_moneda m  where lp.id_producto = p.id_producto  and lp.id_moneda = m.id_moneda  and ( p.id_portal = $P{Copy_bac_portal} or $P{Copy_bac_portal} = 0)  and ( lp.id_producto = $P{Copy_bac_producto_dependiente_portal} or $P{Copy_bac_producto_dependiente_portal} = 0)  order by vigencia_desde desc  ) aux</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Usuarios - Listado de usuarios</Data></Cell>
			<Cell><Data ss:Type="String">select *  from bac_users  </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Configuraciones - IVA</Data></Cell>
			<Cell><Data ss:Type="String">select ID_IVA, PORCENTAJE,      date_format(c.vigencia_desde,&#39;%Y-%m-%d&#39;) vigencia_desde,      date_format(c.vigencia_hasta,&#39;%Y-%m-%d&#39;) vigencia_hasta,      date_format(c.generacion,&#39;%Y-%m-%d&#39;) generacion,      date_format(c.actualizacion,&#39;%Y-%m-%d&#39;) actualizacion,      date_format(c.baja,&#39;%Y-%m-%d&#39;) baja   from bac_iva c</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Configuraciones - Paises</Data></Cell>
			<Cell><Data ss:Type="String">select * from (  select pais.id_pais, pais.nombre pais  from bac_pais pais  ) aux  </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Configuraciones - Procesos croneados</Data></Cell>
			<Cell><Data ss:Type="String">select id_proceso, nombre, descripcion, date_format(inicio,&#39;%Y-%m-%d&#39;) inicio, frecuencia, clase, scheduling, date_format(generacion,&#39;%Y-%m-%d&#39;) generacion,  date_format(actualizacion,&#39;%Y-%m-%d&#39;) actualizacion,  date_format(baja,&#39;%Y-%m-%d&#39;) baja  from bac_procesos  </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Configuraciones - Productos</Data></Cell>
			<Cell><Data ss:Type="String">select * from (  select prod.id_producto, portal.NOMBRE portal, prod.nombre, prod.descripcion,           prod.precio_venta precio_venta, moneda.NOMBRE moneda, prod.medida medida, prod.unidad_medida,           prod.codigo_facturacion, prod.cuenta_contable, prod.centro_beneficios, date_format(precio.VIGENCIA_DESDE, &#39;%Y-%m-%d&#39;) as Vigente_desde, date_format(precio.VIGENCIA_HASTA, &#39;%Y-%m-%d&#39;) as Vigente_hasta  from bac_producto prod, bac_portal portal, bac_moneda moneda, bac_producto_lista_precio precio  where prod.ID_PORTAL = portal.ID_PORTAL  and prod.ID_MONEDA = moneda.ID_MONEDA  and prod.id_producto = precio.id_producto  ) aux</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Configuraciones - Tipos de clientes</Data></Cell>
			<Cell><Data ss:Type="String">select id_tipo_usuario, nombre, date_format(generacion,&#39;%Y-%m-%d&#39;) generacion, date_format(actualizacion,&#39;%Y-%m-%d&#39;) actualizacion,   date_format(baja,&#39;%Y-%m-%d&#39;) baja  from  cce_tipo_usuario</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Controles - Cargos sin respuesta de Presea</Data></Cell>
			<Cell><Data ss:Type="String">select * from (  SELECT id_cliente,          id_cargo,          date_format(fecha_cargo, &#39;%d-%m-%Y&#39;) fecha_cargo,          descripcion,          m.nombre moneda,          precio_final,          id_lote,          tipo_lote,          date_format(fecha_cierre_lote, &#39;%d-%m-%Y&#39;) fecha_cierre_lote,          id_movimiento,         c.id_portal,         txt_envio,          txt_respuesta     FROM erp_cargo c, bac_moneda m    WHERE      c.txt_respuesta IS NULL      and c.txt_envio IS NOT NULL      and c.id_moneda = m.id_moneda      and ( c.id_portal = $P{Copy_bac_portal} or $P{Copy_bac_portal} = 0 )  ) aux</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Configuraciones - Mail Templates</Data></Cell>
			<Cell><Data ss:Type="String">select id_mail_template, descripcion, descripcion_amigable, prioridad, de, asunto, alias, tipo, sub_template  from mail_templates  </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Clientes - Listado de clientes</Data></Cell>
			<Cell><Data ss:Type="String">select * from (  select c.id_usuario, p.nombre portal, c.id_usuario_portal, cliente.id_cliente_facturador, t.nombre tipo_usuario, c.login, c.email, c.descuento,      c.nombre, c.apellido, c.domicilio, c.codigo_postal,       pais.nombre pais, prov.nombre provincia, c.telefono,      cliente.estado estado_cuenta,      date_format(c.generacion,&#39;%Y-%m-%d&#39;) generacion,      date_format(c.actualizacion,&#39;%Y-%m-%d&#39;) actualizacion,      date_format(c.baja,&#39;%Y-%m-%d&#39;) baja  from cce_usuario c, bac_portal p, cce_tipo_usuario t, bac_pais pais, bac_provincia prov, cce_cliente cliente, cce_usuario_cliente usucli  where c.ID_PORTAL = p.ID_PORTAL  and c.ID_TIPO_USUARIO = t.ID_TIPO_USUARIO  and c.id_pais = pais.id_pais  and c.id_provincia = prov.id_provincia  and c.id_usuario = usucli.id_usuario  and usucli.id_cliente = cliente.id_cliente  and ( c.id_portal = $P{Copy_bac_portal} or $P{Copy_bac_portal} = 0 )  and ( c.id_tipo_usuario = $P{Copy_cce_tipo_cliente} or $P{Copy_cce_tipo_cliente} = 0 )  and ( c.id_provincia = $P{Copy_bac_provincia} or $P{Copy_bac_provincia} = 0 )  and ( c.id_usuario = $P{cce_cliente} or $P{cce_cliente} = 0 )  and ( c.id_usuario_portal = $P{cce_usuario_portal} or $P{cce_usuario_portal} = 0 )  and ( cliente.estado = $P{Copy_bac_estado_cuenta} or $P{Copy_bac_estado_cuenta} = &#39;TODOS&#39; )  ) aux</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Configuraciones - Carriers</Data></Cell>
			<Cell><Data ss:Type="String">select id_carrier, nombre_carrier, descripcion_carrier, date_format(generacion,&#39;%Y-%m-%d&#39;) generacion  from bac_carriers</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Configuraciones - Condicion ante el IVA</Data></Cell>
			<Cell><Data ss:Type="String">select ID_CONDICION_IVA, CONDICION_IVA_IDENTIFICADOR, CONDICION, VISIBLE,      date_format(c.generacion,&#39;%Y-%m-%d&#39;) generacion,      date_format(c.actualizacion,&#39;%Y-%m-%d&#39;) actualizacion,      date_format(c.baja,&#39;%Y-%m-%d&#39;) baja   from cce_condicion_iva c</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Configuraciones - Empresas</Data></Cell>
			<Cell><Data ss:Type="String">SELECT ID_EMPRESA, NOMBRE  FROM bac_empresa</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Configuraciones - Estados de paquetes de pines</Data></Cell>
			<Cell><Data ss:Type="String">select id_paquete_estado, nombre, descripcion, manual, activo, date_format(generacion,&#39;%Y-%m-%d&#39;) generacion   from sdp_paquete_estado</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Configuraciones - Estados de pines</Data></Cell>
			<Cell><Data ss:Type="String">select id_pin_estado, nombre, descripcion, activo, facturable, date_format(generacion,&#39;%Y-%m-%d&#39;) generacion  from sdp_pin_estado  </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Configuraciones - Mail Estados</Data></Cell>
			<Cell><Data ss:Type="String">select ID_MAIL_ESTADO, DESCRIPCION, INTENTOS, FRECUENCIA  from mail_estados</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Configuraciones - Provincias</Data></Cell>
			<Cell><Data ss:Type="String">select id_provincia, prov.nombre, pais.id_pais, pais.nombre pais  from bac_provincia prov, bac_pais pais  where prov.id_pais = pais.id_pais</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Cuenta Corriente - Listado de cargos</Data></Cell>
			<Cell><Data ss:Type="String">select * from (  select usu.id_usuario, usu.id_portal, usu.id_usuario_portal, usu.login, usu.email,          c.id_cargo, c.id_lote, c.id_comprobante_portal, c.descripcion, round(c.cantidad) cantidad, c.monto_final,          m.nombre moneda, c.estado, c.id_pago,  c.tipo_resp_iva_cliente, lot.comprobante_tipo, lot.comprobante_numero,          date_format(c.generacion,&#39;%Y-%m-%d %H:%i:%s&#39;) generacion,          date_format(c.actualizacion,&#39;%Y-%m-%d %H:%i:%s&#39;) actualizacion,          date_format(c.baja,&#39;%Y-%m-%d %H:%i:%s&#39;) baja,          usu.id_pais, usu.localidad, usu.nombre, usu.apellido, usu.codigo_postal, usu.domicilio, usu.telefono  from cce_cargo c, bac_producto p, bac_moneda m, cce_usuario_cliente uc, cce_usuario usu, cce_lote lot, erp_cargo er  where c.id_producto = p.id_producto  and c.id_moneda = m.id_moneda  and c.id_cliente = uc.id_cliente  and uc.id_usuario = usu.id_usuario  and c.id_lote = lot.id_lote  and ( er.id_portal = $P{Copy_bac_portal} or $P{Copy_bac_portal} = 0 )  and ( uc.id_usuario = $P{cce_cliente} or $P{cce_cliente} = 0 )  and ( usu.id_usuario_portal = $P{cce_usuario_portal} or $P{cce_usuario_portal} = 0 )  and (c.estado = $P{Copy_cce_estado_cargo} or $P{Copy_cce_estado_cargo} = &#39;TODOS&#39; )  and c.generacion between $P{bac_desde} and $P{bac_hasta}  and ( ($P!{cce_tipo_producto}) = 0 or (p.id_producto in ($P!{cce_tipo_producto}) ) )  and c.id_cargo=er.id_cargo  ) aux      </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Controles - Cargos enviados que no figuran en ERP_MOVIMIENTO</Data></Cell>
			<Cell><Data ss:Type="String">select * from (  select c.id_cargo, c.id_producto, p.nombre producto,          c.id_cliente, cc.id_usuario, c.id_lote, c.monto_final,          date_format(l.generacion,&#39;%Y-%m-%d&#39;) as generacion_lote,         date_format(c.generacion,&#39;%Y-%m-%d&#39;) as generacion_cargo,         date_format(c.actualizacion,&#39;%Y-%m-%d&#39;) as actualizacion_cargo,          c.estado,          date_format(fecha_cierre_lote,&#39;%Y-%m-%d&#39;) as fecha_cierre_lote,          e.codigo_respuesta,          e.txt_envio,         e.txt_respuesta  from cce_cargo c, erp_cargo e, cce_lote l, bac_producto p, cce_usuario_cliente cc  where c.id_cargo = e.id_cargo  and c.id_lote = l.id_lote  and c.id_producto = p.id_producto  and c.ID_CLIENTE = cc.ID_CLIENTE  and l.generacion &gt;= $P{bac_desde}  and l.generacion &lt;= $P{bac_hasta}  and (p.id_portal = $P{bac_portal_fac} or $P{bac_portal_fac} = 0)  and l.COMPROBANTE_NUMERO is null  and l.estado &lt;&gt; &#39;ANULADO&#39;  and txt_respuesta is not null  ) aux;</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC-Controles - Usuarios con mas de 1 pago en el dia</Data></Cell>
			<Cell><Data ss:Type="String">select * from (  select u.id_portal portal, u.id_usuario_portal usuarioPortal, u.id_usuario usuario, u.login login, u.email email, p.id_cliente cliente, date_format(p.generacion,&#39;%Y-%m-%d&#39;) generacion, g.descripcion gateway, count(*) cantidad  from cce_pago p, cce_usuario u, bac_gateway g  where p.estado = &#39;ACREDITADO&#39;  and p.id_usuario = u.id_usuario  and p.id_gateway=g.id_gateway  and ( p.id_portal = $P{Copy_bac_portal} or $P{Copy_bac_portal} = 0 )  and ( p.id_gateway = $P{bac_gateway_todos} or $P{bac_gateway_todos} = 0   )  and date(p.generacion) &gt;= $P{bac_desde}  and date(p.generacion) &lt;= $P{bac_hasta}  group by u.id_portal , u.id_usuario_portal , u.id_usuario , u.login , u.email , p.id_cliente , date_format(p.generacion,&#39;%Y-%m-%d&#39;) , g.descripcion  having count(*) &gt;1  )aux  ;</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Detalle Avisos Activos</Data></Cell>
			<Cell><Data ss:Type="String">select u.usuario_id, u.usu_apodo, u.usu_apellido, u.usu_nombre, u.usu_email,u.USU_COD_AREA_TEL, u.USU_TELEFONO,decode(u.tius_id,1,&#39;BK&#39;,2,&#39;WEB&#39;)TU   ,cu.estado, cu.CONDICION,count(a.AV_ID)AVISOS_ACTIVOS  from sacar.sac_usuario u, sacar.sac_aviso a, sacar.cce_cuenta cu  where 0=0  and av_estado = 3  and a.usuario_id = u.usuario_id  and cu.usuario_id = u.usuario_id  group by u.usuario_id, u.usu_apodo, u.usu_apellido, u.usu_nombre, u.usu_email ,u.USU_COD_AREA_TEL, u.USU_TELEFONO,u.tius_id   ,cu.estado, cu.CONDICION  order by usuario_id asc</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Limite de credito Usuarios No Suspendidos</Data></Cell>
			<Cell><Data ss:Type="String">SELECT  cuenta.tipo_cliente_codigo as tipo_cliente,         (SELECT limite.limite_credito            FROM SACAR.cce_limite_cuenta limite           WHERE limite.codigo = cuenta.tipo_cliente_codigo) as limite_credito,         cuenta.usuario_id as usuario_id,         (SELECT usuario.usu_apodo            FROM SACAR.sac_usuario usuario           WHERE usuario.usuario_id = cuenta.usuario_id) as usuario_apodo,         &#39;N&#39; as usuario_suspendido,         cuenta.ID as cuenta_id, cuenta.estado as cuenta_estado,           NVL ((SELECT SUM (importe_movimiento)                   FROM SACAR.erp_movimiento em                  WHERE em.id_usuario = cuenta.usuario_id),                0               )         + NVL ((SELECT SUM (lote.monto)                   FROM SACAR.cce_lote lote                  WHERE lote.cuenta_id = cuenta.ID AND lote.estado = &#39;CERRADO&#39;),                0               )         + NVL ((SELECT SUM (cargo.monto)                   FROM SACAR.cce_cargo cargo                  WHERE cargo.cuenta_id = cuenta.ID                    AND cargo.estado = &#39;CONFIRMADO&#39;),                0               )         - NVL ((SELECT SUM (pago.importe_pago)                   FROM SACAR.erp_pagos_on pago                  WHERE pago.id_usuario = cuenta.usuario_id                    AND (   pago.codigo_respuesta IS NULL                         OR (    pago.codigo_respuesta IS NOT NULL                             AND pago.codigo_respuesta &lt;&gt; &#39;OK&#39;                            )                        )),                0               ) as cuenta_saldo  FROM SACAR.cce_cuenta cuenta  WHERE cuenta.usuario_id = NVL((SELECT usuario.usuario_id                                FROM SACAR.sac_usuario usuario                                WHERE usuario.usuario_id = cuenta.usuario_id and usuario.usu_suspendido = &#39;N&#39;),0)    AND SIGN ((SELECT limite.limite_credito                    FROM SACAR.cce_limite_cuenta limite                   WHERE limite.codigo = cuenta.tipo_cliente_codigo)               - (  NVL ((SELECT SUM (importe_movimiento)                            FROM SACAR.erp_movimiento em                           WHERE em.id_usuario = cuenta.usuario_id),                         0                        )                  + NVL ((SELECT SUM (lote.monto)                            FROM SACAR.cce_lote lote                           WHERE lote.cuenta_id = cuenta.ID                             AND lote.estado = &#39;CERRADO&#39;),                         0                        )                  + NVL ((SELECT SUM (cargo.monto)                            FROM SACAR.cce_cargo cargo                           WHERE cargo.cuenta_id = cuenta.ID                             AND cargo.estado = &#39;CONFIRMADO&#39;),                         0                        )                  - NVL ((SELECT SUM (pago.importe_pago)                            FROM SACAR.erp_pagos_on pago                           WHERE pago.id_usuario = cuenta.usuario_id                             AND DECODE(pago.codigo_respuesta, NULL, &#39;NO_OK&#39;, pago.codigo_respuesta) &lt;&gt; &#39;OK&#39;),                         0                        )                 )              ) &lt; 0;</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Txs PS Mayores a 500 - 8AM</Data></Cell>
			<Cell><Data ss:Type="String">SELECT   padre.*, u2.usu_apodo apodo_vendedor,           DECODE (u2.tius_id, 1, &#39;BK&#39;, 2, &#39;WEB&#39;) tuv,           u2.usu_email mail_vendedor      FROM (SELECT u.usuario_id comprador, u.usu_apodo, u.usu_email,   to_char (u.usu_fecha_acepta_condiciones, &#39;DD/MM/RRRR&#39;) Fecha_Condiciones,   to_char (o.generacion, &#39;DD/MM/RRRR HH24:MI&#39;) Fecha_Generacion,                   ca.transaccion_id, ca.aviso_id, ca.aviso_titulo,                   ca.aviso_moneda, ca.aviso_precio, o.vendedor_id vendedor,                   bsq.descripcion_l1              FROM sacar.pgs_operacion o,                   sacar.sac_usuario u,                   sacar.cce_cargo ca,                   sacar.sac_aviso a,                   sacar.bsq_agrupador_categoria bsq             WHERE o.generacion &gt; sysdate - 1 AND o.estado = &#39;PENDIENTE&#39;               AND o.comprador_id = u.usuario_id               AND ca.ID = o.cargo_id               AND ca.aviso_precio &gt;= 500               AND ca.aviso_id = a.av_id               AND a.cate_id = bsq.categoria_id) padre,           sacar.sac_usuario u2     WHERE 0 = 0 AND padre.vendedor = u2.usuario_id  order by 5  </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Txs PS Mayores a 500 - 16PM</Data></Cell>
			<Cell><Data ss:Type="String">SELECT   padre.*, u2.usu_apodo apodo_vendedor,           DECODE (u2.tius_id, 1, &#39;BK&#39;, 2, &#39;WEB&#39;) tuv,           u2.usu_email mail_vendedor      FROM (SELECT u.usuario_id comprador, u.usu_apodo, u.usu_email,   to_char (u.usu_fecha_acepta_condiciones, &#39;DD/MM/RRRR&#39;) Fecha_Condiciones,   to_char (o.generacion, &#39;DD/MM/RRRR&#39;) Fecha_Generacion,                   ca.transaccion_id, ca.aviso_id, ca.aviso_titulo,                   ca.aviso_moneda, ca.aviso_precio, o.vendedor_id vendedor,                   bsq.descripcion_l1              FROM sacar.pgs_operacion o,                   sacar.sac_usuario u,                   sacar.cce_cargo ca,                   sacar.sac_aviso a,                   sacar.bsq_agrupador_categoria bsq             WHERE TO_DATE (TRUNC (o.generacion),&#39;DD/MM/RRRR&#39;) =                                                   TO_DATE (TRUNC (SYSDATE),&#39;DD/MM/RRRR&#39;)               AND o.estado = &#39;PENDIENTE&#39;               AND o.comprador_id = u.usuario_id               AND ca.ID = o.cargo_id               AND ca.aviso_precio &gt;= 500               AND ca.aviso_id = a.av_id               AND a.cate_id = bsq.categoria_id) padre,           sacar.sac_usuario u2     WHERE 0 = 0 AND padre.vendedor = u2.usuario_id  order by 5  </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Destaques contratados el dia anterior</Data></Cell>
			<Cell><Data ss:Type="String">select u.usuario_id, u.usu_apodo, u.usu_nombre, u.usu_apellido, u.usu_email  ,decode(u.tius_id,1,&#39;BK&#39;,2,&#39;WEB&#39;)TU  , u.USU_COD_AREA_TEL,u.USU_TELEFONO, count(ca.id)CANTIDAD,sum(ca.monto)MONTO, ca.DESTAQUE_TITULO  ,to_char(ca.generacion,&#39;DD/MM/RRRR&#39;)FECHA, to_char(max(trunc(aud.AUD_TIMESTAMP)),&#39;DD/MM/RRRR&#39;)FECHA_CAMBIO, decode(aud.TIUS_ID,1,&#39;BK&#39;,2,&#39;WEB&#39;)Se_Transformo_En  from sacar.sac_usuario u, sacar.cce_cargo ca, sacar.cce_cuenta cu, sacar.aud_sac_usuario aud  where 0=0  and cu.id = ca.cuenta_id  and cu.USUARIO_ID = u.usuario_id  and ca.TIPO_CARGO_ID = 2  and aud.USUARIO_ID (+) = u.usuario_id  and trunc(ca.GENERACION)  like  trunc(sysdate) -1  group by u.usuario_id, u.usu_apodo, u.usu_nombre, u.usu_apellido, u.usu_email, u.tius_id  , u.USU_COD_AREA_TEL,u.USU_TELEFONO,  ca.DESTAQUE_TITULO,to_char(ca.generacion,&#39;DD/MM/RRRR&#39;)  ,to_char(aud.AUD_TIMESTAMP,&#39;DD/MM/RRRR&#39;), aud.tius_id  order by Usuario_id</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Destaques del día anterior</Data></Cell>
			<Cell><Data ss:Type="String">SELECT padre.*, u2.usu_apodo apodo_vendedor,decode(u2.tius_id,1,&#39;BK&#39;,2,&#39;WEB&#39;)TUV  , u2.usu_email mail_vendedor    FROM (    SELECT u.usuario_id comprador, u.usu_apodo, u.usu_email                  ,to_char(u.usu_fecha_acepta_condiciones,&#39;DD/MM/RRRR&#39;)                  ,to_char(o.generacion,&#39;DD/MM/RRRR&#39;)                 ,ca.transaccion_id, ca.aviso_id, ca.aviso_titulo,ca.aviso_moneda                 ,ca.aviso_precio, o.vendedor_id vendedor, bsq.DESCRIPCION_L1            FROM sacar.pgs_operacion o, sacar.sac_usuario u, sacar.cce_cargo ca            ,sacar.sac_aviso a, sacar.BSQ_AGRUPADOR_CATEGORIA bsq           WHERE TO_DATE (o.generacion, &#39;DD/MM/RRRR&#39;) =                                     TO_DATE ( trunc(SYSDATE - 1), &#39;DD/MM/RRRR&#39;)             AND o.estado = &#39;PENDIENTE&#39;             AND o.comprador_id = u.usuario_id             AND ca.ID = o.cargo_id             AND ca.aviso_precio &gt;= 500             and ca.aviso_id = a.av_id             and a.cate_id = bsq.categoria_id             ) padre,         sacar.sac_usuario u2   WHERE 0 = 0 AND padre.vendedor = u2.usuario_id</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Usuarios Registrados entre Fechas</Data></Cell>
			<Cell><Data ss:Type="String">select u.USUARIO_ID, u.USU_APODO, u.USU_NOMBRE, u.USU_APELLIDO, u.USU_EMAIL   from sacar.sac_usuario u, sacar.sac_usuario_registro ur  where 0=0  and trunc(u.USU_FECHA_ACEPTA_CONDICIONES) between  to_date ($P{filtro_fecha_desde},&#39;DD/MM/RRRR&#39;)  and to_date($P{filtro_fecha_hasta},&#39;DD/MM/RRRR&#39;)  and u.USUARIO_ID = ur.USUARIO_ID  and ur.ESTADO_REGISTRO_ID = 1</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Consistencia - Lotes que van a generarse</Data></Cell>
			<Cell><Data ss:Type="String">SELECT   cu.ID, c.destino, cu.tipo_cliente_codigo, cu.envio_estado, cu.estado,           to_char((cu.fecha_lote_mo + lim.cierre_lote_mo),&#39;dd/mm/yyyy&#39;) AS prox_lote_mo,           to_char((cu.fecha_lote_ps + lim.cierre_lote_ps),&#39;dd/mm/yyyy&#39;) AS prox_lote_ps,           u.usu_suspendido, SUM (c.monto) AS montot      FROM sacar.cce_cargo c,           sacar.cce_cuenta cu,           sacar.sac_usuario u,           sacar.cce_limite_cuenta lim     WHERE c.cuenta_id = cu.ID       AND cu.usuario_id = u.usuario_id       AND cu.tipo_cliente_codigo = lim.codigo       AND c.estado = &#39;CONFIRMADO&#39;  --condiciones que cumple para enlotar       AND cu.envio_estado = &#39;RECIBIDO&#39;       AND u.usu_suspendido = &#39;N&#39;       AND cu.estado = &#39;HABILITADA&#39;       AND (     --MO               (    c.destino = &#39;MAS_OPORTUNIDADES&#39;                AND TRUNC (cu.fecha_lote_mo) + lim.cierre_lote_mo &lt;                                                                 TRUNC (SYSDATE)               )            OR   --PS               (    c.destino = &#39;PAGO_SEGURO&#39;                AND TRUNC (cu.fecha_lote_ps) + lim.cierre_lote_ps &lt;                                                                 TRUNC (SYSDATE)               )           )  GROUP BY cu.ID,           c.destino,           cu.tipo_cliente_codigo,           cu.envio_estado,           cu.estado,           cu.fecha_lote_mo,           lim.cierre_lote_mo,           cu.fecha_lote_ps,           lim.cierre_lote_ps,           u.usu_suspendido    HAVING SUM (c.monto) &gt; 3 OR SUM (c.monto) &lt; 0</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Monitoreo - Cantidad de usuarios que no validaron su registro ayer</Data></Cell>
			<Cell><Data ss:Type="String">select count(*) cantidad  from sacar.sac_usuario_registro ur, sacar.sac_usuario u  where ur.estado_registro_id = 1  and ur.usuario_id = u.usuario_id  and trunc(u.USU_FECHA_INGRESO) = trunc(sysdate - 1)</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Consistencia - Cuentas de PS con saldo &lt;&gt; 0</Data></Cell>
			<Cell><Data ss:Type="String">SELECT c.ID, c.usuario_id, u.usu_apodo,         NVL ((SELECT SUM (m.importe_movimiento)                 FROM sacar.erp_movimiento m                WHERE m.id_usuario = c.usuario_id                  AND m.tipo_cuenta_corriente = &#39;PS&#39;),              0             ) ctacte,         NVL ((SELECT SUM (cargo.monto)                 FROM sacar.cce_cargo cargo                WHERE cargo.destino = &#39;PAGO_SEGURO&#39;                  AND cargo.estado = &#39;CONFIRMADO&#39;                  AND cargo.cuenta_id = c.ID),              0             ) confirmado,         NVL ((SELECT SUM (cargo.monto)                 FROM sacar.cce_lote lote, sacar.cce_cargo cargo                WHERE lote.estado = &#39;CERRADO&#39;                  AND lote.ID = cargo.lote_id                  AND cargo.estado = &#39;EN_LOTE&#39;                  AND cargo.destino = &#39;PAGO_SEGURO&#39;                  AND cargo.cuenta_id = c.ID),              0             ) en_lote    FROM sacar.cce_cuenta c, sacar.sac_usuario u   WHERE c.usuario_id = u.usuario_id     AND ( (   NVL ((SELECT SUM (m.importe_movimiento)                     FROM sacar.erp_movimiento m                    WHERE m.id_usuario = c.usuario_id                      AND m.tipo_cuenta_corriente = &#39;PS&#39;),                  0                 ) +           NVL ((SELECT SUM (cargo.monto)                     FROM sacar.cce_cargo cargo                    WHERE cargo.destino = &#39;PAGO_SEGURO&#39;                      AND cargo.estado = &#39;CONFIRMADO&#39;                      AND cargo.cuenta_id = c.ID),                  0                 ) +           NVL ((SELECT SUM (cargo.monto)                     FROM sacar.cce_lote lote, sacar.cce_cargo cargo                    WHERE lote.estado = &#39;CERRADO&#39;                      AND lote.ID = cargo.lote_id                      AND cargo.estado = &#39;EN_LOTE&#39;                      AND cargo.destino = &#39;PAGO_SEGURO&#39;                      AND cargo.cuenta_id = c.ID),                  0                 ) ) &lt;&gt; 0         )</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - DDestaques Dia Anterior</Data></Cell>
			<Cell><Data ss:Type="String">select u.usuario_id, u.usu_apodo, u.usu_nombre, u.usu_apellido, u.usu_email  ,decode(u.tius_id,1,&#39;BK&#39;,2,&#39;WEB&#39;)TU  , u.USU_COD_AREA_TEL,u.USU_TELEFONO, count(ca.id)CANTIDAD,sum(ca.monto)MONTO, ca.DESTAQUE_TITULO  ,to_char(ca.generacion,&#39;DD/MM/RRRR&#39;)FECHA, to_char(max(trunc(aud.AUD_TIMESTAMP)),&#39;DD/MM/RRRR&#39;)FECHA_CAMBIO, decode(aud.TIUS_ID,1,&#39;BK&#39;,2,&#39;WEB&#39;)Se_Transformo_En  from sacar.sac_usuario u, sacar.cce_cargo ca, sacar.cce_cuenta cu, sacar.aud_sac_usuario aud  where 0=0  and cu.id = ca.cuenta_id  and cu.USUARIO_ID = u.usuario_id  and ca.TIPO_CARGO_ID = 2  and aud.USUARIO_ID (+) = u.usuario_id  and trunc(ca.GENERACION)  like  trunc(sysdate) -1  group by u.usuario_id, u.usu_apodo, u.usu_nombre, u.usu_apellido, u.usu_email, u.tius_id  , u.USU_COD_AREA_TEL,u.USU_TELEFONO,  ca.DESTAQUE_TITULO,to_char(ca.generacion,&#39;DD/MM/RRRR&#39;)  ,to_char(aud.AUD_TIMESTAMP,&#39;DD/MM/RRRR&#39;), aud.tius_id  order by Usuario_id</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Pago Seguro - Mediaciones </Data></Cell>
			<Cell><Data ss:Type="String">select v.usuario_id vendedor_id, v.usu_apodo vendedor_apodo,         c.usuario_id comprador_id, c.usu_apodo comprador_apodo,         o.CARGO_ID,          m.id mediacion_id,         m.estado mediacion_estado,         m.valor_comprador,         m.valor_vendedor,         to_char(m.generacion,&#39;yyyy/mm/dd hh24:mi&#39;) as mediacion_generacion,         to_char(m.actualizacion,&#39;yyyy/mm/dd hh24:mi&#39;) as mediacion_actualizacion,         m.texto,         m.actualizador  from sacar.pgs_operacion o, sacar.pgs_mediacion m, sacar.sac_usuario v, sacar.sac_usuario c  where o.MEDIACION_ID = m.id  and o.cargo_id is not null  and o.vendedor_id = v.usuario_id  and o.comprador_id = c.usuario_id  and (   $P{MO_reporting_filtro_apodo_vendedor} = &#39;Apodo Vendedor&#39;  or  lower(v.usu_apodo) like lower($P{MO_reporting_filtro_apodo_vendedor})  )  and   (  $P{MO_reporting_filtro_apodo_comprador} = &#39;Apodo Comprador&#39;  OR  lower(c.usu_apodo) like lower($P{MO_reporting_filtro_apodo_comprador})  )  and (  $P{MO_reporting_filtro_cargo_id} = 0 OR  o.cargo_id = $P{MO_reporting_filtro_cargo_id}  )  and (  $P{MO_reporting_filtro_operacion_id} = 0 OR  o.id = $P{MO_reporting_filtro_operacion_id}  )  </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Usuarios Registrados Mery</Data></Cell>
			<Cell><Data ss:Type="String">select u.USU_APODO,         u.USU_NOMBRE,         u.USU_APELLIDO,         u.USU_EMAIL,         to_char(ur.USU_FECHA_NAC,&#39;DD/MM/RRRR&#39;)as Fecha Nac,         (select PRV_NOMBRE from sacar.sac_provincias where  PRV_ID=u.PRV_ID) AS provincia,          u.USU_NEWSLETTER,          u.USU_SEXO  from sacar.sac_usuario u, sacar.sac_usuario_registro ur  where u.usuario_id = ur.usuario_id  </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Consistencia - Operaciones de PS PENDIENTES hace mas de 14 días</Data></Cell>
			<Cell><Data ss:Type="String">select id, cargo_id, comprador_id, vendedor_id, estado, to_char(generacion,&#39;dd/mm/yyyy&#39;) generacion, to_char(actualizacion,&#39;dd/mm/yyyy&#39;) actualizacion  from sacar.pgs_operacion  where estado = &#39;PENDIENTE&#39;  and actualizacion &lt; sysdate - 14  and generacion &gt;= to_date (&#39;01-01-2009&#39;,&#39;dd-mm-yyyy&#39;)</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Consistencia - Operaciones PS NUEVAs cuya calificacion ya fue definida</Data></Cell>
			<Cell><Data ss:Type="String">select id, cargo_id, comprador_id, vendedor_id, estado, to_char(generacion,&#39;dd/mm/yyyy&#39;) generacion, to_char(actualizacion,&#39;dd/mm/yyyy&#39;) actualizacion  from sacar.pgs_operacion o  where estado = &#39;NUEVA&#39;  and 2&lt;= (      select count(1)      from sacar.cal_calificacion a, sacar.cce_cargo c      where a.transaccion_id = c.transaccion_id      and c.id = o.cargo_id      and a.estado in (&#39;CONFIRMADA&#39;,&#39;RECALIFICACION CONFIRMADA&#39;,&#39;VENCIDA&#39;)  )</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Consistencia - Cargos de transacciones sin PS GENERADOs hace mas de 26 dias </Data></Cell>
			<Cell><Data ss:Type="String">SELECT u.usuario_id,          u.usu_apodo,          c.ID,          c.tipo_cargo_id,          c.cuenta_id,          c.monto,          TO_CHAR(c.generacion, &#39;dd/mm/yyyy&#39;) generacion,          TO_CHAR(c.actualizacion, &#39;dd/mm/yyyy&#39;) actualizacion,          c.estado,          c.origen,          c.destino,          c.aviso_id     FROM sacar.cce_cargo c,          sacar.cce_cuenta a,          sacar.sac_usuario u    WHERE c.cuenta_id = a.ID      AND a.usuario_id = u.usuario_id      AND c.generacion &lt; (SYSDATE - 26)      AND c.estado = &#39;GENERADO&#39;      AND NOT EXISTS (SELECT 1                        FROM sacar.pgs_operacion o                       WHERE o.cargo_id = c.ID)</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Consistencia - Calificaciones PENDIENTEs sin PS hace mas de 26 días</Data></Cell>
			<Cell><Data ss:Type="String">SELECT /*+ NO_CPU_COSTING */ a.ID,          a.transaccion_id,          a.origen,          a.usuario_calificador_id,          a.usuario_calificado_id,          a.valoracion,          a.resultado_venta,          TO_CHAR(a.generacion, &#39;dd/mm/yyyy&#39;) generacion,          TO_CHAR(a.actualizacion, &#39;dd/mm/yyyy&#39;) actualizacion,          estado,          estado_contraparte,          motivo_no_realizacion_id,          a.aviso_id     FROM sacar.cal_calificacion a    WHERE a.generacion &lt; (SYSDATE - 26)      AND a.estado = &#39;PENDIENTE&#39;      AND NOT EXISTS (SELECT 1                        FROM sacar.pgs_operacion o,                             sacar.cce_cargo c                       WHERE o.cargo_id = c.ID                         AND c.transaccion_id = a.transaccion_id)</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Consistencia - Cargos GENERADOs hace mas de 26 dias con calificacion confirmada</Data></Cell>
			<Cell><Data ss:Type="String">SELECT u.usuario_id,          u.usu_apodo,          c.ID,          c.tipo_cargo_id,          c.cuenta_id,          c.monto,          TO_CHAR(c.generacion, &#39;dd/mm/yyyy&#39;) generacion,          TO_CHAR(c.actualizacion, &#39;dd/mm/yyyy&#39;) actualizacion_cargo,          c.estado,          c.origen,          c.destino,          c.aviso_id,          cvendedor.estado,          cvendedor.estado_contraparte,          cvendedor.resultado_venta,          TO_CHAR(cvendedor.actualizacion, &#39;dd/mm/yyyy&#39;) actualizacion_calificacion     FROM sacar.cce_cargo c,          sacar.cce_cuenta a,          sacar.sac_usuario u,          sacar.cal_calificacion cvendedor    WHERE a.ID = c.cuenta_id      AND u.usuario_id = a.usuario_id      AND cvendedor.transaccion_id = c.transaccion_id      AND &#39;VENDEDOR&#39; = cvendedor.origen      AND 26 &lt; SYSDATE - c.generacion      AND &#39;GENERADO&#39; = c.estado      AND c.generacion &gt;= TO_DATE(&#39;01-01-2009&#39;, &#39;dd-mm-yyyy&#39;)      AND 2 &lt;= (SELECT COUNT(1)                  FROM sacar.cal_calificacion o                 WHERE cvendedor.transaccion_id = o.transaccion_id                   AND estado IN (&#39;CONFIRMADA&#39;, &#39;RECALIFICACION CONFIRMADA&#39;, &#39;VENCIDA&#39;))</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Consistencia - Pagos de PS ENVIADOs que no figuran en ERP_MOVIMIENTO</Data></Cell>
			<Cell><Data ss:Type="String">select c.usuario_id, pps.id, pps.cuenta_id, pps.monto, pps.estado_envio, to_char(pps.fecha_envio,&#39;dd/mm/yyyy&#39;) fecha_envio,           to_char(pps.generacion,&#39;dd/mm/yyyy&#39;) generacion, to_char(pps.actualizacion,&#39;dd/mm/yyyy&#39;) actualizacion,           pps.cargo_id  from sacar.cce_pago_ps pps, sacar.cce_cuenta c   where pps.CUENTA_ID = c.id  and pps.estado_envio = &#39;ENVIADO&#39;  and trunc(pps.generacion) &lt;= trunc(sysdate)  and monto &gt; 0  and not exists (      select 1      from sacar.erp_movimiento m      where m.id_usuario = c.usuario_id      and m.tipo_comprobante = &#39;C&#39;      and tipo_cuenta_corriente = &#39;PS&#39;      and upper(detalle_movimiento) like &#39;PAGO DINERO%MAIL%&#39;      and pps.id = m.id_transaccion  )</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Consistencia - Pagos de NPS ENVIADOs que no figuran en ERP_MOVIMIENTO</Data></Cell>
			<Cell><Data ss:Type="String">select c.usuario_id, pnps.id, pnps.cuenta_id, pnps.monto, pnps.estado, pnps.origen, pnps.mp_id, pnps.nps_id,  pnps.nps_codigo, pnps.nps_mensaje,  pnps.nps_nro_cupon,           pnps.nps_codigo_autorizacion,  pnps.nps_terminal_interno_id,  pnps.nps_email,  pnps.nps_nombre_apellido,  pnps.estado_envio,            to_char(pnps.generacion,&#39;dd/mm/yyyy&#39;) generacion, to_char(pnps.actualizacion,&#39;dd/mm/yyyy&#39;) actualizacion  from sacar.cce_pago_nps pnps, sacar.cce_cuenta c   where pnps.CUENTA_ID = c.id  and pnps.estado_envio = &#39;ENVIADO&#39;  and trunc(pnps.actualizacion) &lt;= trunc(sysdate)  and not exists (      select 1      from sacar.erp_movimiento m      where m.id_usuario = c.usuario_id      and m.tipo_comprobante = &#39;C&#39;      and pnps.id = m.id_transaccion  )</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Consistencia - Pagos de DM ENVIADOs que no figuran en ERP_MOVIMIENTO</Data></Cell>
			<Cell><Data ss:Type="String">select c.usuario_id, pdm.id, pdm.cuenta_id, pdm.monto, pdm.estado, to_char(pdm.dm_fecha,&#39;dd/mm/yyyy&#39;) dm_fecha,          pdm.estado, pdm.dm_monto, pdm.dm_montoneto, pdm.dm_email, pdm.dm_direccion, pdm.dm_comentario,          pdm.dm_metodopago, pdm.dm_moneda, pdm.estado_envio, to_char(pdm.fecha_envio,&#39;dd/mm/yyyy&#39;) fecha_envio,           to_char(pdm.generacion,&#39;dd/mm/yyyy&#39;) generacion, to_char(pdm.actualizacion,&#39;dd/mm/yyyy&#39;) actualizacion  from sacar.cce_pago_dm pdm, sacar.cce_cuenta c   where pdm.CUENTA_ID = c.id  and pdm.estado_envio = &#39;ENVIADO&#39;  and trunc(pdm.actualizacion) &lt;= trunc(sysdate)  and not exists (      select 1      from sacar.erp_movimiento m      where m.id_usuario = c.usuario_id      and m.tipo_comprobante = &#39;C&#39;      and m.tipo_cuenta_corriente = &#39;MO&#39;      and pdm.id = m.id_transaccion      and detalle_movimiento like &#39;PAGO TRANSF%DINERO MAIL%&#39;  ) </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Consistencia - Pagos de DM PENDIENTEs hace mas de 3 días</Data></Cell>
			<Cell><Data ss:Type="String">select c.usuario_id, pdm.id, pdm.cuenta_id, pdm.monto, pdm.estado, to_char(pdm.dm_fecha,&#39;dd/mm/yyyy&#39;) dm_fecha,          pdm.estado, pdm.dm_monto, pdm.dm_montoneto, pdm.dm_email, pdm.dm_direccion, pdm.dm_comentario,          pdm.dm_metodopago, pdm.dm_moneda, pdm.estado_envio, to_char(pdm.fecha_envio,&#39;dd/mm/yyyy&#39;) fecha_envio,           to_char(pdm.generacion,&#39;dd/mm/yyyy&#39;) generacion, to_char(pdm.actualizacion,&#39;dd/mm/yyyy&#39;) actualizacion  from sacar.cce_pago_dm pdm, sacar.cce_cuenta c   where pdm.estado = &#39;PENDIENTE&#39;  and pdm.generacion &lt; (sysdate - 3)  and pdm.CUENTA_ID = c.id</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Consistencia - Pagos de NPS PENDIENTEs hace mas de 3 días</Data></Cell>
			<Cell><Data ss:Type="String">select c.usuario_id, pnps.id, pnps.cuenta_id, pnps.monto, pnps.estado, pnps.origen, pnps.mp_id, pnps.nps_id,  pnps.nps_codigo, pnps.nps_mensaje,  pnps.nps_nro_cupon,           pnps.nps_codigo_autorizacion,  pnps.nps_terminal_interno_id,  pnps.nps_email,  pnps.nps_nombre_apellido,  pnps.estado_envio,            to_char(pnps.generacion,&#39;dd/mm/yyyy&#39;) generacion, to_char(pnps.actualizacion,&#39;dd/mm/yyyy&#39;) actualizacion  from sacar.cce_pago_nps pnps, sacar.cce_cuenta c   where pnps.estado = &#39;PENDIENTE&#39;  and pnps.generacion &lt; (sysdate - 3)  and pnps.CUENTA_ID = c.id</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Monitoreo - Registro de precio en pesos de las transacciones</Data></Cell>
			<Cell><Data ss:Type="String">select origen, count(*) cantidad, decode( count(*), 0, &#39;ok&#39;, &#39;No se est&amp;aacute; grabando el precio en pesos de &#39;||origen) status  from sacar.cce_cargo  where aviso_precio_pesos is null  and trunc(generacion) = trunc(sysdate-1)  and tipo_cargo_id = 1  group by origen</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Monitoreo - Actividad del proceso de cierre de avisos</Data></Cell>
			<Cell><Data ss:Type="String">select decode( count(*), 0,       &#39;El proceso de cierre de avisos funciona&#39;,       &#39;Hay errores con el proceso de cierre de avisos!!!&#39;) actividad  from sacar.sac_aviso  where av_estado = 3  and av_fecha_expiracion &lt; sysdate</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Monitoreo - Consistencia de las fechas de las subastas</Data></Cell>
			<Cell><Data ss:Type="String">select decode( count(*), 0,           &#39;Ok. Las fechas de finalizacion de las subastas son consistentes.&#39;,           &#39;Las fechas de finalizacion de &#39;||count(*)||&#39; subastas son inconsistentes.&#39; ) status  from sacar.sac_aviso a, sacar.sbt_subasta s  where a.tipo = &#39;SUBASTA&#39;  and a.av_id = s.aviso_id  and a.av_fecha_expiracion &lt;&gt; s.FINALIZACION  and estado &lt;&gt; &#39;FINALIZADA&#39;</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Monitoreo - Actividad del login</Data></Cell>
			<Cell><Data ss:Type="String">select to_char(creacion,&#39;hh24&#39;) hora,           decode(count(*),              0,&#39;Anda el login? No se logue&amp;oacute; nadie&#39;,               count(*)||&#39; logins ok&#39;) status   from sacar.SAC_REG_USRIP  where trunc(creacion) = trunc(sysdate-1)  group by to_char(creacion,&#39;hh24&#39;)  order by to_char(creacion,&#39;hh24&#39;)</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Monitoreo - Registros del día de ayer</Data></Cell>
			<Cell><Data ss:Type="String">select decode ( count(*),      0, &#39;No hubo registraciones ayer. Funciona la registraci&amp;oacute;n?&#39;,      &#39;Ayer hubo &#39;||count(*)||&#39; registraciones exitosas.&#39; ) registraciones  from sacar.sac_usuario  where trunc(usu_fecha_ingreso) = trunc(sysdate-1)</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Consistencia - Pdfs sin movimientos asociados</Data></Cell>
			<Cell><Data ss:Type="String">select *  from sacar.erp_pdf p  where p.TIPO_COMPROBANTE IN ( &#39;FCA&#39;, &#39;FCB&#39;, &#39;NCA&#39;, &#39;NCB&#39;)  AND p.ID_FACTURA not in (select m.NUMERO_COMPROBANTE from sacar.erp_movimiento m                          where m.NUMERO_COMPROBANTE = p.ID_FACTURA                          AND M.SUBTIPO_COMPROBANTE = P.TIPO_COMPROBANTE                          and P.TIPO_COMPROBANTE IN ( &#39;FCA&#39;, &#39;FCB&#39;, &#39;NCA&#39;, &#39;NCB&#39;) ) </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Consistencia - Movimientos sin PDFs</Data></Cell>
			<Cell><Data ss:Type="String">SELECT id_movimiento, id_usuario, tipo_cuenta_corriente, to_char(fecha_movimiento,&#39;dd/mm/yyyy&#39;) fecha_movimiento,           tipo_movimiento, tipo_comprobante, numero_comprobante, importe_movimiento, to_char(fecha_recepcion,&#39;dd/mm/yyyy&#39;) fecha_recepcion,          txt_respuesta, id_transaccion, medio_pago  FROM SACAR.ERP_MOVIMIENTO M  WHERE M.SUBTIPO_COMPROBANTE IN ( &#39;FCA&#39;, &#39;FCB&#39;, &#39;NCA&#39;, &#39;NCB&#39;)  AND M.NUMERO_COMPROBANTE not in ( select p.ID_FACTURA                                      from sacar.erp_pdf p                                      where p.TIPO_COMPROBANTE IN ( &#39;FCA&#39;, &#39;FCB&#39;, &#39;NCA&#39;, &#39;NCB&#39;)                                      AND M.NUMERO_COMPROBANTE = P.ID_FACTURA                                      AND M.SUBTIPO_COMPROBANTE = P.TIPO_COMPROBANTE )</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Consistencia - Brokers sin datos fidedignos</Data></Cell>
			<Cell><Data ss:Type="String">select u. usu_apodo, u.usuario_id, (select count(*) from sacar.sac_aviso a where a.usuario_id = u.usuario_id and av_estado = 3) avisos_activos  from sacar.cce_cuenta c, sacar.sac_usuario u  where 1=1  and c.usuario_id = u.usuario_id  and c.condicion &lt;&gt; &#39;DATOS_FIDEDIGNOS&#39;  and u.tius_id = 1  </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Consistencia - Usuarios suspendidos graves con publicaciones activas</Data></Cell>
			<Cell><Data ss:Type="String">select u.usuario_id, u.usu_apodo, u.tius_id  from sacar.sac_usuario u  where exists (      select 1 from sacar.crm_suspension_usuario su      where su.usuario_id = u.usuario_id      and tipo_suspension = &#39;GRAVE&#39;      and activa = &#39;Y&#39;      and vigencia is null  )  and exists (      select 1 from sacar.sac_aviso a      where a.usuario_id = u.usuario_id      and a.av_estado = 3  )</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Consistencia - Usuarios con alto porcentaje de anulacion</Data></Cell>
			<Cell><Data ss:Type="String">-- usuarios que anulan todo!  select usuario.usu_apodo, decode(usuario.tius_id,1,&#39;Broker&#39;,2,&#39;Particular&#39;) tipoUsuario, usuario.usuario_id,           generado.monto monto_generado, generado.cant cantidad_generada,          anulado.monto monto_anulado, anulado.cant cantidad_anulada,           anulado.monto / generado.monto pmonto,           anulado.cant / generado.cant pcant  from   (  select cuenta_id, sum(monto) monto, sum(aviso_cantidad) cant  from sacar.cce_cargo  where trunc(generacion) &gt; trunc(sysdate-30)  group by cuenta_id   having sum(monto)&gt;0  ) generado,  (  select cuenta_id, sum(monto) monto, sum(aviso_cantidad) cant  from sacar.cce_cargo  where trunc(generacion) &gt; trunc(sysdate-30)  and estado = &#39;ANULADO&#39;  having sum(monto)&gt;0  group by cuenta_id  ) anulado,  sacar.sac_usuario usuario,  sacar.cce_cuenta cuenta  where generado.cuenta_id = anulado.cuenta_id  and anulado.cant / generado.cant &gt; 0.5  and generado.cant &gt; 5  and generado.cuenta_id = cuenta.id  and cuenta.usuario_id = usuario.usuario_id   order by anulado.cant / generado.cant desc,            anulado.monto / generado.monto desc,           anulado.monto desc,           anulado.cant desc</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Consistencia - Usuarios con mas de 1 suspension activa</Data></Cell>
			<Cell><Data ss:Type="String">SELECT *    FROM (SELECT   COUNT (*) cant, a.usuario_id, a.activa              FROM sacar.crm_suspension_usuario a             WHERE a.activa = &#39;Y&#39;          GROUP BY usuario_id, activa)   WHERE cant &gt; 1</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Monitoreo - Avisos publicados ayer por canal y tipo</Data></Cell>
			<Cell><Data ss:Type="String">select AV_CREADO_POR,  TIPO,          &#39;En SAC_AVISO figuran &#39; || count(*) || &#39; avisos tipo &#39;||tipo||&#39; dados de alta ayer por &#39;||av_creado_por||&#39;.&#39;           AS PUBLICACIONES_POR_ORIGEN  from sacar.sac_aviso  where trunc(av_fecha_creacion) = trunc(sysdate-1)  group by av_creado_por, tipo  order by 1,2 </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Monitoreo - Actividad de los avisos el día de ayer</Data></Cell>
			<Cell><Data ss:Type="String">select esav_creado_por EVENTO, count(*) cantidad  from sacar.sac_estado_aviso  where trunc(esav_fecha_creacion) = trunc(sysdate-1)  group by esav_creado_por   </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Monitoreo - Cantidad de compras de ayer</Data></Cell>
			<Cell><Data ss:Type="String">select origen, count(1) cantidadOperaciones, sum(monto) montoComisiones  from sacar.cce_cargo  where tipo_cargo_id = 1 --COMISION = 1  and trunc(generacion) = trunc(sysdate-1)  group by origen</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Monitoreo - Ofertas en subastas de ayer</Data></Cell>
			<Cell><Data ss:Type="String">select tipo tipoSubasta, count(1) cantidadOfertasEnSubastas, count(distinct subasta_id) cantidadSubastasConOfertas  from sacar.sbt_oferta  where trunc(generacion) = trunc(sysdate-1)  group by tipo</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Monitoreo - Pagos de NPS de ayer</Data></Cell>
			<Cell><Data ss:Type="String">select estado estadoPagoNPS, estado_envio, origen origenPagoNPS, count(1) cantidadPagos, sum(monto) montoPagos  from sacar.cce_pago_nps  where trunc(generacion) = trunc(sysdate-1)  group by estado, estado_envio, origen  order by estado, estado_envio, origen</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Monitoreo - Pagos de NPS pendientes hace mas de 3 dias</Data></Cell>
			<Cell><Data ss:Type="String">select estado estadoPagoNPS, origen origenPagoNPS, count(1) cantidadPagos, sum(monto) montoPagos  from sacar.cce_pago_nps  where trunc(generacion) &lt; trunc(sysdate-3)  and estado = &#39;PENDIENTE&#39;  group by estado, origen  order by estado, origen</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Monitoreo - Pagos de transferencias de dinero mail de ayer</Data></Cell>
			<Cell><Data ss:Type="String">select estado estadoPagoDM, estado_envio, count(1) cantidadPagos, sum(monto) montoPagos  from sacar.cce_pago_dm  where trunc(generacion) = trunc(sysdate-1)  group by estado, estado_envio  order by estado, estado_envio</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Monitoreo - Calificaciones de ayer</Data></Cell>
			<Cell><Data ss:Type="String">select estado, resultado_venta, valoracion, count(*) cantidad  from sacar.cal_calificacion cal  where trunc(cal.actualizacion) = trunc(sysdate-1)  group by estado, resultado_venta, valoracion  order by estado, resultado_venta, valoracion</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Monitoreo - Calificaciones vs cargos de ayer</Data></Cell>
			<Cell><Data ss:Type="String">select calificaciones, cargos_comision  from  (  select count(*) CALIFICACIONES  from sacar.cal_calificacion comprador, sacar.cal_calificacion vendedor   where comprador.ORIGEN = &#39;COMPRADOR&#39;  and vendedor.ORIGEN = &#39;VENDEDOR&#39;  and comprador.transaccion_id = vendedor.transaccion_id  and trunc(comprador.generacion) = trunc(sysdate-1)   ),  (  select count(*) CARGOS_COMISION  from sacar.cce_cargo  where trunc(generacion) = trunc(sysdate-1)  and tipo_cargo_id = 1  )</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Monitoreo - Motivo de no realizacion de las transacciones de ayer</Data></Cell>
			<Cell><Data ss:Type="String">select decode(count(*), 0,      &#39;Todas las calificaciones de tx no realizadas de ayer tienen motivos de no realizacion&#39;,      &#39;No se est&amp;aacute; grabando el motivo de no realizacion de las transacciones!&#39;) actividad  from sacar.cal_calificacion cal  where trunc(cal.actualizacion) = trunc(sysdate-1)  and resultado_venta = &#39;TRANSACCION NO REALIZADA&#39;  and motivo_no_realizacion_id is null</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Monitoreo - Errores de ayer y lo que va del día - GNR_LOG</Data></Cell>
			<Cell><Data ss:Type="String">select id, to_char(generacion,&#39;dd/mm/yyyy hh24:mi:ss&#39;) generacion, objeto_tipo, proceso, nivel, texto    from sacar.gnr_log  where nivel = &#39;ERROR&#39;  and trunc(generacion) &gt;= trunc(sysdate-1)  -- lineas nuevas 17-11-09 FP  and objeto_tipo &lt;&gt; &#39;PreguntasRespuestasAction&#39;  order by generacion desc    </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Monitoreo - Actividad del archivador el día de ayer</Data></Cell>
			<Cell><Data ss:Type="String">select id_proceso, proceso, to_char(fecha,&#39;dd/mm/yyyy hh24:mi:ss&#39;) inicio,          to_char(fecha_fin,&#39;dd/mm/yyyy hh24:mi:ss&#39;) fin, total_procesados, total_exitosos, total_erroneos  from sacar_h.historico_proceso  where trunc(fecha) = trunc(sysdate-1)</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Monitoreo - Busqueda -&gt; Consistencia de BSQ_BUSQUEDA</Data></Cell>
			<Cell><Data ss:Type="String">(  select &#39;Hay &#39; || count(*) || &#39; avisos inactivos en el resultado de busqueda!!!&#39; status  from sacar.bsq_busqueda b, sacar.sac_aviso a, sacar.bsq_actualizacion ba  where b.aviso_id = a.av_id  and b.ACTUALIZACION_ID = ba.ID  and ba.estado = &#39;ACTIVA&#39;  and a.av_estado &lt;&gt; 3  )  UNION  (  select &#39;Hay &#39; || count(*) || &#39; avisos activos que faltan en el resultado de busqueda!!!&#39; status  from sacar.sac_aviso a  where av_estado = 3  and not exists (      select 1       from sacar.bsq_busqueda b      where b.aviso_id = a.av_id  )  )</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Consistencia - Usuarios enviados a Presea que nunca volvieron con OK</Data></Cell>
			<Cell><Data ss:Type="String">select u.usu_apodo, t1.id_usuario, to_char(fecha_envio,&#39;dd/mm/yyyy&#39;) fecha_envio, txt_envio, txt_respuesta, codigo_error  from sacar.erp_cuenta_txt t1, sacar.sac_usuario u  where id_usuario in (  select usuario_id   from sacar.cce_cuenta  )  and not exists (  select 1  from sacar.erp_cuenta_txt t2  where t1.id_usuario = t2.id_usuario  and txt_respuesta is not null  )  and t1.id_usuario = u.usuario_id  </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Consistencia - Pagos que figuran como PS pero no lo son</Data></Cell>
			<Cell><Data ss:Type="String">select id_movimiento, id_usuario, tipo_cuenta_corriente, to_char(fecha_movimiento,&#39;dd/mm/yyyy&#39;) || &#39; &#39; || hora_movimiento fecha,          detalle_movimiento, tipo_comprobante, subtipo_comprobante, numero_comprobante, importe_movimiento, to_char(fecha_recepcion,&#39;dd/mm/yyyy&#39;) fecha_recepcion,          txt_respuesta, id_transaccion  from sacar.erp_movimiento  where tipo_cuenta_corriente = &#39;PS&#39;  and tipo_comprobante = &#39;C&#39;  and detalle_movimiento not like &#39;%PAGO DINERO MAIL%&#39;  and detalle_movimiento not like &#39;%Pago DINEROMAIL%&#39;  </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Consistencia - Cargos sin respuesta de Presea</Data></Cell>
			<Cell><Data ss:Type="String">SELECT /*+ NO_CPU_COSTING */ id_usuario,          numero_cargo,          TO_CHAR(fecha_cargo, &#39;dd-mm-yyyy&#39;) fecha_cargo,          descripcion,          codigo_aviso,          apodo_comprador,          moneda,          precio_final,          numero_lote_cargo,          tipo_lote,          TO_CHAR(fecha_cierre_lote, &#39;dd-mm-yyyy&#39;) fecha_cierre_lote,          id_movimiento,          txt_envio,          txt_respuesta     FROM sacar.erp_cargo    WHERE txt_respuesta IS NULL      AND fecha_envio &gt; TO_DATE(&#39;19-03-2009&#39;, &#39;dd-mm-yyyy&#39;)</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Consistencia - Pagos sin respuesta de Presea</Data></Cell>
			<Cell><Data ss:Type="String">select id, id_usuario, id_transaccion, tipo_cuenta, medio_pago,  to_char(fecha_pago,&#39;dd-mm-yyyy&#39;) fecha_pago,          importe_pago, moneda, codigo_gateway, codigo_autorizacion, codigo_cupon,            to_char(fecha_envio,&#39;dd-mm-yyyy&#39;) fecha_envio, txt_envio, txt_respuesta  from sacar.ERP_PAGOS_ON  where txt_respuesta is null  and fecha_envio &gt; to_date(&#39;19-03-2009&#39;,&#39;dd-mm-yyyy&#39;)  </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Consistencia - Cargos con lote inconsistente </Data></Cell>
			<Cell><Data ss:Type="String">SELECT /*+ NO_CPU_COSTING */ ID,          tipo_cargo_id, cuenta_id, lote_id, monto, estado,          origen, destino, transaccion_id, aviso_id, aviso_titulo,          aviso_precio, aviso_moneda, aviso_cantidad, aviso_origen,          TO_CHAR(generacion, &#39;dd-mm-yyyy&#39;) generacion,          TO_CHAR(actualizacion, &#39;dd-mm-yyyy&#39;) actualizacion     FROM sacar.cce_cargo c1    WHERE estado = &#39;EN_LOTE&#39;      AND lote_id IS NULL   UNION   SELECT ID,          tipo_cargo_id, cuenta_id, lote_id, monto,          estado, origen, destino, transaccion_id,          aviso_id, aviso_titulo, aviso_precio,          aviso_moneda, aviso_cantidad, aviso_origen,          TO_CHAR(generacion, &#39;dd-mm-yyyy&#39;) generacion,          TO_CHAR(actualizacion, &#39;dd-mm-yyyy&#39;) actualizacion     FROM sacar.cce_cargo c2    WHERE estado = &#39;EN_LOTE&#39;      AND NOT EXISTS (SELECT 1                        FROM sacar.erp_cargo ec                       WHERE c2.ID = ec.numero_cargo)</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Reporting - Usuarios sin compras</Data></Cell>
			<Cell><Data ss:Type="String">select u.usuario_id, usu_apodo, usu_nombre, usu_apellido, usu_email, to_char(usu_fecha_ingreso,&#39;dd-mm-yyyy&#39;) ingreso  from sacar.sac_usuario u, sacar.sac_usuario_registro ur  where u.usuario_id = ur.usuario_id  and usu_fecha_ingreso &gt;= trunc($P{MO_reporting_filtro_fecha_desde_DATE})  and usu_fecha_ingreso &lt;= trunc($P{MO_reporting_filtro_fecha_hasta_DATE})  and estado_registro_id = 2  and tius_id in (1,2)  and not exists (      select 1      from sacar.crm_suspension_usuario s      where tipo_suspension &lt;&gt; &#39;LEVE&#39;      and s.usuario_id = u.usuario_id  )  and not exists (      select 1      from sacar.sac_movimiento m      where m.usuario_id = u.usuario_id  )</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Moderacion - Reporte de moderacion por usuario</Data></Cell>
			<Cell><Data ss:Type="String">select a.av_usuario_aprobacion, count(*) cantidad_moderada,           (sum(nvl2(more_id,1,0))/count(*))*100 porcentaje_rechazo   from sacar.sac_aviso a  where a.av_moderado = &#39;S&#39;  and trunc(a.av_fecha_aprobacion) &gt;= $P{MO_reporting_filtro_fecha_desde_DATE} and trunc(a.av_fecha_aprobacion) &lt;= $P{MO_reporting_filtro_fecha_hasta_DATE}  AND (  $P{MO_reporting_filtro_usuario_intranet} = &#39;Ingresar usuario&#39;  or $P{MO_reporting_filtro_usuario_intranet} = a.av_usuario_aprobacion  )  group by a.av_usuario_aprobacion  </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Moderacion - Reporte de moderacion por aviso</Data></Cell>
			<Cell><Data ss:Type="String">select av_id avisoId, av_usuario_aprobacion usuario, to_char(av_fecha_aprobacion,&#39;YYYY/MM/DD hh24:mi:ss&#39;) fecha, av_estado estadoId, es_descripcion estadoDescripcion, more_titulo motivoRechazo  from sacar.sac_aviso a, sacar.sac_motivo_rechazo mr, sacar.sac_estado e    where av_moderado = &#39;S&#39;  and a.more_id = mr.MORE_ID(+)  and a.av_estado = e.es_id  and trunc(a.av_fecha_aprobacion) &gt;= $P{MO_reporting_filtro_fecha_desde_DATE} AND trunc(a.av_fecha_aprobacion) &lt;= $P{MO_reporting_filtro_fecha_hasta_DATE}  and (       $P{MO_reporting_filtro_aviso_id} = 0 or      $P{MO_reporting_filtro_aviso_id} = a.av_id   )  </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - MENSUAL GMS</Data></Cell>
			<Cell><Data ss:Type="String">select bsq.l1 as ID_CATEGORIA  ,cat.CATE_DESCRIPCION as DESCRIPCION  ,a.av_moneda as MONEDA  ,sum(ca.aviso_cantidad) as CANTIDAD  ,sum(ca.aviso_precio*ca.aviso_cantidad) as GMS  from sacar.bsq_agrupador_categoria bsq, sacar.sac_categoria cat  ,REPORTE_SACAR_AVISO a, sacar.cce_cargo ca  where 0=0  and bsq.l1 = cat.CATE_ID  and bsq.CATEGORIA_ID = a.cate_id  and ca.AVISO_ID = a.AV_ID  and ca.TIPO_CARGO_ID = 1  and trunc(ca.GENERACION) &gt;= $P{MO_reporting_filtro_fecha_desde_DATE}  and trunc(ca.GENERACION) &lt;= $P{MO_reporting_filtro_fecha_hasta_DATE}  group by bsq.l1, cat.CATE_DESCRIPCION, a.av_moneda  order by id_categoria asc</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Reporting - Movimientos en la cuenta de un usuario</Data></Cell>
			<Cell><Data ss:Type="String">select id_movimiento, id_usuario, tipo_cuenta_corriente, to_char(fecha_movimiento,&#39;YYYY/MM/DD&#39;) || &#39; &#39; || hora_movimiento as fecha_movimiento,          tipo_movimiento, detalle_movimiento, tipo_comprobante, numero_comprobante, importe_movimiento, file_name_pdf, to_char(fecha_recepcion,&#39;YYYY/MM/DD hh24:mi:ss&#39;) fecha_recepcion, subtipo_comprobante,          txt_respuesta, id_transaccion, medio_pago, lotes_id, to_char(fecha_vencimiento, &#39;YYYY/MM/DD&#39;) vencimiento   from sacar.erp_movimiento  where   ( id_usuario = $P{MO_reporting_filtro_usuario_id} or 0 = $P{MO_reporting_filtro_usuario_id} )  and   ( id_usuario in ( select usuario_id from sacar.sac_usuario where usu_apodo = $P{MO_reporting_filtro_apodo} )       or $P{MO_reporting_filtro_apodo} = &#39;Ingresar apodo&#39;  )  and   fecha_movimiento &gt;= $P{MO_reporting_filtro_fecha_desde_DATE}  and   fecha_movimiento &lt;= $P{MO_reporting_filtro_fecha_hasta_DATE}</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Reporting - Saldos</Data></Cell>
			<Cell><Data ss:Type="String">select sum(importe_movimiento) as saldo  from sacar.erp_movimiento  where   ( id_usuario = $P{MO_reporting_filtro_usuario_id} or 0 = $P{MO_reporting_filtro_usuario_id} )  and   ( id_usuario in ( select usuario_id from sacar.sac_usuario where usu_apodo = $P{MO_reporting_filtro_apodo} )       or $P{MO_reporting_filtro_apodo} = &#39;Ingresar apodo&#39;  )</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Consistencia - Movimientos duplicados en cuenta</Data></Cell>
			<Cell><Data ss:Type="String">select mov.id_movimiento, mov.id_usuario, mov.tipo_cuenta_corriente, to_char(mov.fecha_movimiento,&#39;YYYY/MM/DD&#39;) fecha_movimiento, mov.hora_movimiento,           mov.tipo_movimiento, mov.detalle_movimiento, mov.tipo_comprobante, mov.numero_comprobante, mov.importe_movimiento,          mov.file_name_pdf, to_char(mov.fecha_recepcion,&#39;YYYY/MM/DD&#39;) fecha_recepcion, mov.subtipo_comprobante, mov.txt_respuesta, mov.id_transaccion,           mov.medio_pago, lotes_id,           to_char(mov.fecha_vencimiento,&#39;YYYY/MM/DD&#39;) fecha_vencimiento  from sacar.erp_movimiento mov, (  select tipo_comprobante, subtipo_comprobante, numero_comprobante  from sacar.erp_movimiento  group by tipo_comprobante, subtipo_comprobante, numero_comprobante  having count(*) &gt; 1 ) temp  where mov.tipo_comprobante = temp.tipo_comprobante  and mov.subtipo_comprobante = temp.subtipo_comprobante  and mov.numero_comprobante = temp.numero_comprobante  order by mov.id_usuario, mov.tipo_comprobante, mov.subtipo_comprobante, mov.numero_comprobante</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Reporting - Pagos de NPS </Data></Cell>
			<Cell><Data ss:Type="String">select  u.usuario_id, u.usu_apodo,           p.id folio, p.monto, p.estado, p.origen, p.mp_id, p.nps_id,           p.nps_pago_nps_id, to_char(p.nps_fecha,&#39;YYYY/MM/DD&#39;) nps_fecha, p.nps_codigo, p.nps_mensaje, p.nps_codigo_tarjeta,           p.nps_nro_cupon, p.nps_codigo_autorizacion, p.nps_terminal_interno_id, p.nps_email, p.nps_nombre_apellido,          p.estado_envio, to_char(p.fecha_envio,&#39;YYYY/MM/DD&#39;) fecha_envio,           to_char(p.generacion,&#39;YYYY/MM/DD&#39;) generacion, to_char(p.actualizacion,&#39;YYYY/MM/DD&#39;) actualizacion  from sacar.cce_pago_nps p, sacar.cce_cuenta c, sacar.sac_usuario u  where p.cuenta_id = c.id  and c.usuario_id = u.usuario_id  and ( p.id = $P{MO_reporting_filtro_folio} OR $P{MO_reporting_filtro_folio} = 0 )  and ( u.usuario_id = $P{MO_reporting_filtro_usuario_id} OR $P{MO_reporting_filtro_usuario_id} = 0 )  and ( u.usu_apodo = $P{MO_reporting_filtro_apodo} OR $P{MO_reporting_filtro_apodo} = &#39;Ingresar apodo&#39; )  and   p.generacion &gt;= $P{MO_reporting_filtro_fecha_desde_DATE}  and   p.generacion &lt;= $P{MO_reporting_filtro_fecha_hasta_DATE}</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Reporting - Pagos de DM</Data></Cell>
			<Cell><Data ss:Type="String">select  u.usuario_id, u.usu_apodo,           p.id, p.monto, p.estado, to_char(p.dm_fecha,&#39;YYYY/MM/DD&#39;) dm_fecha, p.dm_estado, p.dm_monto, p.dm_montoneto,           p.dm_email, p.dm_direccion, p.dm_comentario, p.dm_metodopago, p.dm_moneda,  p.ESTADO_ENVIO,          to_char(p.fecha_envio,&#39;YYYY/MM/DD&#39;) fecha_envio,          to_char(p.generacion,&#39;YYYY/MM/DD&#39;) generacion, to_char(p.actualizacion,&#39;YYYY/MM/DD&#39;) actualizacion  from sacar.cce_pago_dm p, sacar.cce_cuenta c, sacar.sac_usuario u  where p.cuenta_id = c.id  and c.usuario_id = u.usuario_id  and ( p.id = $P{MO_reporting_filtro_pago_id} OR $P{MO_reporting_filtro_pago_id} = 0 )  and ( u.usuario_id = $P{MO_reporting_filtro_usuario_id} OR $P{MO_reporting_filtro_usuario_id} = 0 )  and ( u.usu_apodo = $P{MO_reporting_filtro_apodo} OR $P{MO_reporting_filtro_apodo} = &#39;Ingresar apodo&#39; )  and   p.generacion &gt;= $P{MO_reporting_filtro_fecha_desde_DATE}  and   p.generacion &lt;= $P{MO_reporting_filtro_fecha_hasta_DATE}</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Reporting - Pagos de PS</Data></Cell>
			<Cell><Data ss:Type="String">select  u.usuario_id, u.usu_apodo,           p.id, p.monto, p.ESTADO_ENVIO,          to_char(p.fecha_envio,&#39;YYYY/MM/DD&#39;) fecha_envio,          to_char(p.generacion,&#39;YYYY/MM/DD&#39;) generacion, to_char(p.actualizacion,&#39;YYYY/MM/DD&#39;) actualizacion,          p.cargo_id  from sacar.cce_pago_ps p, sacar.cce_cuenta c, sacar.sac_usuario u  where p.cuenta_id = c.id  and c.usuario_id = u.usuario_id  and ( p.id = $P{MO_reporting_filtro_pago_id} OR $P{MO_reporting_filtro_pago_id} = 0 )  and ( u.usuario_id = $P{MO_reporting_filtro_usuario_id} OR $P{MO_reporting_filtro_usuario_id} = 0 )  and ( u.usu_apodo = $P{MO_reporting_filtro_apodo} OR $P{MO_reporting_filtro_apodo} = &#39;Ingresar apodo&#39; )</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Facturacion - Detalle</Data></Cell>
			<Cell><Data ss:Type="String">select usu_id, apodo,tipo_cliente, email, nombre,apellido, cod, tel, cod2,tel2,localidad,provincia,inhabilitada, fecha_inhabilitacion,          suspension,saldo_min_total,saldo_min_filtrado,cant_inhabilitaciones,prox_inhabilitacion    from  (   SELECT cc.id as cuentaId,su.usuario_id as usu_id,su.usu_apodo AS apodo, cc.tipo_cliente_codigo as tipo_cliente,         su.usu_email AS email, su.usu_nombre AS nombre,         su.usu_apellido AS apellido, su.usu_cod_area_tel AS cod,         su.usu_telefono AS tel,         sur.usu_cod_area_tel2 AS cod2,         sur.usu_telefono2 AS tel2,         su.usu_localidad AS localidad,         (select prv_nombre from sacar.sac_provincias p where p.prv_id=su.prv_id)  AS provincia,         DECODE (cc.estado, &#39;HABILITADA&#39;, &#39;NO&#39;, &#39;SI&#39;) AS inhabilitada,         TO_CHAR (DECODE (cc.estado_fecha, &#39;&#39;, &#39;---&#39;, cc.estado_fecha)                 ) AS fecha_inhabilitacion,                 --si el usuario esta suspendido muestro el nivel de su suspension         (CASE (su.usu_suspendido)             WHEN &#39;S&#39;                THEN (                    SELECT max(tipo_suspension)                    FROM sacar.crm_suspension_usuario                   WHERE usuario_id = su.usuario_id AND activa = &#39;Y&#39;                )             ELSE &#39;---&#39;          END         ) AS suspension,         (SELECT SUM (importe_movimiento)            FROM sacar.erp_movimiento em           WHERE em.id_usuario = su.usuario_id) AS saldo_min_total,           (SELECT SUM (importe_movimiento)            FROM sacar.erp_movimiento em           WHERE em.id_usuario = su.usuario_id           and EM.fecha_movimiento BETWEEN TRUNC($P{GC_filtro_fecha_desde_DATE_PROD}) AND TRUNC($P{GC_filtro_fecha_hasta_DATE_PROD})            ) AS saldo_min_filtrado,         (SELECT COUNT (*)            FROM sacar.cce_estado_cuenta           WHERE cuenta_id = cc.ID             AND estado = &#39;INHABILITADA&#39;) AS cant_inhabilitaciones,                --obtenemos la fecha de la proxima inhabilitacion del usuario         TO_CHAR((SELECT fecha_vencimiento + 7 AS fecha            FROM (                  --filtro los registros por usuario donde subpartial - saldo minimo &gt;=0 (luego el primer registros de estos sera la factura pendiente mas vieja)                  SELECT id_usuario, fecha_movimiento, hora_movimiento,                         fecha_vencimiento, importe,                         RANK () OVER (PARTITION BY id_usuario ORDER BY id_usuario,                          fecha_movimiento DESC,                          hora_movimiento DESC) puesto                    FROM (                          --obtengo los importes del usuario ordenados por fecha con una columna nueva que es la suma del importe actual + importe registro anterior                          SELECT   id_usuario, fecha_movimiento,                                   hora_movimiento,                                   SUM (importe_movimiento) AS importe,                                   fecha_vencimiento,                                   SUM (SUM (importe_movimiento)) OVER (PARTITION BY id_usuario ORDER BY id_usuario,                                    fecha_movimiento DESC,                                    hora_movimiento DESC ROWS UNBOUNDED PRECEDING)                                                                  AS subpartial                              FROM sacar.erp_movimiento                             WHERE tipo_comprobante = &#39;F&#39;                               AND (   subtipo_comprobante = &#39;FCA&#39;                                    OR subtipo_comprobante = &#39;FCB&#39;                                    OR subtipo_comprobante = &#39;MIG&#39;                                   )                          GROUP BY id_usuario,                                   fecha_movimiento,                                   hora_movimiento,                                   fecha_vencimiento                          ORDER BY id_usuario,                                   fecha_movimiento DESC,                                   hora_movimient...</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Cargos - Detalle</Data></Cell>
			<Cell><Data ss:Type="String">select d2.usuario_id, SU.USU_APODO, d2.tipo_suspension, d2.descripcion_suspension, d2.tipo_cliente,  (select tc1.deuda_motivo from sacar.cce_tipo_cargo tc1                    where id = d2.tipo_cargo_id) as tipo_cargo  , d2.estado, d2.origen,  d2.destino, d2.unidades_vendidas, d2.total_monto    from (  SELECT d1.*, (SELECT max(s1.tipo_suspension)                  FROM sacar.crm_suspension_usuario s1                 WHERE s1.usuario_id = d1.usuario_id                 and S1.ACTIVA = &#39;Y&#39;                 ) AS tipo_suspension,         (SELECT max(r.descripcion)            FROM sacar.crm_suspension_usuario s2,                 sacar.crm_regla r           WHERE s2.regla_id = r.ID            AND s2.usuario_id = d1.usuario_id           and S2.ACTIVA = &#39;Y&#39;           )AS descripcion_suspension    FROM (SELECT   (SELECT usuario_id                      FROM sacar.cce_cuenta cu1                     WHERE cu1.ID = ca.cuenta_id) AS usuario_id,                   DECODE ((SELECT tipo_cliente_codigo                              FROM sacar.cce_cuenta cu1                             WHERE cu1.ID = ca.cuenta_id),                           &#39;BROKER&#39;, &#39;GV&#39;,                           &#39;WEB&#39;                          ) AS tipo_cliente,                   ca.cuenta_id,                    CA.TIPO_CARGO_ID                   , ca.estado, decode(ca.origen,&#39;COMPRA_INMEDIATA_SMS&#39;,&#39;SMS&#39;,DECODE (ca.origen, &#39;INTRANET&#39;, &#39;INTRANET&#39;, &#39;WEB&#39;)) as origen,                   ca.destino,                    decode(CA.TIPO_CARGO_ID,1,sum(CA.AVISO_CANTIDAD),0) as unidades_vendidas,                    sum(CA.MONTO) total_monto              FROM sacar.cce_cargo ca             --exceptuo los cargos enlotados con lote facturado          WHERE    NVL (ca.lote_id, -1) NOT IN (SELECT ID                                                  FROM sacar.cce_lote                                                 WHERE estado = &#39;FACTURADO&#39;)  and DECODE ($P{GC_filtro_tipo_fecha_PROD},                           &#39;Fecha generacion&#39;, TRUNC (ca.generacion),                           TRUNC (ca.actualizacion)                          ) BETWEEN trunc($P{GC_filtro_fecha_desde_DATE_PROD}) and trunc($P{GC_filtro_fecha_hasta_DATE_PROD})                                                         GROUP BY ca.cuenta_id,                   ca.tipo_cargo_id,                   ca.estado,                   ca.origen,                   ca.destino          ORDER BY usuario_id DESC) d1    )d2, sacar.sac_usuario su  where d2.usuario_id = SU.USUARIO_ID  and (0=decode($P{GC_filtro_apodo_PROD},&#39;Ingresar Apodo&#39;,0,1) or SU.USU_APODO=$P{GC_filtro_apodo_PROD})  and (0=decode($P{GC_filtro_id_usuario_PROD},0,0,1) or SU.USUARIO_ID = $P{GC_filtro_id_usuario_PROD})  and (0=decode($P{GC_filtro_mail_PROD},&#39;Ingresar Mail&#39;,0,1) or SU.USU_email = $P{GC_filtro_mail_PROD})  and (0=decode($P{GC_filtro_tipo_cargo_PROD},-1,0,1) or d2.tipo_cargo_id = $P{GC_filtro_tipo_cargo_PROD})  and (0=decode($P{GC_filtro_suspendido_PROD},&#39;Indistinto&#39;,0,1) or SU.USU_SUSPENDIDO=$P{GC_filtro_suspendido_PROD})</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Reporting - Movimientos de un aviso</Data></Cell>
			<Cell><Data ss:Type="String">select esav_id, esav_estado, esav_creado_por, to_char(esav_fecha_creacion, &#39;YYYY/MM/DD hh24:mi:ss&#39;) generacion, av_id, esav_usuario_id  from sacar.sac_estado_aviso  where av_id = $P{MO_reporting_filtro_aviso_id}  </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">DESA MO - Cargos - Resumen - BACK</Data></Cell>
			<Cell><Data ss:Type="String">SELECT   (deuda_motivo           ) AS tipo_cargo,           estado, tipo_cliente, origen, SUM (monto) AS monto,           COUNT (*) AS cantidad_cargos      FROM (SELECT tc.deuda_motivo, ca.estado,                   DECODE (cu.tipo_cliente_codigo,                           &#39;BROKER&#39;, &#39;GV&#39;,                           &#39;WEB&#39;                          ) AS tipo_cliente,                   DECODE (ca.origen,                           &#39;COMPRA_INMEDIATA_SMS&#39;, &#39;SMS&#39;,                           DECODE (ca.origen, &#39;INTRANET&#39;, &#39;INTRANET&#39;, &#39;WEB&#39;)                          ) AS origen,                   ca.monto, (SELECT cl1.estado                                FROM sacar.cce_lote cl1                               WHERE ca.lote_id = cl1.ID) AS estado_lote              FROM sacar.cce_cargo ca, sacar.cce_tipo_cargo tc, sacar.cce_cuenta cu             WHERE ca.tipo_cargo_id = tc.ID               AND ca.cuenta_id = cu.ID               AND DECODE ($P{GC_filtro_tipo_fecha_PROD},                           &#39;Fecha generacion&#39;, TRUNC (ca.generacion),                           TRUNC (ca.actualizacion)                          ) BETWEEN trunc($P{GC_filtro_fecha_desde_DATE_PROD}) AND trunc($P{GC_filtro_fecha_hasta_DATE_PROD})              AND cu.tipo_cliente_codigo IN (                      SELECT val                        FROM (                              --la columna ind es el valor del parametro y val lo que representa                              SELECT &#39;Indistinto&#39; AS ind, &#39;FIDEDIGNO&#39; AS val                                FROM DUAL                              UNION                              SELECT &#39;Indistinto&#39; AS ind, &#39;PARTICULAR&#39; AS val                                FROM DUAL                              UNION                              SELECT &#39;Indistinto&#39; AS ind, &#39;BROKER&#39; AS val                                FROM DUAL                              UNION                              SELECT &#39;Indistinto&#39; AS ind, &#39;CERTIFICADO&#39; AS val                                FROM DUAL                              UNION                              SELECT &#39;Web&#39; AS ind, &#39;FIDEDIGNO&#39; AS val                                FROM DUAL                              UNION                              SELECT &#39;Web&#39; AS ind, &#39;PARTICULAR&#39; AS val                                FROM DUAL                              UNION                              SELECT &#39;Web&#39; AS ind, &#39;CERTIFICADO&#39; AS val                                FROM DUAL                              UNION                              SELECT &#39;Broker&#39; AS ind, &#39;BROKER&#39; AS val                                FROM DUAL)                       WHERE ind = $P{GC_filtro_tipo_usuario_PROD})              AND (0=decode($P{GC_filtro_tipo_cargo_PROD},-1,0,1) or CA.TIPO_CARGO_ID= $P{GC_filtro_tipo_cargo_PROD})              and CA.ESTADO in ($P!{GC_filtro_estado_cargo_PROD})              AND (   0 = DECODE ($P{GC_filtro_origen_PROD}, &#39;Indistinto&#39;, 0, 1)                    OR ca.origen IN (                          SELECT orig                            FROM (SELECT &#39;COMPRA_INMEDIATA_CARGADOR&#39; AS orig,                                         &#39;WEB&#39; AS agrupado                                    FROM DUAL                                  UNION                                  SELECT &#39;SUBASTA_WEB&#39; AS orig,                                         &#39;WEB&#39; AS agrupado                                    FROM DUAL                                  UNION                                  SELECT &#39;INTRANET&#39; AS orig,                                         &#39;INTRANET&#39; AS agrupado                                    FROM DUAL                                  UNION                                  SELECT &#39;COMPRA_INMEDIATA_SMS&#39; AS orig,                                         &#39;SMS&#39; AS agrupado                                    FROM DUAL                                  UNION                                  SELECT &#39;COMPRA_INMEDIATA_WEB&#39; AS orig,                                         &#39;WEB&#39; AS agrupado                                    FROM DUAL    ...</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Facturacion - Resumen</Data></Cell>
			<Cell><Data ss:Type="String">SELECT   tipo_cargo, tipo_cliente, origen, round(SUM(monto),2) AS monto      FROM ((  -- linea agregada el 6.10.2010 - junto con un order by mas abajo  SELECT   tipo_cargo, tipo_cliente, origen, round(SUM(monto),2) AS monto FROM (  SELECT   t.deuda_motivo AS tipo_cargo,                      DECODE (cu.tipo_cliente_codigo,                              &#39;BROKER&#39;, &#39;GV&#39;,                              &#39;WEB&#39;                             ) AS tipo_cliente,                      DECODE (c.origen,                              &#39;COMPRA_INMEDIATA_SMS&#39;, &#39;SMS&#39;,                              DECODE (c.origen, &#39;INTRANET&#39;, &#39;INTRANET&#39;, &#39;WEB&#39;)                             ) AS origen,                      SUM (c.monto) AS monto                 FROM SACAR.cce_cargo c, SACAR.cce_cuenta cu, SACAR.cce_tipo_cargo t, SACAR.cce_lote cl, SACAR.erp_movimiento em, SACAR.sac_usuario su                WHERE c.cuenta_id = cu.ID AND c.tipo_cargo_id = t.ID                and (0 = DECODE($P{GC_filtro_tipo_cargo_PROD},-1,0,1) OR C.TIPO_CARGO_ID = $P{GC_filtro_tipo_cargo_PROD})                --and C.ORIGEN in ($P!{GC_filtro_origen_PROD})                and (0=DECODE($P{GC_filtro_origen_PROD},&#39;Indistinto&#39;,0,1) or                C.ORIGEN in(              SELECT orig                FROM (SELECT &#39;COMPRA_INMEDIATA_CARGADOR&#39; AS orig,&#39;WEB&#39; AS agrupado                        FROM DUAL                      UNION                      SELECT &#39;SUBASTA_WEB&#39; AS orig, &#39;WEB&#39; AS agrupado                        FROM DUAL                      UNION                      SELECT &#39;INTRANET&#39; AS orig, &#39;INTRANET&#39; AS agrupado                        FROM DUAL                      UNION                      SELECT &#39;COMPRA_INMEDIATA_SMS&#39; AS orig, &#39;SMS&#39; AS agrupado                        FROM DUAL                      UNION                      SELECT &#39;COMPRA_INMEDIATA_WEB&#39; AS orig, &#39;WEB&#39; AS agrupado                        FROM DUAL                      UNION                      SELECT &#39;CARGADOR&#39; AS orig, &#39;WEB&#39; AS agrupado                        FROM DUAL)               WHERE agrupado in($P{GC_filtro_origen_PROD})))                and C.LOTE_ID is not null and C.ESTADO = &#39;EN_LOTE&#39; and CL.ID = C.LOTE_ID and CL.ESTADO = &#39;FACTURADO&#39;                and CL.CODIGO_FACTURA = EM.NUMERO_COMPROBANTE and CL.TIPO_COMPROBANTE = EM.SUBTIPO_COMPROBANTE                and (trunc(EM.FECHA_MOVIMIENTO) between trunc($P{GC_filtro_fecha_desde_DATE_PROD}) and trunc($P{GC_filtro_fecha_hasta_DATE_PROD}))                              and (0 = DECODE($P{GC_filtro_suspendido_PROD},&#39;Indistinto&#39;,0,1) or SU.USU_SUSPENDIDO in ($P{GC_filtro_suspendido_PROD}))                and CU.USUARIO_ID = SU.USUARIO_ID                and CU.USUARIO_ID in (                                        SELECT id_usuario                                        FROM (SELECT   id_usuario, SUM (importe_movimiento) AS saldoMinPorUsuario                                            FROM SACAR.erp_movimiento                                            GROUP BY id_usuario)                                       WHERE (0 = $P{GC_filtro_check_PROD} OR saldoMinPorUsuario BETWEEN $P{GC_filtro_saldoM_desde_PROD} AND $P{GC_filtro_saldoM_hasta_PROD})                )                --filtramos por tipo de cliente               AND cu.tipo_cliente_codigo IN (              --seleccionamos del indice el valor del parametro              SELECT val                FROM (                      --la columna ind es el valor del parametro y val lo que representa                      SELECT &#39;Indistinto&#39; AS ind, &#39;FIDEDIGNO&#39; AS val                        FROM DUAL                      UNION                      SELECT &#39;Indistinto&#39; AS ind, &#39;PARTICULAR&#39; AS val                        FROM DUAL                      UNION                      SELECT &#39;Indistinto&#39; AS ind, &#39;BROKER&#39; AS val                        FROM DUAL                      UNION                      SELECT &#39;Indistinto&#39; AS ind, &#39;CERTIFICADO&#39; AS val                        FROM DUAL                      UNION               ...</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Verificacion PDF con fecha proceso de hoy</Data></Cell>
			<Cell><Data ss:Type="String">select status  from sacar.erp_pdf_seq  where trunc(fecha_proc) = trunc(sysdate)</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - DIARIO Verificacion proceso Estatificador</Data></Cell>
			<Cell><Data ss:Type="String">SELECT count(*) as cantidad  FROM sacar_h.sac_aviso_h a WHERE a.aviso_estatificado = &#39;N&#39;   AND a.av_creado_por &lt;&gt; &#39;MIGRADOR&#39;  AND av_url_desc not like &#39;%null&#39;  </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Confronte - Listado de Estado de ofertas para Tiendas pagas</Data></Cell>
			<Cell><Data ss:Type="String"> SELECT b.id &#39;id_Tienda&#39;,   b.name &#39;Tienda&#39;,   b.type &#39;Tipo Tienda&#39;,   count(1),   SUM(o.seen) &#39;Visibles&#39;,           SUM(o.seen &amp;&amp; o.product_fk IS NOT NULL) &#39;Con producto&#39; ,           SUM(o.seen &amp;&amp; o.product_fk IS NULL &amp;&amp; o.category_fk IS NOT NULL) &#39;Sin producto/Con Categoria&#39;,           SUM(o.seen &amp;&amp; o.product_fk IS NULL &amp;&amp; o.brand_fk IS NOT NULL)  &#39;Sin producto/Con Marca&#39;,                    SUM(o.seen &amp;&amp; o.product_fk IS NULL &amp;&amp; o.category_fk IS NULL) &#39;Sin producto/Sin Categoria&#39;,           SUM(o.seen &amp;&amp; o.product_fk IS NULL &amp;&amp; o.brand_fk IS NULL)  &#39;Sin producto/Sin Marca&#39;,           SUM(o.seen = FALSE) &#39;No visibles&#39;              FROM  offer o,     biz b     where b.id = o.biz_fk    and b.id in(      SELECT b.id         FROM biz b      LEFT JOIN budget bg          on bg.biz_fk = b.id      WHERE  b.id != 1000 AND b.country= &#39;AR&#39;     AND b.status = 1          AND ( premium &gt; 0 or bg.left_budget &gt; 0 ) )  group by b.id, b.name</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Confronte - Listado de Estado de ofertas para Tiendas no pagas</Data></Cell>
			<Cell><Data ss:Type="String"> SELECT b.id &#39;id_Tienda&#39;,   b.name &#39;Tienda&#39;,   b.type &#39;Tipo Tienda&#39;,   count(1)&#39;Ofertas&#39;,   SUM(o.seen) &#39;Visibles&#39;,           SUM(o.seen &amp;&amp; o.product_fk IS NOT NULL) &#39;Con producto&#39; ,           SUM(o.seen &amp;&amp; o.product_fk IS NULL &amp;&amp; o.category_fk IS NOT NULL) &#39;Sin producto/Con Categoria&#39;,           SUM(o.seen &amp;&amp; o.product_fk IS NULL &amp;&amp; o.brand_fk IS NOT NULL)  &#39;Sin producto/Con Marca&#39;,                    SUM(o.seen &amp;&amp; o.product_fk IS NULL &amp;&amp; o.category_fk IS NULL) &#39;Sin producto/Sin Categoria&#39;,           SUM(o.seen &amp;&amp; o.product_fk IS NULL &amp;&amp; o.brand_fk IS NULL)  &#39;Sin producto/Sin Marca&#39;,           SUM(o.seen = FALSE) &#39;No visibles&#39;,           &#39;NO&#39; as &#39;Paga&#39;     FROM  offer o,     biz b     where b.id = o.biz_fk    AND b.status = 1       and b.country= &#39;AR&#39;       and b.id not in(      SELECT b.id         FROM biz b      LEFT JOIN budget bg          on bg.biz_fk = b.id      WHERE  b.id != 1000 AND b.country= &#39;AR&#39;     AND b.status = 1          AND ( premium &gt; 0 or bg.left_budget &gt; 0 ) )  group by b.id, b.name</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Consistencia - Avisos en categoria no hoja</Data></Cell>
			<Cell><Data ss:Type="String">SELECT /*+ PARALLEL(U, 2) PARALLEL(C1, 2) */ C1.descripcion_l1,          C1.descripcion_l2, C1.descripcion_l3, u.usu_apodo,          C1.descripcion_l4, a.av_id,  a.av_titulo,          a.av_precio, a.av_moneda,  a.av_estado,          a.av_creado_por,          TO_CHAR (a.av_fecha_creacion, &#39;dd/mm/yyyy&#39;) fecha_creacion     FROM sacar.sac_aviso a,          sacar.bsq_agrupador_categoria C1,          sacar.sac_usuario u,          (SELECT /*+ PARALLEL(C2, 2) */ DISTINCT cate_padre_id cat             FROM sacar.sac_categoria C2) ca    WHERE ca.cat = a.cate_id      AND C1.categoria_id = a.cate_id      AND u.usuario_id = a.usuario_id      AND C1.categoria_id = ca.cat</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Reporting - Mails enviados a un usuario </Data></Cell>
			<Cell><Data ss:Type="String">select m.mail_reg_id, de, para, asunto, to_char(fecha_alta,&#39;YYYY-MM-DD hh24:mi:ss&#39;) generacion, to_char(fecha_modif,&#39;YYYY-MM-DD hh24:mi:ss&#39;) envio  from sacar.sac_usuario u, sacar.mail_registro m  where m.usuario_id = u.usuario_id  and ( u.usu_apodo = $P{MO_reporting_filtro_apodo}      or $P{MO_reporting_filtro_apodo} = &#39;Ingresar apodo&#39; )  and ( u.usu_email = $P{MO_reporting_filtro_mail}      or $P{MO_reporting_filtro_mail} = &#39;Ingresar mail&#39; )  and fecha_alta between $P{MO_reporting_filtro_fecha_desde_DATE} and $P{MO_reporting_filtro_fecha_hasta_DATE}</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Reporting - Reporte de cargos</Data></Cell>
			<Cell><Data ss:Type="String">select u.usuario_id, u.usu_apodo, ca.id idcargo, ca.tipo_cargo_id, ca.lote_id, ca.monto, to_char(ca.generacion,&#39;yyyy/mm/dd&#39;) generacion,          to_char(ca.actualizacion,&#39;yyyy/mm/dd&#39;) actualizacion, ca.estado, ca.origen, ca.destino, ca.aviso_id, ca.transaccion_id,               ca.aviso_precio, ca.aviso_moneda, ca.aviso_titulo, ca.aviso_origen, ca.aviso_archivado, ca.destaque_titulo, ca.aviso_precio_pesos, comprador.usu_apodo apodoComprador,ca.AVISO_CANTIDAD  from sacar.ccE_cargo ca, sacar.ccE_cuenta cu, sacar.sac_usuario u, sacar.cal_calificacion c, sacar.sac_usuario comprador  where ca.cuenta_id = cu.id  and cu.usuario_id = u.usuario_id  and ( u.usu_apodo = $P{MO_reporting_filtro_apodo}   or $P{MO_reporting_filtro_apodo}  = &#39;Ingresar apodo&#39; )  and ( u.usuario_id = $P{MO_reporting_filtro_usuario_id} or  $P{MO_reporting_filtro_usuario_id} = 0 )  and ( ca.aviso_id = $P{MO_reporting_filtro_aviso_id} or  $P{MO_reporting_filtro_aviso_id} = 0 )  and trunc(ca.generacion) &gt;= trunc($P{MO_reporting_filtro_fecha_desde_DATE})  and trunc(ca.generacion) &lt;= trunc($P{MO_reporting_filtro_fecha_hasta_DATE})  and ( ca.tipo_cargo_id = $P{MO_reporting_filtro_tipo_cargo}  or $P{MO_reporting_filtro_tipo_cargo} = -1)  and ca.estado in ($P!{MO_reporting_filtro_estado_cargo})  and ca.transaccion_id = c.transaccion_id(+)  and (c.origen=&#39;COMPRADOR&#39; or 1 &lt;&gt; $P{MO_reporting_filtro_tipo_cargo})  and c.usuario_calificador_id = comprador.usuario_id(+)  </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Facturacion - Control pre facturacion</Data></Cell>
			<Cell><Data ss:Type="String">select ca.lote_id, cu.usuario_id, u.usu_apodo, ca.TIPO_CARGO_ID,          ca.origen,decode(u.tius_id,1,&#39;Broker&#39;,2,&#39;WEB&#39;) TU, round(SUM(ca.monto),2) as monto, to_char(ca.generacion,&#39;YYYY/MM/DD&#39;) as generacion,          u.usu_suspendido as suspendido, sus.tipo_suspension  from sacar.cce_cargo ca, sacar.cce_cuenta cu, sacar.cce_lote lo, sacar.sac_usuario u LEFT OUTER JOIN sacar.crm_suspension_usuario sus ON sus.usuario_id = u.usuario_id and sus.activa = &#39;Y&#39;  where 0=0  and ca.ESTADO = &#39;EN_LOTE&#39;  and ca.cuenta_id = cu.id  and u.usuario_id = cu.usuario_id       and lo.id = ca.lote_id       and lo.estado = &#39;CERRADO&#39;  group by ca.lote_id, cu.usuario_id, u.usu_apodo, ca.TIPO_CARGO_ID,u.tius_id, ca.origen,  to_char(ca.generacion,&#39;YYYY/MM/DD&#39;), sus.tipo_suspension, u.usu_suspendido  order by lote_id</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Facturacion - Cargos confirmados no enlotados de usuarios suspendidos </Data></Cell>
			<Cell><Data ss:Type="String">SELECT   c.usuario_id, u.usu_apodo,decode(u.tius_id,1,&#39;BK&#39;,2,&#39;WEB&#39;) TU,            s.tipo_suspension, to_char(s.generacion,&#39;YYYY-MM-DD&#39;) as generacion_suspension, c.estado estado_cuenta,  to_char(ce.generacion,&#39;YYYY-MM-DD&#39;) as generacion_cargo,           r.descripcion descripcion_regla, ce.monto,           tc.descripcion tipo_cargo, ce.origen      FROM sacar.cce_cuenta c,           sacar.crm_suspension_usuario s,           sacar.crm_regla r,           sacar.cce_cargo ce,           sacar.sac_usuario u,           sacar.cce_tipo_cargo tc     WHERE c.usuario_id = s.usuario_id       AND s.regla_id = r.ID       AND s.activa = &#39;Y&#39;       AND s.tipo_suspension &lt;&gt; &#39;LEVE&#39;       AND trunc(ce.actualizacion) BETWEEN $P{MO_reporting_filtro_fecha_desde_DATE}       AND $P{MO_reporting_filtro_fecha_hasta_DATE}       AND ce.estado = &#39;CONFIRMADO&#39;       AND c.ID = ce.cuenta_id       AND u.usuario_id = c.usuario_id       AND tc.ID = ce.tipo_cargo_id  ORDER BY 1</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Pago Seguro - Cantidad de avisos activos con PS</Data></Cell>
			<Cell><Data ss:Type="String">select count(*) as cantidad  from sacar.bsq_busqueda  where medio_pago_seguro = &#39;Y&#39;</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Pago Seguro - Operaciones - Cantidad de operaciones en cada estado en un rango de fechas</Data></Cell>
			<Cell><Data ss:Type="String">    SELECT estado, COUNT(1) as cantidad  FROM sacar.pgs_operacion o      WHERE nvl2( o.actualizacion, o.actualizacion, o.generacion ) BETWEEN $P{MO_reporting_filtro_fecha_desde_DATE} AND $P{MO_reporting_filtro_fecha_hasta_DATE}      and o.CARGO_ID IS NOT NULL      group by estado</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Pago Seguro - Operaciones - Detalle de operaciones de PS filtradas por estado y rango de fecha</Data></Cell>
			<Cell><Data ss:Type="String">SELECT  o.estado, o.id operacion, ctama.id idCargo,  ctama.transaccion_ID numTrx, to_char(o.GENERACION,&#39;YYYY/MM/DD&#39;) fecha,                    o.COMPRADOR_ID compradorID, comprador.USU_APODO apodo,  comprador.USU_NOMBRE nombre,   comprador.usu_apellido apellido,  comprador.USU_EMAIL email,                       ctama.AVISO_PRECIO_PESOS * ctama.AVISO_CANTIDAD montoOperacion,  ctama.MONTO montoComision, ctama.AVISO_ID avisoID,                   vendedor.USU_APODO apodoVendedor, ctama.cuenta_ID idCuenta          FROM sacar.PGS_OPERACION o, sacar.SAC_USUARIO comprador, sacar.CCE_CARGO ctama, sacar.SAC_USUARIO vendedor          WHERE nvl2( o.actualizacion, o.actualizacion, o.generacion  ) BETWEEN $P{MO_reporting_filtro_fecha_desde_DATE} AND $P{MO_reporting_filtro_fecha_hasta_DATE}          AND o.COMPRADOR_ID = comprador.usuario_id          AND o.CARGO_ID = ctama.ID          AND o.VENDEDOR_ID = vendedor.USUARIO_ID          AND O.CARGO_ID IS NOT NULL  AND o.estado like $P{MO_reporting_filtro_estado_operacion_ps}</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Pago Seguro - Mediacion - Cantidad de compradores que solicitaron mediacion y el vendedor no respondio</Data></Cell>
			<Cell><Data ss:Type="String">SELECT COUNT(DISTINCT comprador_id) resultado   FROM sacar.pgs_operacion o, sacar.pgs_mediacion m  WHERE o.mediacion_id = m.id  AND nvl2( m.actualizacion, m.actualizacion, m.generacion  )  BETWEEN $P{MO_reporting_filtro_fecha_desde_DATE} AND $P{MO_reporting_filtro_fecha_hasta_DATE}  AND m.estado = &#39;INICIADA&#39;</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Pago Seguro - Mediacion - Detalle de operaciones de compradores que solicitaron mediacion y el vendedor no respondio</Data></Cell>
			<Cell><Data ss:Type="String">SELECT  o.id operacion,              ctama.ID cargoId,              ctama.transaccion_id transaccionId,              ctama.AViso_ID avisoID,              to_char(o.GENERACION,&#39;YYYY/MM/DD&#39;) fecha_generacion_operacion,              to_char(m.GENERACION,&#39;YYYY/MM/DD&#39;) fecha_solicitud,              o.COMPRADOR_ID compradorID,              comprador.USU_APODO apodoComprador,               comprador.USU_NOMBRE nombreComprador,               comprador.usu_apellido apellidoComprador,               comprador.USU_EMAIL emailComprador,               ctama.aviso_PRECIO_pesos * ctama.aviso_CANTIDAD montoOperacion,               ctama.MONTO montoComision,               vendedor.USU_APODO apodoVendedor,              vendedor.usuario_id vendedorId,              vendedor.usu_nombre nombreVendedor,              vendedor.usu_apellido apellidoVendedor,              vendedor.usu_email emailVendedor,               ctama.cuenta_id cuentaId  FROM sacar.pgs_operacion o, sacar.pgs_mediacion m, sacar.SAC_USUARIO comprador, sacar.cce_cargo ctama, sacar.SAC_USUARIO vendedor  WHERE o.mediacion_id = m.id  AND nvl2( m.actualizacion, m.actualizacion, m.generacion  ) BETWEEN $P{MO_reporting_filtro_fecha_desde_DATE} AND $P{MO_reporting_filtro_fecha_hasta_DATE}      AND m.estado like &#39;INICIADA&#39;  AND o.COMPRADOR_ID = comprador.usuario_id  AND o.CARGO_ID = ctama.ID  AND o.VENDEDOR_ID = vendedor.USUARIO_ID</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Pago Seguro - Solicitudes - Cantidad de pedidos pendientes de pago seguro</Data></Cell>
			<Cell><Data ss:Type="String">    SELECT COUNT(*) cantidad  FROM sacar.pgs_solicitud  WHERE aprobacion = &#39;NO&#39;  AND generacion BETWEEN $P{MO_reporting_filtro_fecha_desde_DATE} AND $P{MO_reporting_filtro_fecha_hasta_DATE}  AND CARGO_ID IS NOT NULL</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Pago Seguro - Solicitudes - Detalle de pedidos pendientes de pago seguro</Data></Cell>
			<Cell><Data ss:Type="String">SELECT ma.id idCargo, ma.transaccion_id idtransaccion, ma.aviso_id avisoID, ma.AVISO_TITULO titulo,               comprador.usu_apodo apodoComprador, comprador.usu_email mailComprador,               vendedor.USU_APODO apodoVendedor, vendedor.USU_EMAIL mailVendedor , to_char(ps.GENERACION,&#39;YYYY/MM/DD&#39;) fecha_pedido    FROM sacar.PGS_SOLICITUD ps,   sacar.CCE_CARGO ma,   sacar.SAC_USUARIO comprador,    sacar.SAC_USUARIO vendedor,           sacar.SAC_MOVIMIENTO m,           sacar.cce_cuenta ca  WHERE aprobacion = &#39;NO&#39;  AND PS.GENERACION BETWEEN $P{MO_reporting_filtro_fecha_desde_DATE} AND $P{MO_reporting_filtro_fecha_hasta_DATE}  AND ps.CARGO_ID = ma.id      AND ca.id = ma.cuenta_id      AND m.MOV_ID = ma.transaccion_id  AND comprador.USUARIO_ID = m.USUARIO_ID  AND vendedor.USUARIO_ID = ca.USUARIO_ID</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Pago Seguro - Solicitudes - Cantidad de pedidos aceptados de pago seguro</Data></Cell>
			<Cell><Data ss:Type="String">    SELECT COUNT(*) cantidad  FROM sacar.pgs_solicitud  WHERE aprobacion = &#39;SI&#39;  AND generacion BETWEEN $P{MO_reporting_filtro_fecha_desde_DATE} AND $P{MO_reporting_filtro_fecha_hasta_DATE}  AND CARGO_ID IS NOT NULL</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Pago Seguro - Solicitudes - Detalle de pedidos aceptados de pago seguro</Data></Cell>
			<Cell><Data ss:Type="String">SELECT ma.id idCargo, ma.transaccion_id idtransaccion, ma.aviso_id avisoID, ma.AVISO_TITULO titulo,               comprador.usu_apodo apodoComprador, comprador.usu_email mailComprador,               vendedor.USU_APODO apodoVendedor, vendedor.USU_EMAIL mailVendedor     FROM sacar.PGS_SOLICITUD ps,   sacar.CCE_CARGO ma,   sacar.SAC_USUARIO comprador,    sacar.SAC_USUARIO vendedor,           sacar.SAC_MOVIMIENTO m,           sacar.cce_cuenta ca  WHERE aprobacion = &#39;SI&#39;  AND PS.GENERACION BETWEEN $P{MO_reporting_filtro_fecha_desde_DATE} AND $P{MO_reporting_filtro_fecha_hasta_DATE}  AND ps.CARGO_ID = ma.id      AND ca.id = ma.cuenta_id      AND m.MOV_ID = ma.transaccion_id  AND comprador.USUARIO_ID = m.USUARIO_ID  AND vendedor.USUARIO_ID = ca.USUARIO_ID</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Reporting - Usuarios no validados</Data></Cell>
			<Cell><Data ss:Type="String">select u.usuario_id, usu_apodo, usu_nombre, usu_apellido, usu_email, to_char(usu_fecha_ingreso,&#39;dd-mm-yyyy&#39;) ingreso  from sacar.sac_usuario u, sacar.sac_usuario_registro ur  where u.usuario_id = ur.usuario_id  and usu_fecha_ingreso &gt;= trunc($P{MO_reporting_filtro_fecha_desde_DATE})  and usu_fecha_ingreso &lt;= trunc($P{MO_reporting_filtro_fecha_hasta_DATE})  and estado_registro_id = 1  and tius_id in (1,2)</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Reporting - Mails enviados por fecha y hora</Data></Cell>
			<Cell><Data ss:Type="String">select to_char(fecha_alta,&#39;yyyy/mm/dd hh24&#39;) hora, e.descripcion, count(*) cantidad  from sacar.mail_registro r, sacar.mail_estados e  where 1=1  and r.mail_estado_id = e.codigo  and trunc(fecha_alta) = trunc( $P{MO_reporting_filtro_fecha_DATE} )  group by to_char(fecha_alta,&#39;yyyy/mm/dd hh24&#39;), e.descripcion  order by 1 desc</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Reporting - Mails enviados por rango de fechas</Data></Cell>
			<Cell><Data ss:Type="String">select to_char(fecha_alta,&#39;yyyy/mm/dd&#39;) fecha, e.descripcion, count(*) cantidad  from sacar.mail_registro r, sacar.mail_estados e  where 1=1  and r.mail_estado_id = e.codigo  and trunc(fecha_alta) &gt;= trunc($P{MO_reporting_filtro_fecha_desde_DATE})  and trunc(fecha_alta) &lt;= trunc($P{MO_reporting_filtro_fecha_hasta_DATE})  group by to_char(fecha_alta,&#39;yyyy/mm/dd&#39;), e.descripcion  order by 1 desc</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - MAILS - Mails erroneos</Data></Cell>
			<Cell><Data ss:Type="String"> select count(*) from sacar.mail_registro WHERE mail_estado_id &lt;&gt; 1 AND mail_estado_id &lt;&gt; 2;</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Mails Enviados - Resumen</Data></Cell>
			<Cell><Data ss:Type="String">SELECT   TO_CHAR(TRUNC(MAILS_ENVIADOS_RES.Fecha_Envio)) AS Fecha_Envio,  MAILS_ENVIADOS_RES.Template AS Template,  MAX(MAILS_ENVIADOS_RES.Tipo_de_Usuario) AS Tipo_de_Usuario,  COUNT(MAILS_ENVIADOS_RES.mail_reg_id) AS Cantidad,  round(SUM(MAILS_ENVIADOS_RES.Monto_Notificado),2) AS Monto_Notificado,  round(SUM(MAILS_ENVIADOS_RES.Monto_Minimo),2) AS Monto_Minimo,  SUM(MAILS_ENVIADOS_RES.Enviado) AS Enviado,  SUM(MAILS_ENVIADOS_RES.No_Enviado) AS No_Enviado,  SUM(MAILS_ENVIADOS_RES.Clickeado) AS Clickeado,  SUM(MAILS_ENVIADOS_RES.Leido) AS Leido  FROM  (      SELECT       CCE_MAIL_MOVIMIENTO.MAIL_REG_ID,      MAX(SACAR.MAIL_REGISTRO.FECHA_ALTA) AS Fecha_Envio,      MAX(SACAR.CTA_DOMINIO.SIGNIFICADO) AS Template,      (          CASE              WHEN(INSTR(MAX(SACAR.CCE_MAIL_MOVIMIENTO.mail_template_id),&#39;_BK_&#39;, 1, 1) != 0) THEN &#39;BK&#39;              ELSE &#39;WEB&#39;          END      ) AS Tipo_de_Usuario,      SUM(SACAR.CCE_MAIL_MOVIMIENTO.importe_movimiento) AS Monto_Notificado,      MAX(SACAR.CCE_MAIL_MOVIMIENTO.importe_minimo) AS Monto_Minimo,      MAX(          CASE              WHEN(SACAR.MAIL_REGISTRO.mail_estado_id = 1) THEN 0              ELSE 1          END          ) AS Enviado,      MAX(          CASE              WHEN(SACAR.MAIL_REGISTRO.mail_estado_id = 2) THEN 0              ELSE 1          END          ) AS No_Enviado,      MAX(          CASE              WHEN(SACAR.MAIL_REGISTRO.click_link LIKE &#39;Y&#39;) THEN 1              ELSE 0          END          ) AS Clickeado,      MAX(          CASE              WHEN(SACAR.MAIL_REGISTRO.SEE_IMAGE LIKE &#39;Y&#39;) THEN 1              ELSE 0          END          ) AS Leido      FROM SACAR.CCE_MAIL_MOVIMIENTO      LEFT JOIN SACAR.MAIL_REGISTRO ON SACAR.CCE_MAIL_MOVIMIENTO.MAIL_REG_ID = SACAR.MAIL_REGISTRO.MAIL_REG_ID      LEFT JOIN SACAR.CTA_DOMINIO ON SACAR.CCE_MAIL_MOVIMIENTO.MAIL_TEMPLATE_ID = SACAR.CTA_DOMINIO.ABREVIATURA     WHERE TRUNC(SACAR.MAIL_REGISTRO.FECHA_ALTA) BETWEEN TRUNC( $P{GC_filtro_fecha_desde_DATE_PROD} ) AND TRUNC( $P{GC_filtro_fecha_hasta_DATE_PROD} )      AND (0 = DECODE($P{GC_filtro_mail_enviado_PROD} ,&#39;Indistinto&#39;,0,1) OR SACAR.MAIL_REGISTRO.mail_estado_id = DECODE( $P{GC_filtro_mail_enviado_PROD} ,&#39;Si&#39;,2,1) )      AND (0 = DECODE($P{GC_filtro_tipo_usuario_PROD} ,&#39;Indistinto&#39;,0,1) OR DECODE(INSTR(SACAR.CCE_MAIL_MOVIMIENTO.mail_template_id,&#39;_BK_&#39;, 1, 1),0,&#39;Web&#39;,&#39;Broker&#39;) LIKE $P{GC_filtro_tipo_usuario_PROD} )      AND (0 = DECODE($P{GC_filtro_mail_template_id_PROD} ,&#39;&#39;,0,1) OR SACAR.CTA_DOMINIO.SIGNIFICADO IN ( $P!{GC_filtro_mail_template_id_PROD} ) )      GROUP BY SACAR.CCE_MAIL_MOVIMIENTO.MAIL_REG_ID  ) MAILS_ENVIADOS_RES  GROUP BY TRUNC(MAILS_ENVIADOS_RES.Fecha_Envio), MAILS_ENVIADOS_RES.Template</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Reporting - Movimientos de un aviso archivado</Data></Cell>
			<Cell><Data ss:Type="String">select esav_id, esav_estado, esav_creado_por, to_char(esav_fecha_creacion, &#39;YYYY/MM/DD hh24:mi:ss&#39;) generacion, av_id, esav_usuario_id  from sacar_h.sac_estado_aviso_H  where av_id = $P{MO_reporting_filtro_aviso_id}  </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Reporting - Reporte diario de cargos cerrado</Data></Cell>
			<Cell><Data ss:Type="String">select ca.tipo_cargo_id, sum(ca.monto) monto, count(*)   cantidad  from sacar.ccE_cargo ca  where trunc(ca.generacion) &gt;= trunc($P{MO_reporting_filtro_fecha_desde_DATE})  and trunc(ca.generacion) &lt;= trunc($P{MO_reporting_filtro_fecha_hasta_DATE})  group by ca.tipo_cargo_id</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Facturacion - Perfiles de usuarios y rubros</Data></Cell>
			<Cell><Data ss:Type="String">select c.TIPO_CLIENTE_CODIGO, u.tipo_usu_corporativo, count(*) cantidad  from sacar.sac_usuario u, sacar.cce_cuenta c  where u.usuario_id = c.usuario_id  group by u.tipo_usu_corporativo, c.TIPO_CLIENTE_CODIGO  order by 1,2  </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Gestion - Usuarios en condiciones de ser inhabilitados</Data></Cell>
			<Cell><Data ss:Type="String">SELECT   U.usuario_id,           U.usu_apodo,           C.tipo_cliente_codigo      FROM   sacar.cce_cuenta C, sacar.sac_usuario U     WHERE   C.usuario_id = U.usuario_id             AND C.estado = $P{MO_reporting_filtro_estado_cuenta}             AND $P{MO_reporting_filtro_saldo_maximo} &lt;=                   (SELECT   SUM (importe_movimiento)                      FROM   sacar.erp_movimiento                     WHERE   sacar.erp_movimiento.id_usuario = U.usuario_id                             AND ( (sacar.erp_movimiento.tipo_movimiento = &#39;S&#39;)                                  OR (sacar.erp_movimiento.tipo_movimiento = &#39;C&#39;)                                  OR (sacar.erp_movimiento.tipo_movimiento = &#39;D&#39;                                      AND (TRUNC (                                              sacar.erp_movimiento.fecha_vencimiento                                           ) &lt;=                                              TRUNC (SYSDATE - $P{MO_reporting_filtro_dias_vencimiento})))))  ORDER BY (C.tipo_cliente_codigo) ASC, (U.usuario_id) ASC</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Gestion - Monto por el que sera inhabilitado un usuario</Data></Cell>
			<Cell><Data ss:Type="String">select sum(                                case when m1.subpartial &lt;= saldo_Minimo.monto then m1.importe_movimiento                                else (saldo_Minimo.monto - (m1.subpartial - m1.importe_movimiento)) end                              ) as monto_inhab                          from (                                select id_usuario, id_movimiento, fecha_vencimiento, fecha_movimiento,                                        hora_movimiento, tipo_movimiento, subtipo_comprobante,                                        importe_movimiento,                                        sum (importe_movimiento) over (                                                order by fecha_movimiento desc,                                                hora_movimiento desc, id_movimiento desc rows unbounded preceding                                            ) as subpartial                                from sacar.erp_movimiento,                                       (select sum(importe_movimiento) monto from sacar.erp_movimiento where id_usuario = $P{MO_reporting_filtro_usuario_id}) saldo_minimo                                where id_usuario = $P{MO_reporting_filtro_usuario_id}                                       and (erp_movimiento.subtipo_comprobante=&#39;MIG&#39; or                                            erp_movimiento.subtipo_comprobante=&#39;FCA&#39; or                                            erp_movimiento.subtipo_comprobante=&#39;FCB&#39; )                                order by fecha_movimiento desc, hora_movimiento desc,id_movimiento desc                                ) m1, (select sum(importe_movimiento) monto from sacar.erp_movimiento where id_usuario = $P{MO_reporting_filtro_usuario_id}) saldo_minimo                            where (saldo_Minimo.monto - (m1.subpartial - m1.importe_movimiento) &gt;= 0)                            and (m1.subtipo_comprobante=&#39;MIG&#39; or                                ((m1.subtipo_comprobante=&#39;FCA&#39; or                                  m1.subtipo_comprobante=&#39;FCB&#39;) and                               (trunc(m1.fecha_vencimiento) &lt;= trunc(sysdate - $P{MO_reporting_filtro_dias_vencimiento}))))  </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Facturacion - Perfiles de usuarios y rubros detalle</Data></Cell>
			<Cell><Data ss:Type="String">select u.usuario_id, u.usu_apodo, c.tipo_cliente_codigo, u.tipo_usu_corporativo, u.tius_id, u.usu_nombre, u.usu_apellido, u.usu_email   from sacar.sac_usuario u, sacar.cce_cuenta c  where u.usuario_id = c.usuario_id  and ( c.tipo_cliente_codigo = $P{MO_reporting_filtro_rubro_cliente}  or $P{MO_reporting_filtro_rubro_cliente} = &#39;Indistinto&#39;)  and ( u.tipo_usu_corporativo = $P{MO_reporting_filtro_tipo_us_corporativo}  or $P{MO_reporting_filtro_tipo_us_corporativo} = &#39;Indistinto&#39;)</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Inhabilitaciones - Detalle</Data></Cell>
			<Cell><Data ss:Type="String">SELECT   TO_CHAR(sacar.cce_estado_cuenta.estado_fecha) AS Fecha_Consulta,  sacar.sac_usuario.usuario_id AS Id_Usuario_MO,  sacar.sac_usuario.usu_apodo AS Apodo,  (  CASE  WHEN(sacar.cce_cuenta.tipo_cliente_codigo = &#39;BROKER&#39;) THEN &#39;BK&#39;  ELSE &#39;WEB&#39;  END  ) AS Tipo_de_Usuario,  sacar.sac_usuario.usu_email AS Email,  suspension_activa.tipo_sus_activa AS Grado_Suspension,  mail_mov.Tipo_Inhabilitacion as Tipo_Inhabilitacion,  suspension_historico.total_suspensiones AS Q_Suspension_Historico,  mail_mov.importe_inhabilitacion AS Monto_Gestion,  (TRUNC(SYSDATE) - TRUNC(mail_mov.fecha_vencimiento)) AS D_Dias_Deuda,  mail_mov.Enviado AS Enviado,  mail_mov.Leido AS Leido,  mail_mov.Clickeado AS Clickeado,  mail_mov.No_Enviado AS No_Enviado  FROM sacar.cce_estado_cuenta  LEFT JOIN sacar.cce_cuenta ON sacar.cce_estado_cuenta.cuenta_id = sacar.cce_cuenta.id  LEFT JOIN sacar.sac_usuario ON sacar.cce_cuenta.usuario_id = sacar.sac_usuario.usuario_id  LEFT JOIN  (  SELECT sacar.crm_suspension_usuario.usuario_id,  (  CASE  WHEN (MAX(peso) = 1) THEN &#39;LEVE&#39;  WHEN (MAX(peso) = 2) THEN &#39;MODERADA&#39;  WHEN (MAX(peso) = 3) THEN &#39;GRAVE&#39;  END  ) AS tipo_sus_activa  FROM sacar.crm_suspension_usuario  LEFT JOIN   (  SELECT &#39;LEVE&#39; AS tipo_suspension, &#39;1&#39; AS peso FROM dual  UNION  SELECT &#39;MODERADA&#39; AS tipo_suspension, &#39;2&#39; AS peso FROM dual  UNION  SELECT &#39;GRAVE&#39; AS tipo_suspension, &#39;3&#39; AS peso FROM dual  ) suspension ON sacar.crm_suspension_usuario.tipo_suspension = suspension.tipo_suspension  WHERE activa LIKE &#39;Y&#39;  GROUP BY sacar.crm_suspension_usuario.usuario_id  ) suspension_activa ON sacar.sac_usuario.usuario_id = suspension_activa.usuario_id  LEFT JOIN  (  SELECT COUNT(*) as total_suspensiones,  sacar.crm_suspension_usuario.usuario_id  FROM sacar.crm_suspension_usuario  GROUP BY sacar.crm_suspension_usuario.usuario_id  ) suspension_historico ON sacar.sac_usuario.usuario_id = suspension_historico.usuario_id  LEFT JOIN  (  SELECT sacar.erp_movimiento.id_usuario,  SUM(sacar.cce_mail_movimiento.importe_movimiento) AS importe_inhabilitacion,  TRUNC(sacar.mail_registro.fecha_alta) AS fecha_alta,  MAX(sacar.erp_movimiento.fecha_vencimiento) AS fecha_vencimiento,  (  CASE  WHEN(MAX(sacar.MAIL_REGISTRO.mail_estado_id) = 1) THEN 0  ELSE 1  END  ) AS Enviado,  (  CASE  WHEN(MAX(sacar.MAIL_REGISTRO.mail_estado_id) = 2) THEN 0  ELSE 1  END  ) AS No_Enviado,  (  CASE  WHEN(MAX(sacar.MAIL_REGISTRO.click_link) LIKE &#39;Y&#39;) THEN 1  ELSE 0  END      ) AS Clickeado,  (  CASE  WHEN(MAX(sacar.MAIL_REGISTRO.SEE_IMAGE) LIKE &#39;Y&#39;) THEN 1  ELSE 0  END  ) AS Leido,  (  CASE  WHEN(MAX(sacar.cce_mail_movimiento.mail_template_id) LIKE &#39;%INHABILITACION_MANUAL%&#39;) THEN &#39;Manual&#39;  ELSE &#39;Automatica&#39;  END  ) AS Tipo_Inhabilitacion  FROM sacar.cce_mail_movimiento  LEFT JOIN sacar.erp_movimiento ON sacar.cce_mail_movimiento.id_movimiento = sacar.erp_movimiento.id_movimiento  LEFT JOIN sacar.mail_registro ON sacar.cce_mail_movimiento.mail_reg_id = sacar.mail_registro.mail_reg_id   WHERE (sacar.cce_mail_movimiento.mail_template_id = &#39;CCE_INHABILITACION_WEB_I&#39; OR sacar.cce_mail_movimiento.mail_template_id = &#39;CCE_INHABILITACION_BK_I&#39;)  AND TRUNC(sacar.mail_registro.fecha_alta) BETWEEN TRUNC( $P{GC_filtro_fecha_desde_DATE_PROD} ) AND TRUNC( $P{GC_filtro_fecha_hasta_DATE_PROD} )  GROUP BY sacar.erp_movimiento.id_usuario, TRUNC(sacar.mail_registro.fecha_alta)  ) mail_mov ON sacar.cce_cuenta.usuario_id = mail_mov.id_usuario AND TRUNC(sacar.cce_estado_cuenta.estado_fecha) = mail_mov.fecha_alta  WHERE sacar.cce_estado_cuenta.estado = &#39;INHABILITADA&#39;  AND (0 = DECODE($P{GC_filtro_mail_enviado_PROD} ,&#39;Indistinto&#39;,0,1) OR Enviado = DECODE( $P{GC_filtro_mail_enviado_PROD} ,&#39;Si&#39;,1,0) )  AND TRUNC(sacar.cce_estado_cuenta.estado_fecha) BETWEEN TRUNC( $P{GC_filtro_fecha_desde_DATE_PROD} ) AND TRUNC( $P{GC_filtro_fecha_hasta_DATE_PROD} )  AND (0 = DECODE($P{GC_filtro_tipo_usuario_PROD} ,&#39;Indistinto&#39;,0,1) OR DECODE(sacar.cce_c...</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Cargos - Resumen</Data></Cell>
			<Cell><Data ss:Type="String">SELECT   tipo_cargo,   estado_nombre as estado,   tipo_cliente,   origen, sum(monto) as monto,   count(*) as cantidad_cargos  FROM  (    select sb0.id,     sb0.cargo_id,    (      select       estado_nombre      from sacar.cce_estado_cargo_log cl1      where cl1.id = sb0.id    ) estado_nombre,      DECODE (CC.ORIGEN,&#39;COMPRA_INMEDIATA_SMS&#39;, &#39;SMS&#39;,    DECODE (CC.ORIGEN, &#39;INTRANET&#39;, &#39;INTRANET&#39;, &#39;WEB&#39;)) AS origen,CC.MONTO,     DECODE (cu.tipo_cliente_codigo,&#39;BROKER&#39;, &#39;GV&#39;,&#39;WEB&#39;) AS tipo_cliente,    (      SELECT       deuda_motivo      FROM sacar.cce_tipo_cargo ct      WHERE ID = CC.TIPO_CARGO_ID     ) as tipo_cargo    from     (      --obtengo los datos del historico de lso estados de los cargos segun la funcionalidad pedida      SELECT       MAX (ID) as id,       cargo_id      FROM sacar.cce_estado_cargo_log cl      WHERE TRUNC (cl.estado_fecha) BETWEEN TRUNC($P{GC_filtro_fecha_desde_DATE_PROD}) AND TRUNC($P{GC_filtro_fecha_hasta_DATE_PROD})                                                   AND       (           0 = DECODE ($P{GC_filtro_estado_cargo_combo_PROD}, &#39;TODOS&#39;, 0, 1)        OR (cl.estado_nombre = $P{GC_filtro_estado_cargo_combo_PROD})      )      GROUP BY cargo_id      ORDER BY cargo_id DESC    ) sb0,     sacar.cce_cargo cc,     sacar.cce_cuenta cu    where CC.ID = sb0.cargo_id    and CU.ID = CC.CUENTA_ID  ) sb1  where sb1.tipo_cliente in   (    SELECT     val    FROM     (      --la columna ind es el valor del parametro y val lo que representa      SELECT &#39;Indistinto&#39; AS ind,       &#39;WEB&#39; AS val      FROM DUAL      UNION      SELECT       &#39;Indistinto&#39; AS ind,       &#39;GV&#39; AS val      FROM DUAL      UNION      SELECT       &#39;Web&#39; AS ind,       &#39;WEB&#39; AS val      FROM DUAL      UNION      SELECT       &#39;Broker&#39; AS ind,       &#39;GV&#39; AS val      FROM DUAL    )  WHERE ind = $P{GC_filtro_tipo_usuario_PROD})  AND (0=decode($P{GC_filtro_tipo_cargo_value_PROD},&#39;Indistinto&#39;,0,1) or sb1.TIPO_CARGO= $P{GC_filtro_tipo_cargo_value_PROD})  AND (0=decode($P{GC_filtro_origen_values_PROD},&#39;Indistinto&#39;,0,1) or sb1.origen= $P{GC_filtro_origen_values_PROD})  GROUP BY (sb1.tipo_cargo, sb1.estado_nombre, sb1.tipo_cliente, sb1.origen)  ORDER BY sb1.tipo_cargo</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Reporting - Control de cargos generados</Data></Cell>
			<Cell><Data ss:Type="String">select padre.*, hijo.calif, rep.puntaje from  (SELECT  cu.usuario_id, u.usu_apodo, u.usu_nombre, u.usu_apellido,           u.usu_email, tu.tius_descripcion, SUM (ca.monto) total, cu.estado,           u.usu_suspendido, to_char (u.usu_fecha_ingreso, &#39;RRRR/MM/DD&#39;) Fecha_Ingreso      FROM sacar.cce_cargo ca,           sacar.cce_tipo_cargo tc,           sacar.cce_cuenta cu,           sacar.sac_usuario u,           sacar.sac_tipo_usuario tu     WHERE ca.estado IN ( &#39;GENERADO&#39;, &#39;CONFIRMADO&#39;)            AND ca.tipo_cargo_id = tc.ID            AND (  tc.id = $P{MO_reporting_filtro_tipo_cargo} OR $P{MO_reporting_filtro_tipo_cargo} = -1 )             AND ca.cuenta_id = cu.ID            AND u.usuario_id = cu.usuario_id            AND u.tius_id = tu.tius_id            AND ( u.usu_suspendido = $P{MO_reporting_filtro_usuario_suspendido} OR $P{MO_reporting_filtro_usuario_suspendido} = &#39;Indistinto&#39; )            AND ( cu.tipo_cliente_codigo = $P{MO_reporting_filtro_rubro_cliente}   OR $P{MO_reporting_filtro_rubro_cliente} = &#39;Indistinto&#39;  )            AND u.USU_FECHA_ACEPTA_CONDICIONES &gt;= $P{MO_reporting_filtro_ingreso_desde_DATE} and u.USU_FECHA_ACEPTA_CONDICIONES &lt;= $P{MO_reporting_filtro_ingreso_hasta_DATE}    GROUP BY cu.usuario_id,           u.usu_apodo,           u.usu_nombre,           u.usu_apellido,           u.usu_email,           tu.tius_descripcion,           cu.estado,           u.usu_suspendido,           u.usu_fecha_ingreso    HAVING SUM (ca.monto) &gt; $P{MO_reporting_filtro_minimo_generado} )padre,   (select c.usuario_calificado_id,count(1)CALIF from sacar.cal_calificacion c  where c.estado = &#39;CONFIRMADA&#39;  group by c.usuario_calificado_id) hijo,  sacar.cal_reputacion rep  where 0=0  AND padre.usuario_id = hijo.usuario_calificado_id (+)  and padre.usuario_id = rep.usuario_id  and ( rep.puntaje &gt;= $P{MO_reporting_filtro_reputacion_desde} )  and ( rep.puntaje &lt;= $P{MO_reporting_filtro_reputacion_hasta} )  ORDER BY padre.total ASC  </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Reporting - Clientes en limite de credito</Data></Cell>
			<Cell><Data ss:Type="String">SELECT          decode(u.tius_id,1,&#39;Broker&#39;,2,&#39;Web&#39;,3,&#39;SMS&#39;) as tipo_usuario,         u.usuario_id,         u.usu_apodo,         rep.PUNTAJE,         u.usu_suspendido usuario_suspendido,         to_char(u.USU_FECHA_INGRESO,&#39;YYYY-MM-DD&#39;) fecha_ingreso,         cuenta.tipo_cliente_codigo tipo_cliente,         cuenta.ID cuenta_id,          cuenta.estado cuenta_estado,         l.limite_credito limite_credito,               NVL ((SELECT SUM (cargo.monto)                   FROM sacar.cce_cargo cargo                  WHERE cargo.cuenta_id = cuenta.ID                    AND cargo.estado = &#39;CONFIRMADO&#39;),                0               )       + NVL ((SELECT SUM (cargo.monto)                   FROM sacar.cce_cargo cargo                  WHERE cargo.cuenta_id = cuenta.ID                    AND cargo.estado = &#39;CONFIRMADO&#39;),                0               ) monto_generado_confirmado,           NVL ((SELECT SUM (importe_movimiento)                   FROM sacar.erp_movimiento em                  WHERE em.id_usuario = cuenta.usuario_id),                0               )         + NVL ((SELECT SUM (lote.monto)                   FROM sacar.cce_lote lote                  WHERE lote.cuenta_id = cuenta.ID AND lote.estado = &#39;CERRADO&#39;),                0               )         + NVL ((SELECT SUM (cargo.monto)                   FROM sacar.cce_cargo cargo                  WHERE cargo.cuenta_id = cuenta.ID                    AND cargo.estado = &#39;CONFIRMADO&#39;),                0               )         - NVL ((SELECT SUM (pago.importe_pago)                   FROM sacar.erp_pagos_on pago                  WHERE pago.id_usuario = cuenta.usuario_id                    AND (   pago.codigo_respuesta IS NULL                         OR (    pago.codigo_respuesta IS NOT NULL                             AND pago.codigo_respuesta &lt;&gt; &#39;OK&#39;                            )                        )),                0               ) cuenta_saldo,                NVL ((SELECT SUM (importe_movimiento)                   FROM sacar.erp_movimiento em                  WHERE em.id_usuario = cuenta.usuario_id),                0               )         + NVL ((SELECT SUM (lote.monto)                   FROM sacar.cce_lote lote                  WHERE lote.cuenta_id = cuenta.ID AND lote.estado = &#39;CERRADO&#39;),                0               )         + NVL ((SELECT SUM (cargo.monto)                   FROM sacar.cce_cargo cargo                  WHERE cargo.cuenta_id = cuenta.ID                    AND cargo.estado = &#39;CONFIRMADO&#39;),                0               )         - NVL ((SELECT SUM (pago.importe_pago)                   FROM sacar.erp_pagos_on pago                  WHERE pago.id_usuario = cuenta.usuario_id                    AND (   pago.codigo_respuesta IS NULL                         OR (    pago.codigo_respuesta IS NOT NULL                             AND pago.codigo_respuesta &lt;&gt; &#39;OK&#39;                            )                        )),                0               ) - l.LIMITE_CREDITO as monto_sobre_limite,              ( select nvl(-sum(importe_movimiento),0)                   from sacar.erp_movimiento where tipo_movimiento = &#39;C&#39; and tipo_movimiento = &#39;C&#39;                 and id_usuario = u.usuario_id                 group by id_usuario ) +              ( SELECT nvl(sum(pago.IMPORTE_PAGO),0)                  FROM sacar.erp_pagos_on pago                 WHERE pago.id_usuario = cuenta.usuario_id                 AND (   pago.codigo_respuesta IS NULL                        OR (    pago.codigo_respuesta IS NOT NULL                                AND pago.codigo_respuesta &lt;&gt; &#39;OK&#39;                             )                    )                  ) monto_pagos_realizados,                   ( select count(*)                  from sacar.erp_movimiento where tipo_movimiento = &#39;C&#39; and tipo_movimiento = &#39;C&#39;                 and id_usuario = u.usuario_id                 group by id_usuario ) +               ( SELECT count(*)                 FROM sacar.erp_pagos_on pago                 WHERE...</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Consistencia - Cargos ENVIADOs que no figuran en ERP_MOVIMIENTO</Data></Cell>
			<Cell><Data ss:Type="String">select c.id, c.tipo_cargo_id, c.cuenta_id, c.lote_id, c.monto,   to_char(l.generacion,&#39;yyyy-mm-dd&#39;) as generacion_lote,  to_char(c.generacion,&#39;yyyy-mm-dd&#39;) as generacion_cargo,         to_char(c.actualizacion,&#39;yyyy-mm-dd&#39;) as actualizacion_cargo, c.estado, c.origen, c.destino, c.lote_id,          to_char(fecha_cierre_lote,&#39;yyyy-mm-dd&#39;) as fecha_cierre_lote, e.codigo_respuesta,          e.txt_envio, e.txt_respuesta  from sacar.cce_cargo c, sacar.erp_cargo e, sacar.cce_lote l  where c.id = e.NUMERO_CARGO  and c.lote_id = l.id  and trunc(l.generacion) &gt;= $P{MO_reporting_filtro_fecha_desde_DATE}  and trunc(l.generacion) &lt;= $P{MO_reporting_filtro_fecha_hasta_DATE}  and l.CODIGO_FACTURA is null  and l.estado &lt;&gt; &#39;ANULADO&#39;  and txt_respuesta is not null  </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Monitoreo - Cantidad de mails pendientes de enviar</Data></Cell>
			<Cell><Data ss:Type="String">select count(*) as cantidad  from sacar.mail_registro  where mail_estado_id = 1</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Consistencia - Movimientos sin PDFs (exceptuando notas de crèdito)</Data></Cell>
			<Cell><Data ss:Type="String">SELECT id_movimiento, id_usuario, tipo_cuenta_corriente, to_char(fecha_movimiento,&#39;dd/mm/yyyy&#39;) fecha_movimiento,           tipo_movimiento, tipo_comprobante, numero_comprobante, importe_movimiento, to_char(fecha_recepcion,&#39;dd/mm/yyyy&#39;) fecha_recepcion,          txt_respuesta, id_transaccion, medio_pago  FROM SACAR.ERP_MOVIMIENTO M  WHERE M.SUBTIPO_COMPROBANTE IN ( &#39;FCA&#39;, &#39;FCB&#39;)  AND M.NUMERO_COMPROBANTE not in ( select p.ID_FACTURA                                      from sacar.erp_pdf p                                      where p.TIPO_COMPROBANTE IN ( &#39;FCA&#39;, &#39;FCB&#39;)                                      AND M.NUMERO_COMPROBANTE = P.ID_FACTURA                                      AND M.SUBTIPO_COMPROBANTE = P.TIPO_COMPROBANTE )</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Reporting - Suspensiones de un usuario</Data></Cell>
			<Cell><Data ss:Type="String">select s.id, to_char(s.generacion, &#39;yyyy/mm/dd hh24:mi:ss&#39;) fecha_suspension,          s.tipo_suspension, to_char(s.vigencia, &#39;yyyy/mm/dd hh24:mi:ss&#39;) fecha_expiracion,          r.descripcion regla, s.activa,          to_char(s.fecha_baja,&#39;yyyy/mm/dd hh24:mi:ss&#39;) fecha_baja,          s.motivo_baja, s.usuario_baja_intra    from sacar.crm_suspension_usuario s, sacar.crm_regla r, sacar.sac_usuario u  where s.usuario_id = u.usuario_id  and s.regla_id = r.id  and ( $P{MO_reporting_filtro_usuario_id} = 0 or  u.usuario_id = $P{MO_reporting_filtro_usuario_id} )  and ( $P{MO_reporting_filtro_apodo} = &#39;Ingresar apodo&#39; or  u.usu_apodo = $P{MO_reporting_filtro_apodo} )  </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Reporting - Apercibimientos</Data></Cell>
			<Cell><Data ss:Type="String">select a.id, to_char(a.generacion, &#39;yyyy/mm/dd hh24:mi:ss&#39;) fecha_apercibimiento,          a.tipo_apercibimiento,  to_char(a.vigencia, &#39;yyyy/mm/dd hh24:mi:ss&#39;) fecha_expiracion,          m.DESCRIPCION motivo_apercibimiento, a.activo,           to_char(a.fecha_baja,&#39;yyyy/mm/dd hh24:mi:ss&#39;) fecha_baja,           a.usuario_alta_intra, a.usuario_baja_intra,          a.id_suspension suspension_generada  from sacar.crm_apercibimiento a, sacar.crm_motivo_apercibimiento m, sacar.sac_usuario u  where m.id = a.motivo_id   and a.usuario_id = u.usuario_id  and ( $P{MO_reporting_filtro_usuario_id} = 0 or  u.usuario_id = $P{MO_reporting_filtro_usuario_id} )  and ( $P{MO_reporting_filtro_apodo} = &#39;Ingresar apodo&#39; or  u.usu_apodo = $P{MO_reporting_filtro_apodo} )  and ( $P{MO_reporting_filtro_suspension_id} = 0 or  a.id_suspension = $P{MO_reporting_filtro_suspension_id} )  </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - DIARIO Verificacion Envio Mails</Data></Cell>
			<Cell><Data ss:Type="String">select count(*) as contador from sacar.mail_registro  where mail_estado_id =1</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Verificacion de Mails Erroneos </Data></Cell>
			<Cell><Data ss:Type="String">select de, para, asunto, mail_estado_id, usuario_id, tipo, reenvios,   to_char(fecha_alta,&#39;YYYY/MM/DD&#39;)as fechaalta, to_char(fecha_modif,&#39;YYYY/MM/DD&#39;)as fechamodif  from sacar.mail_registro  where mail_estado_id in (3,4,5,6,7,8)</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Verificacion Replicador HTML y Resize de Imagenes</Data></Cell>
			<Cell><Data ss:Type="String">select to_char(generacion,&#39;dd-mm-yyyy&#39;) as generacion, proceso, count(*) as Cantidad  from sacar.gnr_log  where trunc(generacion) &gt;= to_date($P{filtro_fecha},&#39;DD/MM/RRRR&#39;)  and proceso in (&#39;Replica HTML&#39;,&#39;Resize Imagenes&#39;)  group by to_char(generacion,&#39;dd-mm-yyyy&#39;), proceso  order by proceso, 1</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Consistencia - Operaciones de PS PAGADAS hace mas de 14 días</Data></Cell>
			<Cell><Data ss:Type="String">select id, cargo_id, comprador_id, vendedor_id, estado, to_char(generacion,&#39;dd/mm/yyyy&#39;) generacion, to_char(actualizacion,&#39;dd/mm/yyyy&#39;) actualizacion  from sacar.pgs_operacion  where estado = &#39;PAGADA&#39;  and actualizacion &lt; sysdate - 14  and generacion &gt;= to_date (&#39;01-01-2009&#39;,&#39;dd-mm-yyyy&#39;)  and mediacion_id is null</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Monitoreo - Operaciones de PS &gt; 500$ (Sabados y Domingos 8am)</Data></Cell>
			<Cell><Data ss:Type="String">select cargo.id cargo, cargo.monto, to_char(cargo.generacion,&#39;dd/mm/yyyy hh24:mi:ss&#39;) generacion, cargo.estado, cargo.origen, cargo.aviso_id,           cargo.transaccion_id, cargo.aviso_precio, cargo.aviso_moneda, cargo.aviso_cantidad, cargo.aviso_titulo,           cargo.aviso_origen,          comprador.usuario_id comprador, comprador.usu_apodo apodo_comprador, comprador.usu_email mail_comprador,          vendedor.usuario_id vendedor, vendedor.usu_apodo apodo_vendedor, vendedor.usu_email mail_vendedor,          DECODE (vendedor.tius_id, 1, &#39;BK&#39;, 2, &#39;WEB&#39;) tuv  from sacar.pgs_operacion operacion, sacar.cce_cargo cargo,       sacar.sac_usuario comprador, sacar.sac_usuario vendedor  where operacion.cargo_id = cargo.id  and operacion.vendedor_id = vendedor.usuario_id  and operacion.comprador_id = comprador.usuario_id  AND cargo.aviso_precio_pesos &gt;= 500  and operacion.generacion &gt;  TO_DATE (to_char(sysdate-1,&#39;DD/MM/RRRR&#39;)||&#39; 16:00&#39;,&#39;DD/MM/RRRR hh24:mi&#39;)  and operacion.generacion &lt;=  TO_DATE (to_char(sysdate,&#39;DD/MM/RRRR&#39;)||&#39; 08:00&#39;,&#39;DD/MM/RRRR hh24:mi&#39;)</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Monitoreo - Operaciones de PS &gt; 500$ (Sabados y Domingos 16pm)</Data></Cell>
			<Cell><Data ss:Type="String">select cargo.id cargo, cargo.monto, to_char(cargo.generacion,&#39;dd/mm/yyyy hh24:mi:ss&#39;) generacion, cargo.estado, cargo.origen, cargo.aviso_id,           cargo.transaccion_id, cargo.aviso_precio, cargo.aviso_moneda, cargo.aviso_cantidad, cargo.aviso_titulo,           cargo.aviso_origen,          comprador.usuario_id comprador, comprador.usu_apodo apodo_comprador, comprador.usu_email mail_comprador,          vendedor.usuario_id vendedor, vendedor.usu_apodo apodo_vendedor, vendedor.usu_email mail_vendedor,          DECODE (vendedor.tius_id, 1, &#39;BK&#39;, 2, &#39;WEB&#39;) tuv  from sacar.pgs_operacion operacion, sacar.cce_cargo cargo,       sacar.sac_usuario comprador, sacar.sac_usuario vendedor  where operacion.cargo_id = cargo.id  and operacion.vendedor_id = vendedor.usuario_id  and operacion.comprador_id = comprador.usuario_id  AND cargo.aviso_precio_pesos &gt;= 500  and operacion.generacion &gt;  TO_DATE (to_char(sysdate,&#39;DD/MM/RRRR&#39;)||&#39; 08:00&#39;,&#39;DD/MM/RRRR hh24:mi&#39;)  and operacion.generacion &lt;=  TO_DATE (to_char(sysdate,&#39;DD/MM/RRRR&#39;)||&#39; 16:00&#39;,&#39;DD/MM/RRRR hh24:mi&#39;)</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Reporting - Cantidad de preguntas y respuestas moderadas</Data></Cell>
			<Cell><Data ss:Type="String">select &#39;PREGUNTAS EDITADAS&#39; as descripcion, count(*) as cantidad  from sacar.sac_pregunta_aviso  where preav_pregunta like &#39;%&lt;&lt;EDITADA&gt;&gt;%&#39;  UNION  select &#39;RESPUESTAS EDITADAS&#39; as descripcion, count(*) as cantidad  from sacar.sac_pregunta_aviso  where preav_respuesta like &#39;%&lt;&lt;EDITADA&gt;&gt;%&#39;</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Reporting - Reporte de cobros por fecha</Data></Cell>
			<Cell><Data ss:Type="String">select u.usuario_id, u.usu_apodo, c.TIPO_CLIENTE_CODIGO, c.estado,           m.importe_movimiento, m.medio_pago, m.detalle_movimiento,           to_char(m.fecha_movimiento,&#39;yyyy-mm-dd&#39;) as fecha_movimiento,           to_char(m.fecha_recepcion,&#39;yyyy-mm-dd&#39;) as fecha_recepcion  from sacar.erp_movimiento m, sacar.sac_usuario u, sacar.cce_cuenta c  where m.id_usuario = u.usuario_id  and u.usuario_id = c.usuario_id   and m.tipo_movimiento = &#39;C&#39;  and m.fecha_movimiento = trunc($P{MO_reporting_filtro_fecha_DATE})</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - DIARIO Verificacion del proceso Cierre de Avisos</Data></Cell>
			<Cell><Data ss:Type="String">select count(*) as Cantidad  from sacar.sac_aviso  where av_estado = 3  and av_fecha_expiracion &lt; sysdate</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Reporting - Movimientos en la cuenta de un usuario 2</Data></Cell>
			<Cell><Data ss:Type="String">select id_movimiento, id_usuario, tipo_cuenta_corriente, to_char(fecha_movimiento,&#39;YYYY/MM/DD&#39;) || &#39; &#39; || hora_movimiento as fecha_movimiento,          tipo_movimiento, detalle_movimiento, tipo_comprobante, numero_comprobante, importe_movimiento,   (select sum(cargo.MONTO) from sacar.cce_cargo cargo where cargo.LOTE_ID = lotes_id and cargo.TIPO_CARGO_ID in (1,6) ) as comisiones,          (select sum(cargo.MONTO) from sacar.cce_cargo cargo where cargo.LOTE_ID = lotes_id and cargo.TIPO_CARGO_ID =2 ) as destaques,          (select sum(cargo.MONTO) from sacar.cce_cargo cargo where cargo.LOTE_ID = lotes_id and cargo.TIPO_CARGO_ID in (3,21) ) as bonificaciones,  file_name_pdf, to_char(fecha_recepcion,&#39;YYYY/MM/DD hh24:mi:ss&#39;) fecha_recepcion, subtipo_comprobante,          txt_respuesta, id_transaccion, medio_pago, lotes_id, to_char(fecha_vencimiento, &#39;YYYY/MM/DD&#39;) vencimiento  from sacar.erp_movimiento  where   ( id_usuario = $P{MO_reporting_filtro_usuario_id} or 0 = $P{MO_reporting_filtro_usuario_id} )  and   ( id_usuario in ( select usuario_id from sacar.sac_usuario where usu_apodo = $P{MO_reporting_filtro_apodo} )       or $P{MO_reporting_filtro_apodo} = &#39;Ingresar apodo&#39;  )  and   fecha_movimiento &gt;= $P{MO_reporting_filtro_fecha_desde_DATE}  and   fecha_movimiento &lt;= $P{MO_reporting_filtro_fecha_hasta_DATE}</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - MENSUAL Recluting - Cuenta de Avisos Activos</Data></Cell>
			<Cell><Data ss:Type="String">select u.usuario_id, u.usu_apodo, u.usu_nombre, u.usu_apellido, u.usu_email, u.USU_COD_AREA_TEL, u.USU_TELEFONO, u.USU_LOCALIDAD  ,DECODE (u.tius_id, 1, &#39;Broker&#39;, 2, &#39;Web&#39;) as TU  ,cu.ESTADO ,cu.CONDICION, a.AV_PRODUCTO_ESTADO  , count(a.av_id) as AVISOS, rep.PUNTAJE  from sacar.sac_usuario u, sacar.cce_cuenta cu, REPORTE_SACAR_AVISO a, sacar.cal_reputacion rep  where 0=0  and u.USUARIO_ID = cu.USUARIO_ID  and a.usuario_id = u.usuario_id  and u.usuario_id = rep.usuario_id  and a.av_estado = 3  group by u.usuario_id, u.usu_apodo, u.usu_nombre, u.usu_apellido, u.usu_email  ,u.USU_COD_AREA_TEL, u.USU_TELEFONO, u.USU_LOCALIDAD  ,u.tius_id, cu.ESTADO,cu.CONDICION, a.AV_PRODUCTO_ESTADO, a.av_estado, rep.PUNTAJE  order by usuario_id asc</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - MENSUAL Recluting - Cuenta de Avisos Historicos</Data></Cell>
			<Cell><Data ss:Type="String">select u.usuario_id, u.usu_apodo, u.usu_nombre, u.usu_apellido, u.usu_email, u.USU_COD_AREA_TEL, u.USU_TELEFONO, u.USU_LOCALIDAD  ,DECODE (u.tius_id, 1, &#39;Broker&#39;, 2, &#39;Web&#39;) as TU, cu.ESTADO  ,cu.CONDICION, a.AV_PRODUCTO_ESTADO  ,count(a.av_id) as AVISOS, rep.PUNTAJE  from sacar.sac_usuario u, sacar.cce_cuenta cu, REPORTE_SACAR_AVISO a, sacar.cal_reputacion rep  where 0=0  and u.USUARIO_ID = cu.USUARIO_ID  and a.usuario_id = u.usuario_id  and u.usuario_id = rep.usuario_id  group by u.usuario_id, u.usu_apodo, u.usu_nombre, u.usu_apellido, u.usu_email  ,u.USU_COD_AREA_TEL, u.USU_TELEFONO, u.USU_LOCALIDAD  ,u.tius_id, cu.ESTADO,cu.CONDICION, a.AV_PRODUCTO_ESTADO, a.av_estado, rep.PUNTAJE  order by usuario_id asc</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - MENSUAL Recluting - QVentasyDestaques</Data></Cell>
			<Cell><Data ss:Type="String">select u.usuario_id, u.usu_apodo, u.usu_nombre, u.usu_apellido, u.usu_email, u.USU_COD_AREA_TEL, u.USU_TELEFONO, u.USU_LOCALIDAD  ,DECODE (u.tius_id, 1, &#39;Broker&#39;, 2, &#39;Web&#39;) as TU, cu.ESTADO,cu.CONDICION, rep.PUNTAJE  ,decode (ca.tipo_cargo_id,1,&#39;COMISION&#39;,2,&#39;DESTAQUE&#39;,3,&#39;BONIFICACION&#39;)as TC,count(ca.id) as CANTIDAD, SUM(ca.monto) as TOTAL  ,SUM(ca.AVISO_PRECIO) as GMS  from sacar.sac_usuario u, sacar.cce_cuenta cu, sacar.cal_reputacion rep, sacar.cce_cargo ca  where 0=0  and u.USUARIO_ID = cu.USUARIO_ID  and u.usuario_id = rep.usuario_id  and ca.CUENTA_ID = cu.ID  and trunc(ca.GENERACION) &gt;= $P{MO_reporting_filtro_fecha_desde_DATE}  and trunc(ca.GENERACION) &lt;= $P{MO_reporting_filtro_fecha_hasta_DATE}  group by u.usuario_id, u.usu_apodo, u.usu_nombre, u.usu_apellido, u.usu_email  ,u.USU_COD_AREA_TEL, u.USU_TELEFONO, u.USU_LOCALIDAD  ,u.tius_id, cu.ESTADO,cu.CONDICION, rep.PUNTAJE, ca.tipo_cargo_id  order by usuario_id asc</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - MENSUAL General Q Avisos Activos-Tipo Aviso</Data></Cell>
			<Cell><Data ss:Type="String">select u.usuario_id, u.usu_apodo, u.usu_nombre, u.usu_apellido, u.USU_COD_AREA_TEL, u.USU_TELEFONO, u.USU_EMAIL,u.usu_localidad,pr.prv_nombre, tu.TIUS_DESCRIPCION, cu.ESTADO ,a.av_producto_estado , count(a.av_id) as CANTIDAD, rep.PUNTAJE REPUTACION  from sacar.sac_usuario u, sacar.sac_tipo_usuario tu, sacar.cce_cuenta cu, REPORTE_SACAR_AVISO a  ,sacar.sac_provincias pr, sacar.cal_reputacion rep  where 0=0  and u.usuario_id = cu.USUARIO_ID  and u.TIUS_ID = tu.TIUS_ID  and u.usuario_id = a.usuario_id  and u.PRV_ID = pr.PRV_ID  and u.usuario_id = rep.USUARIO_ID  and a.av_estado = 3  group by u.usuario_id, u.usu_apodo, u.usu_nombre, u.usu_apellido, u.USU_COD_AREA_TEL  ,u.USU_TELEFONO, u.USU_EMAIL,u.usu_localidad,pr.prv_nombre   ,tu.TIUS_DESCRIPCION, cu.ESTADO, a.av_producto_estado, rep.PUNTAJE  order by u.usuario_id asc</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - MENSUAL General Q Ventas GMS</Data></Cell>
			<Cell><Data ss:Type="String">select u.usuario_id, u.usu_apodo, u.usu_nombre, u.usu_apellido, u.USU_COD_AREA_TEL,u.USU_TELEFONO, u.USU_EMAIL,u.usu_localidad,pr.prv_nombre, tu.TIUS_DESCRIPCION  ,cu.ESTADO, tc.DESCRIPCION, ca.aviso_moneda as MONEDA, count(ca.id) as Transacciones, sum(ca.aviso_cantidad * ca.aviso_precio) as GMS, rep.PUNTAJE as REPUTACION  from sacar.sac_usuario u, sacar.sac_tipo_usuario tu, sacar.cce_cuenta cu, sacar.cce_cargo ca, sacar.cce_tipo_cargo tc, sacar.sac_provincias pr, sacar.cal_reputacion rep  where 0=0  and trunc(ca.GENERACION) &gt;= $P{MO_reporting_filtro_fecha_desde_DATE}  and trunc(ca.GENERACION) &lt;= $P{MO_reporting_filtro_fecha_hasta_DATE}  and u.usuario_id = cu.USUARIO_ID  and u.TIUS_ID = tu.TIUS_ID  and ca.TIPO_CARGO_ID in (1)  and cu.id=ca.cuenta_id  and ca.TIPO_CARGO_ID = tc.ID  and u.PRV_ID = pr.PRV_ID  and u.usuario_id = rep.USUARIO_ID  group by u.usuario_id, u.usu_apodo, u.usu_nombre, u.usu_apellido, u.USU_COD_AREA_TEL  ,u.USU_TELEFONO, u.USU_EMAIL,u.usu_localidad,pr.prv_nombre  ,tu.TIUS_DESCRIPCION, cu.ESTADO, tc.descripcion,ca.aviso_moneda, rep.PUNTAJE  order by u.usuario_id asc</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Inhabilitaciones - Detalle - Backup</Data></Cell>
			<Cell><Data ss:Type="String">SELECT   TO_CHAR(sacar.cce_estado_cuenta.estado_fecha) AS Fecha_Consulta,  sacar.sac_usuario.usuario_id AS Id_Usuario_MO,  sacar.sac_usuario.usu_apodo AS Apodo,  (  CASE  WHEN(sacar.cce_cuenta.tipo_cliente_codigo = &#39;BROKER&#39;) THEN &#39;BK&#39;  ELSE &#39;WEB&#39;  END  ) AS Tipo_de_Usuario,  sacar.sac_usuario.usu_email AS Email,  suspension_activa.tipo_sus_activa AS Grado_Suspension,  suspension_historico.total_suspensiones AS Q_Suspension_Historico,  mail_mov.importe_inhabilitacion AS Monto_Gestion,  (TRUNC(SYSDATE) - TRUNC(mail_mov.fecha_vencimiento)) AS D_Dias_Deuda,  mail_mov.Enviado AS Enviado,  mail_mov.Leido AS Leido,  mail_mov.Clickeado AS Clickeado,  mail_mov.No_Enviado AS No_Enviado  FROM sacar.cce_estado_cuenta  LEFT JOIN sacar.cce_cuenta ON sacar.cce_estado_cuenta.cuenta_id = sacar.cce_cuenta.id  LEFT JOIN sacar.sac_usuario ON sacar.cce_cuenta.usuario_id = sacar.sac_usuario.usuario_id  LEFT JOIN  (  SELECT sacar.crm_suspension_usuario.usuario_id,  (  CASE  WHEN (MAX(peso) = 1) THEN &#39;LEVE&#39;  WHEN (MAX(peso) = 2) THEN &#39;MODERADA&#39;  WHEN (MAX(peso) = 3) THEN &#39;GRAVE&#39;  END  ) AS tipo_sus_activa  FROM sacar.crm_suspension_usuario  LEFT JOIN   (  SELECT &#39;LEVE&#39; AS tipo_suspension, &#39;1&#39; AS peso FROM dual  UNION  SELECT &#39;MODERADA&#39; AS tipo_suspension, &#39;2&#39; AS peso FROM dual  UNION  SELECT &#39;GRAVE&#39; AS tipo_suspension, &#39;3&#39; AS peso FROM dual  ) suspension ON sacar.crm_suspension_usuario.tipo_suspension = suspension.tipo_suspension  WHERE activa LIKE &#39;Y&#39;  GROUP BY sacar.crm_suspension_usuario.usuario_id  ) suspension_activa ON sacar.sac_usuario.usuario_id = suspension_activa.usuario_id  LEFT JOIN  (  SELECT COUNT(*) as total_suspensiones,  sacar.crm_suspension_usuario.usuario_id  FROM sacar.crm_suspension_usuario  GROUP BY sacar.crm_suspension_usuario.usuario_id  ) suspension_historico ON sacar.sac_usuario.usuario_id = suspension_historico.usuario_id  LEFT JOIN  (  SELECT sacar.erp_movimiento.id_usuario,  SUM(sacar.cce_mail_movimiento.importe_movimiento) AS importe_inhabilitacion,  TRUNC(sacar.mail_registro.fecha_alta) AS fecha_alta,  MAX(sacar.erp_movimiento.fecha_vencimiento) AS fecha_vencimiento,  (  CASE  WHEN(MAX(sacar.MAIL_REGISTRO.mail_estado_id) = 1) THEN 0  ELSE 1  END  ) AS Enviado,  (  CASE  WHEN(MAX(sacar.MAIL_REGISTRO.mail_estado_id) = 2) THEN 0  ELSE 1  END  ) AS No_Enviado,  (  CASE  WHEN(MAX(sacar.MAIL_REGISTRO.click_link) LIKE &#39;Y&#39;) THEN 1  ELSE 0  END      ) AS Clickeado,  (  CASE  WHEN(MAX(sacar.MAIL_REGISTRO.SEE_IMAGE) LIKE &#39;Y&#39;) THEN 1  ELSE 0  END  ) AS Leido  FROM sacar.cce_mail_movimiento  LEFT JOIN sacar.erp_movimiento ON sacar.cce_mail_movimiento.id_movimiento = sacar.erp_movimiento.id_movimiento  LEFT JOIN sacar.mail_registro ON sacar.cce_mail_movimiento.mail_reg_id = sacar.mail_registro.mail_reg_id   WHERE (sacar.cce_mail_movimiento.mail_template_id = &#39;CCE_INHABILITACION_WEB_I&#39; OR sacar.cce_mail_movimiento.mail_template_id = &#39;CCE_INHABILITACION_BK_I&#39;)  AND TRUNC(sacar.mail_registro.fecha_alta) BETWEEN TRUNC( $P{GC_filtro_fecha_desde_DATE_PROD} ) AND TRUNC( $P{GC_filtro_fecha_hasta_DATE_PROD} )  GROUP BY sacar.erp_movimiento.id_usuario, TRUNC(sacar.mail_registro.fecha_alta)  ) mail_mov ON sacar.cce_cuenta.usuario_id = mail_mov.id_usuario AND TRUNC(sacar.cce_estado_cuenta.estado_fecha) = mail_mov.fecha_alta  WHERE sacar.cce_estado_cuenta.estado = &#39;INHABILITADA&#39;  AND (0 = DECODE($P{GC_filtro_mail_enviado_PROD} ,&#39;Indistinto&#39;,0,1) OR Enviado = DECODE( $P{GC_filtro_mail_enviado_PROD} ,&#39;Si&#39;,1,0) )  AND TRUNC(sacar.cce_estado_cuenta.estado_fecha) BETWEEN TRUNC( $P{GC_filtro_fecha_desde_DATE_PROD} ) AND TRUNC( $P{GC_filtro_fecha_hasta_DATE_PROD} )  AND (0 = DECODE($P{GC_filtro_tipo_usuario_PROD} ,&#39;Indistinto&#39;,0,1) OR DECODE(sacar.cce_cuenta.tipo_cliente_codigo,&#39;BK&#39;, &#39;Broker&#39;, &#39;Web&#39;) LIKE $P{GC_filtro_tipo_usuario_PROD} )</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Inhabilitaciones - Resumen</Data></Cell>
			<Cell><Data ss:Type="String">SELECT  TO_CHAR(TRUNC(estado_fecha)) AS Fecha_Consulta,   Tipo_de_Usuario,  COUNT(*) AS Cantidad,  SUM(importe_inhabilitacion) AS Monto_Gestion,  (TRUNC(sysdate) - TRUNC(MIN(fecha_vencimiento))) AS Q_Dias_Deuda,  SUM(Enviado) AS Enviado,  SUM(No_Enviado) AS No_Enviado,  SUM(Clickeado) AS Clickeado,  SUM(Leido) AS Leido  FROM  (  SELECT   mail_mov.importe_inhabilitacion,  mail_mov.fecha_alta,          mail_mov.fecha_vencimiento,  sacar.cce_estado_cuenta.estado_fecha,  mail_mov.Enviado,  mail_mov.Leido,  mail_mov.Clickeado,  mail_mov.No_Enviado,  (  CASE  WHEN(sacar.cce_cuenta.tipo_cliente_codigo = &#39;BROKER&#39;) THEN &#39;BK&#39;  ELSE &#39;WEB&#39;  END  ) AS Tipo_de_Usuario  FROM sacar.cce_estado_cuenta  LEFT JOIN sacar.cce_cuenta ON sacar.cce_estado_cuenta.cuenta_id = sacar.cce_cuenta.id  LEFT JOIN  (  SELECT sacar.erp_movimiento.id_usuario,  SUM(sacar.cce_mail_movimiento.importe_movimiento) AS importe_inhabilitacion,  TRUNC(sacar.mail_registro.fecha_alta) AS fecha_alta,  MAX(sacar.erp_movimiento.fecha_vencimiento) AS fecha_vencimiento,  (  CASE  WHEN(MAX(sacar.MAIL_REGISTRO.mail_estado_id) = 1) THEN 0  ELSE 1  END  ) AS Enviado,  (  CASE  WHEN(MAX(sacar.MAIL_REGISTRO.mail_estado_id) = 2) THEN 0  ELSE 1  END  ) AS No_Enviado,  (  CASE  WHEN(MAX(sacar.MAIL_REGISTRO.click_link) LIKE &#39;Y&#39;) THEN 1  ELSE 0  END      ) AS Clickeado,  (  CASE  WHEN(MAX(sacar.MAIL_REGISTRO.SEE_IMAGE) LIKE &#39;Y&#39;) THEN 1  ELSE 0  END      ) AS Leido  FROM sacar.cce_mail_movimiento  LEFT JOIN sacar.erp_movimiento ON sacar.cce_mail_movimiento.id_movimiento = sacar.erp_movimiento.id_movimiento  LEFT JOIN sacar.mail_registro ON sacar.cce_mail_movimiento.mail_reg_id = sacar.mail_registro.mail_reg_id   WHERE (sacar.cce_mail_movimiento.mail_template_id = &#39;CCE_INHABILITACION_WEB_I&#39; OR sacar.cce_mail_movimiento.mail_template_id = &#39;CCE_INHABILITACION_BK_I&#39;)  AND TRUNC(sacar.mail_registro.fecha_alta) BETWEEN TRUNC( $P{GC_filtro_fecha_desde_DATE_PROD} ) AND TRUNC( $P{GC_filtro_fecha_hasta_DATE_PROD} )  GROUP BY sacar.erp_movimiento.id_usuario, TRUNC(sacar.mail_registro.fecha_alta)  ) mail_mov ON sacar.cce_cuenta.usuario_id = mail_mov.id_usuario AND TRUNC(sacar.cce_estado_cuenta.estado_fecha) = mail_mov.fecha_alta  WHERE sacar.cce_estado_cuenta.estado = &#39;INHABILITADA&#39;  AND (0 = DECODE($P{GC_filtro_mail_enviado_PROD} ,&#39;Indistinto&#39;,0,1) OR Enviado = DECODE( $P{GC_filtro_mail_enviado_PROD} ,&#39;Si&#39;,1,0) )  AND TRUNC(sacar.cce_estado_cuenta.estado_fecha) BETWEEN TRUNC( $P{GC_filtro_fecha_desde_DATE_PROD} ) AND TRUNC( $P{GC_filtro_fecha_hasta_DATE_PROD} )  )  WHERE (0 = DECODE($P{GC_filtro_tipo_usuario_PROD} ,&#39;Indistinto&#39;,0,1) OR DECODE(Tipo_de_Usuario,&#39;BK&#39;, &#39;Broker&#39;, &#39;Web&#39;) LIKE $P{GC_filtro_tipo_usuario_PROD} )  GROUP BY TRUNC(estado_fecha), Tipo_de_Usuario</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Mails Enviados - Detalle</Data></Cell>
			<Cell><Data ss:Type="String">SELECT   to_char(TRUNC(sacar.mail_registro.fecha_alta)) AS Fecha,  sacar.cce_mail_movimiento.mail_template_id AS Template,                                                                                                                                                                                                                                                                              sacar.sac_usuario.usuario_id AS Id_Usuario_MO,  sacar.sac_usuario.usu_apodo AS Apodo,  (      CASE          WHEN(INSTR(sacar.cce_mail_movimiento.mail_template_id,&#39;_BK_&#39;, 1, 1) != 0) THEN &#39;BK&#39;          ELSE &#39;WEB&#39;      END  ) AS Tipo_de_usuario,  sacar.sac_usuario.usu_email AS Email,  suspension_activa.tipo_sus_activa AS Grado_Suspension,  suspension_historico.total_suspensiones AS Q_Suspension_historico,  DECODE(sacar.cce_cuenta.estado, &#39;HABILITADA&#39;, &#39;H&#39;, &#39;I&#39;) AS Estado_de_Cuenta,  SUM(sacar.cce_mail_movimiento.importe_movimiento) AS Monto_Notificado,  MAX(sacar.cce_mail_movimiento.importe_minimo) AS Monto_Minimo,  to_char(MAX(TRUNC(sacar.erp_movimiento.fecha_movimiento))) AS Fecha_Emision_Facturas,  facturas_notificadas.CONCATENATED_STRING AS Facturas_Reclamadas,  DECODE(sacar.mail_registro.mail_estado_id, &#39;2&#39; , &#39;Si&#39;, &#39;No&#39;) AS  Enviado,  DECODE(sacar.mail_registro.see_image,&#39;Y&#39;, &#39;Si&#39;, &#39;No&#39;) AS Leido,  DECODE(sacar.mail_registro.click_link,&#39;Y&#39;, &#39;Si&#39;, &#39;No&#39;) AS Clickeado  FROM sacar.cce_mail_movimiento  LEFT JOIN sacar.erp_movimiento ON sacar.cce_mail_movimiento.id_movimiento = sacar.erp_movimiento.id_movimiento  LEFT JOIN sacar.sac_usuario ON sacar.erp_movimiento.id_usuario = sacar.sac_usuario.usuario_id  LEFT JOIN sacar.mail_registro ON sacar.cce_mail_movimiento.mail_reg_id = sacar.mail_registro.mail_reg_id  LEFT JOIN  (      SELECT sacar.crm_suspension_usuario.usuario_id,      (          CASE              WHEN (MAX(peso) = 1) THEN &#39;LEVE&#39;              WHEN (MAX(peso) = 2) THEN &#39;MODERADA&#39;              WHEN (MAX(peso) = 3) THEN &#39;GRAVE&#39;          END      ) AS tipo_sus_activa      FROM sacar.crm_suspension_usuario      LEFT JOIN       (          SELECT &#39;LEVE&#39; AS tipo_suspension, &#39;1&#39; AS peso FROM dual          UNION          SELECT &#39;MODERADA&#39; AS tipo_suspension, &#39;2&#39; AS peso FROM dual          UNION          SELECT &#39;GRAVE&#39; AS tipo_suspension, &#39;3&#39; AS peso FROM dual      ) suspension ON sacar.crm_suspension_usuario.tipo_suspension = suspension.tipo_suspension      WHERE activa LIKE &#39;Y&#39;      GROUP BY sacar.crm_suspension_usuario.usuario_id  ) suspension_activa ON sacar.sac_usuario.usuario_id = suspension_activa.usuario_id  LEFT JOIN  (      SELECT COUNT(*) as total_suspensiones,      sacar.crm_suspension_usuario.usuario_id      FROM sacar.crm_suspension_usuario      GROUP BY sacar.crm_suspension_usuario.usuario_id  ) suspension_historico ON sacar.sac_usuario.usuario_id = suspension_historico.usuario_id  LEFT JOIN  (  SELECT  mail_reg_id,  SUBSTR(MAX(REPLACE(  SYS_CONNECT_BY_PATH( CONCAT( CONCAT(subtipo_comprobante, &#39; &#39;), numero_comprobante) , &#39;/&#39;)  ,&#39;/&#39;,&#39;, &#39;)),2) Concatenated_String  FROM   (      SELECT      sacar.cce_mail_movimiento.mail_reg_id,      sacar.erp_movimiento.subtipo_comprobante,      sacar.erp_movimiento.numero_comprobante,      row_number() OVER (Partition by sacar.cce_mail_movimiento.mail_reg_id order by sacar.cce_mail_movimiento.id_movimiento ) ROW#      FROM sacar.cce_mail_movimiento      LEFT JOIN sacar.erp_movimiento ON sacar.cce_mail_movimiento.id_movimiento = sacar.erp_movimiento.id_movimiento  )  START WITH ROW#=1  CONNECT BY PRIOR mail_reg_id = mail_reg_id  AND PRIOR row# = row# -1  GROUP BY mail_reg_id  ) facturas_notificadas ON sacar.cce_mail_movimiento.mail_reg_id = facturas_notificadas.mail_reg_id  LEFT JOIN sacar.cce_cuenta ON sacar.sac_usuario.usuario_id = sacar.cce_cuenta.usuario_id  LEFT JOIN sacar.cta_dominio ON sacar.cce_mail_movimiento.mail_template_id = sacar.cta_dominio.abreviatura  WHERE TRUNC(sacar.mail_registro.fecha_alta) BETWEEN TRUNC( $P{GC_filtro_fecha_desde_DATE_PROD} ) AND TRUNC( $P{GC_filtro_fecha_hasta_D...</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Reporting - Preguntas que faltan Moderar</Data></Cell>
			<Cell><Data ss:Type="String">select Preguntas, Cantidad, to_char(TRUNC(FechaMenor)) as FechaMenor  from (  select &#39;PROPUESTAS&#39; as Preguntas, count(*) as Cantidad , min(generacion) as FechaMenor  from sacar.MOD_CANDIDATO  where moderado = &#39;NO&#39;  UNION  select &#39;TODAS&#39; as Preguntas, count(*) as Cantidad, min(preav_fecha_creacion) as FechaMenor  from sacar.SAC_PREGUNTA_AVISO  where preav_pregunta_original is null  )</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Promociones Comprador</Data></Cell>
			<Cell><Data ss:Type="String">SELECT  AV.AV_ID AS id_aviso,   av.av_titulo AS producto,           MOV.USUARIO_ID_VENDEDOR as vendedor,           USUV.USU_APODO as apodo_vendedor,           PROMOC.ID as id_promo,           PROMOC.DESCRIPCION as promo_desc,           PROMOC.HABILITADA as promo_habilitada,           &#39;$&#39; || AV.AV_PRECIO AS precio_mo,           &#39;-&#39; || decode(nvl(PROMOC.PORCENTAJE,-1),-1,0, (PROMOC.PORCENTAJE * PROMOC.PORCENTAJE_MO) / 100) || &#39;%&#39; as dto_vend_porc,            &#39;$-&#39; || (MOV.MOV_PRECIO_NO_PROMOCIONADO - MOV.MOV_PRECIO) * (1 - (nvl(PROMOC.PORCENTAJE_MO,0) / 100))  as dto_vend_peso,           &#39;-&#39; || decode(nvl(PROMOC.PORCENTAJE,-1),-1,0,(PROMOC.PORCENTAJE - (PROMOC.PORCENTAJE  * PROMOC.PORCENTAJE_MO) / 100)) || &#39;%&#39; as diferencia_mo,           &#39;$-&#39; || (MOV.MOV_PRECIO_NO_PROMOCIONADO - MOV.MOV_PRECIO) * (nvl(PROMOC.PORCENTAJE_MO,0) / 100) as dto_absorvido_mo_pesos,           &#39;-&#39; || decode(nvl(PROMOC.PORCENTAJE, -1), -1, 0, PROMOC.PORCENTAJE) || &#39;%&#39; AS total_porc_dto,            &#39;-$&#39; || (MOV.MOV_PRECIO_NO_PROMOCIONADO - MOV.MOV_PRECIO) AS dto_en_pesos_total,           &#39;$&#39; || MOV.MOV_PRECIO as precio_final,           AV.AV_STOCK as unid_stock,           &#39;-$&#39; || (((MOV.MOV_PRECIO_NO_PROMOCIONADO - MOV.MOV_PRECIO) * (nvl(PROMOC.PORCENTAJE_MO,0) / 100)) * AV.AV_STOCK) as costo_total_para_mo,           &#39;-$&#39; || (((MOV.MOV_PRECIO_NO_PROMOCIONADO - MOV.MOV_PRECIO) * (1 - (nvl(PROMOC.PORCENTAJE_MO,0) / 100))) * AV.AV_STOCK) as costo_del_vendedor,           &#39;-$&#39; || (((MOV.MOV_PRECIO_NO_PROMOCIONADO - MOV.MOV_PRECIO) * (nvl(PROMOC.PORCENTAJE_MO,0) / 100)) * AV.AV_STOCK) / 2 as cincuenta_porc_costo_bonif,           &#39;-$&#39; || (((MOV.MOV_PRECIO_NO_PROMOCIONADO - MOV.MOV_PRECIO) * (1 - (nvl(PROMOC.PORCENTAJE_MO,0) / 100))) * AV.AV_STOCK) / 2 as cincuenta_porc_costo_devol,           &#39;-$&#39; || (((MOV.MOV_PRECIO_NO_PROMOCIONADO - MOV.MOV_PRECIO) * (nvl(PROMOC.PORCENTAJE_MO,0) / 100)) * AV.AV_STOCK) as costo_total_promo,           ventas.nro_venta as ventas_total,           ((MOV.MOV_PRECIO_NO_PROMOCIONADO - MOV.MOV_PRECIO) * (nvl(PROMOC.PORCENTAJE_MO,0) / 100)) * (ventas.nro_venta / 2)  as costo_real_total,            ((MOV.MOV_PRECIO_NO_PROMOCIONADO - MOV.MOV_PRECIO) * (nvl(PROMOC.PORCENTAJE_MO,0) / 100)) * (ventas.nro_venta / 2) / 2 as costo_real_bonific,            ((MOV.MOV_PRECIO_NO_PROMOCIONADO - MOV.MOV_PRECIO) * (nvl(PROMOC.PORCENTAJE_MO,0) / 100)) * (ventas.nro_venta / 2) / 2 as costo_real_devol_peso,            CARGO.ESTADO as cargo_estado    FROM sacar.sac_aviso av INNER JOIN sacar.sac_movimiento mov ON AV.AV_ID = MOV.AV_ID    INNER JOIN sacar.sac_usuario usuv ON MOV.USUARIO_ID_VENDEDOR = USUV.USUARIO_ID    INNER JOIN sacar.fc_promocion promoc ON MOV.PROMO_COMPRADOR_ID = PROMOC.ID    inner join sacar.cce_cargo cargo on MOV.MOV_ID = CARGO.TRANSACCION_ID,    sacar.cce_estado_cargo_log cargo_log,  (select aviso_id as aviso, count(aviso_id) as nro_venta   from sacar.cce_cargo ccargo   where ccargo.ESTADO in ($P!{MO_promo_comprador_filter_estado_cargo} )   and ccargo.promo_comprador_id is not null   group by ccargo.aviso_id) ventas    where av.av_id = ventas.AVISO   and cargo_log.estado_nombre in ($P!{MO_promo_comprador_filter_estado_cargo} )  and cargo_log.cargo_id = CARGO.id  AND PROMOC.ORIGEN = $P{MO_promo_comprador_filter_tipo_promo}   AND (0 = DECODE($P{MO_promo_comprador_filter_aviso_id} ,&#39;Ingrese ID&#39;,0,1) OR AV.AV_ID = $P{MO_promo_comprador_filter_aviso_id} )  AND CARGO.ESTADO in ($P!{MO_promo_comprador_filter_estado_cargo})   AND (0 = DECODE($P{MO_promo_comprador_filter_estado_promo} ,&#39;TODAS&#39;,0,1) OR PROMOC.HABILITADA = $P{MO_promo_comprador_filter_estado_promo} )  AND (0 = DECODE($P{MO_promo_comprador_filter_promo_id} ,&#39;Ingrese Promo ID&#39;,0,1) OR to_char(PROMOC.ID) = $P{MO_promo_comprador_filter_promo_id} )  AND (0 = DECODE($P{MO_promo_comprador_filter_usuario_vend_id} ,&#39;Ingrese ID&#39;,0,1) OR usuv.USUARIO_ID = $P{MO_promo_comprador_filter_usuario_vend_id} )  AND DECODE ($P{GC_filtro_tipo_fecha},                           &#39;Fecha generacion&#39;, TRUNC ...</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Moderacion - Patrones que se buscan en preguntas</Data></Cell>
			<Cell><Data ss:Type="String">select *  from sacar.MOD_PALABRA  </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Confronte - Ofertas en el sitio bindeadas (total y por pais)</Data></Cell>
			<Cell><Data ss:Type="String">SELECT b.country pais, count(*) cantidad  FROM offer o, biz b  where o.showable = 1  and o.product_fk is not null  and o.biz_fk = b.id  group by b.country  UNION  SELECT &#39;TOTAL&#39; pais, count(*) cantidad  FROM offer o  where o.showable = 1  and o.product_fk is not null</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - MENSUAL GMV x Mes x Tipo Cliente - Bonificaciones</Data></Cell>
			<Cell><Data ss:Type="String">SELECT  SUM (monto) AS gmv,u.tius_id  FROM sacar.sac_usuario u, sacar.cce_cuenta cu, sacar.cce_cargo ca  WHERE 0 = 0  AND ca.cuenta_id = cu.ID  AND ca.tipo_cargo_id = 3  AND u.usuario_id = cu.usuario_id  and trunc(ca.GENERACION) &gt;= $P{MO_reporting_filtro_fecha_desde_DATE}  and trunc(ca.GENERACION) &lt;= $P{MO_reporting_filtro_fecha_hasta_DATE}  GROUP BY u.tius_id</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - MENSUAL GMV x Mes x Categoria - Comisiones</Data></Cell>
			<Cell><Data ss:Type="String">select SUM (DECODE (ca.aviso_moneda,&#39;P&#39;, ca.aviso_precio * ca.aviso_cantidad, &#39;D&#39;, ca.aviso_precio * ca.aviso_cantidad * (DECODE (TO_CHAR (ca.generacion, &#39;mm/yyyy&#39;), to_char(sysdate-10,&#39;mm/yyyy&#39;),3.82 )))) GMV, bsq.l1 ID_CATEGORIA, bsq.DESCRIPCION_L1 CATEGORIA  from sacar.cce_cargo ca, sacar.BSQ_AGRUPADOR_CATEGORIA bsq, REPORTE_SACAR_AVISO a   where 0=0  and a.AV_ID = ca.aviso_id  and a.CATE_ID = bsq.CATEGORIA_ID  and ca.tipo_cargo_id = 1  and trunc(ca.GENERACION) &gt;= $P{MO_reporting_filtro_fecha_desde_DATE}  and trunc(ca.GENERACION) &lt;= $P{MO_reporting_filtro_fecha_hasta_DATE}  group by TO_CHAR (ca.generacion, &#39;mm/yyyy&#39;),bsq.l1, bsq.DESCRIPCION_L1</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - MENSUAL GMV Listing total x Tipo Usuario</Data></Cell>
			<Cell><Data ss:Type="String">select decode(u.tius_id,1,&#39;BK&#39;,2,&#39;WEB&#39;)TU,count(1) CANTIDAD, a.AV_PRODUCTO_ESTADO  from sacar.sac_aviso a, sacar.sac_usuario u  where 0=0  and a.usuario_id = u.usuario_id  and a.av_estado=3  and trunc(a.AV_FECHA_CREACION) &gt;= $P{MO_reporting_filtro_fecha_desde_DATE}  and trunc(a.AV_FECHA_CREACION) &lt;= $P{MO_reporting_filtro_fecha_hasta_DATE}  group by decode(u.tius_id,1,&#39;BK&#39;,2,&#39;WEB&#39;), a.AV_PRODUCTO_ESTADO</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - MENSUAL GMS x Categoria</Data></Cell>
			<Cell><Data ss:Type="String">select bsq.l1 as ID_CATEGORIA, cat.CATE_DESCRIPCION as DESCRIPCION  , sum(ca.aviso_cantidad) as CANTIDAD  , sum( decode(a.av_moneda,&#39;P&#39;,1,&#39;D&#39;,3.82) * ca.aviso_precio*ca.aviso_cantidad) as GMS   from sacar.bsq_agrupador_categoria bsq, sacar.sac_categoria cat  ,REPORTE_SACAR_AVISO a, sacar.cce_cargo ca  where 0=0  and bsq.l1 = cat.CATE_ID  and bsq.CATEGORIA_ID = a.cate_id   and ca.AVISO_ID = a.AV_ID  and ca.TIPO_CARGO_ID = 1 --SIN CONTAR BONIFICACIONES NI DESTAQUES  and trunc(ca.GENERACION) &gt;= $P{MO_reporting_filtro_fecha_desde_DATE}  and trunc(ca.GENERACION) &lt;= $P{MO_reporting_filtro_fecha_hasta_DATE}  group by bsq.l1, cat.CATE_DESCRIPCION   order by id_categoria asc</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - MENSUAL UsuariosConPublicacionEnLosUltimos6meses</Data></Cell>
			<Cell><Data ss:Type="String">select padre.*, cu.ESTADO   from (select u.usuario_id, u.usu_apodo, u.usu_nombre, u.usu_apellido, u.usu_email ,u.usu_cod_area_tel,u.usu_telefono,tu.TIUS_DESCRIPCION, count(a.av_id)CANTIDAD  from sacar.sac_usuario u, REPORTE_SACAR_AVISO a, sacar.sac_tipo_usuario tu  where 0=0  and u.tius_id = tu.TIUS_ID  and a.usuario_id = u.usuario_id  and a.AV_FECHA_CREACION between  sysdate - 180 and sysdate - 1  group by u.usuario_id, u.usu_apodo, u.usu_nombre, u.usu_apellido, u.usu_email ,u.usu_cod_area_tel,u.usu_telefono,tu.TIUS_DESCRIPCION)padre ,sacar.cce_cuenta cu  where 0=0   and padre.usuario_id = cu.usuario_id (+)</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Fer - prueba de schedule</Data></Cell>
			<Cell><Data ss:Type="String">select cargo.id cargo, cargo.monto monto, to_char(cargo.generacion,&#39;dd/mm/yyyy hh24:mi:ss&#39;) generacion, cargo.estado estado, cargo.origen origen, cargo.aviso_id aviso, cargo.transaccion_id transaccion, comprador.usu_email mail_comprador, vendedor.usu_apodo apodo_vendedor, vendedor.usu_email mail_vendedor  from sacar.pgs_operacion operacion, sacar.cce_cargo cargo,       sacar.sac_usuario comprador, sacar.sac_usuario vendedor  where operacion.cargo_id = cargo.id  and operacion.vendedor_id = vendedor.usuario_id  and operacion.comprador_id = comprador.usuario_id  AND cargo.aviso_precio_pesos &gt;= 500  and operacion.generacion &gt;  TO_DATE (to_char(sysdate-1,&#39;DD/MM/RRRR&#39;)||&#39; 16:00&#39;,&#39;DD/MM/RRRR hh24:mi&#39;)  and operacion.generacion &lt;=  TO_DATE (to_char(sysdate,&#39;DD/MM/RRRR&#39;)||&#39; 08:00&#39;,&#39;DD/MM/RRRR hh24:mi&#39;)</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - MENSUAL GrandesVendedoresReputacionVentasL1</Data></Cell>
			<Cell><Data ss:Type="String">select USUARIO_ID,APODO,NOMBRE,APELLIDO,AREA_TEL,TEL,EMAIL,LOC,PROVINCIA  ,TIPO_USU,ESTADO,CATEGORIA,max(ventas)as Ventas,REPUTACION from (  select u.usuario_id USUARIO_ID, u.usu_apodo APODO, u.usu_nombre NOMBRE, u.usu_apellido APELLIDO  , u.USU_COD_AREA_TEL AREA_TEL,u.USU_TELEFONO TEL, u.USU_EMAIL EMAIL,u.usu_localidad LOC  ,pr.prv_nombre PROVINCIA, tu.TIUS_DESCRIPCION TIPO_USU, cu.ESTADO ESTADO, cat.descripcion_l1 CATEGORIA  , count(ca.id)VENTAS, rep.PUNTAJE REPUTACION  from sacar.sac_usuario u, sacar.sac_tipo_usuario tu, sacar.cce_cuenta cu  ,sacar.cce_cargo ca, sacar.sac_provincias pr, sacar.cal_reputacion rep  ,sacar.bsq_agrupador_categoria cat, REPORTE_SACAR_AVISO a  where 0=0  and u.usuario_id = cu.USUARIO_ID  and u.TIUS_ID = tu.TIUS_ID  and ca.TIPO_CARGO_ID = 1  and cu.id=ca.cuenta_id  and u.PRV_ID = pr.PRV_ID  and u.usuario_id = rep.USUARIO_ID  and cat.categoria_id = a.cate_id  and a.av_id = ca.aviso_id  and u.tius_id = 1  and trunc(ca.GENERACION) &gt;= $P{MO_reporting_filtro_fecha_desde_DATE}  and trunc(ca.GENERACION) &lt;= $P{MO_reporting_filtro_fecha_hasta_DATE}  group by u.usuario_id, u.usu_apodo, u.usu_nombre, u.usu_apellido, u.USU_COD_AREA_TEL  ,u.USU_TELEFONO, u.USU_EMAIL,u.usu_localidad,pr.prv_nombre  , tu.TIUS_DESCRIPCION, cu.ESTADO, rep.PUNTAJE  ,cat.descripcion_l1   order by u.usuario_id asc)  group by USUARIO_ID,APODO,NOMBRE,APELLIDO,AREA_TEL,TEL,EMAIL,LOC,PROVINCIA  ,TIPO_USU,ESTADO,CATEGORIA,REPUTACION  order by usuario_id</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Promociones Comprador Ventas</Data></Cell>
			<Cell><Data ss:Type="String">select distinct CARGO.PROMO_COMPRADOR_ID as promocion,      cargo.aviso_id,      count(cargo.aviso_id) over (partition by cargo.aviso_id, to_char(cargo.actualizacion), CARGO.PROMO_COMPRADOR_ID order by to_char(cargo.actualizacion) desc) as cantidad,      to_char(cargo.actualizacion) as fecha,      MOV.USUARIO_ID_VENDEDOR as vendedor_id,      UV.USU_apodo as apodo_vendedor  from sacar.cce_cargo cargo      inner join sacar.sac_movimiento mov on CARGO.TRANSACCION_ID = MOV.MOV_ID      inner join sacar.sac_usuario uv on MOV.USUARIO_ID_VENDEDOR = UV.USUARIO_ID  where CARGO.PROMO_COMPRADOR_ID is not null  AND  CARGO.ESTADO in ($P!{MO_promo_comprador_filter_estado_cargo} )  AND (0 = DECODE($P{MO_promo_comprador_filter_aviso_id} ,&#39;Ingrese ID&#39;,0,1)   OR AVISO_ID = $P{MO_promo_comprador_filter_aviso_id} )   AND DECODE ($P{GC_filtro_tipo_fecha},                           &#39;Fecha generacion&#39;, TRUNC (generacion),                           TRUNC (actualizacion)                          ) BETWEEN trunc($P{GC_filtro_fecha_desde_DATE}) AND trunc($P{GC_filtro_fecha_hasta_DATE})  AND (0 = DECODE($P{MO_promo_comprador_filter_usuario_vend_id} ,&#39;Ingrese ID&#39;,0,1)   OR uv.USUARIO_ID = $P{MO_promo_comprador_filter_usuario_vend_id} )  AND (0 = DECODE($P{MO_promo_comprador_filter_promo_id} ,&#39;Ingrese Promo ID&#39;,0,1)   OR to_char(CARGO.PROMO_COMPRADOR_ID) = $P{MO_promo_comprador_filter_promo_id} )  order by fecha desc</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - MENSUAL General Saldo (Facturado - Cobrado)</Data></Cell>
			<Cell><Data ss:Type="String">select padre1.*, sum(padre1.facturado-padre1.pagado) as SALDO from  (select padre.*, SUM(nps.monto) as PAGADO from   (select u.usuario_id, u.usu_apodo, u.usu_nombre, u.usu_apellido, u.USU_COD_AREA_TEL  ,u.USU_TELEFONO, u.USU_EMAIL,u.usu_localidad,pr.prv_nombre, tu.TIUS_DESCRIPCION  ,cu.id CUENTA, cu.ESTADO, SUM(decode(ca.aviso_moneda,&#39;P&#39;,1,&#39;D&#39;,3.30)*ca.monto) as FACTURADO  from sacar.sac_usuario u, sacar.cce_cuenta cu, sacar.sac_tipo_usuario tu, sacar.sac_provincias pr ,sacar.cce_cargo ca  where 0=0  and u.usuario_id = cu.usuario_id  and u.tius_id = tu.tius_id  and u.prv_id = pr.PRV_ID  and ca.cuenta_id = cu.id  and ca.estado = &#39;EN_LOTE&#39;  group by u.usuario_id, u.usu_apodo, u.usu_nombre, u.usu_apellido, u.USU_COD_AREA_TEL  ,u.USU_TELEFONO, u.USU_EMAIL,u.usu_localidad,pr.prv_nombre, tu.TIUS_DESCRIPCION  ,cu.id, cu.ESTADO)padre,sacar.cce_pago_nps nps  where 0=0  and nps.CUENTA_ID = padre.CUENTA  and (nps.estado = &#39;AUTORIZADO&#39; or nps.estado=&#39;AUTORIZADO_POR_SOLICITUD&#39;)  and trunc(nps.GENERACION) &gt;= $P{MO_reporting_filtro_fecha_desde_DATE}  group by padre.usuario_id, padre.usu_apodo, padre.usu_nombre, padre.usu_apellido  ,padre.USU_COD_AREA_TEL,padre.USU_TELEFONO, padre.USU_EMAIL,padre.usu_localidad,padre.prv_nombre  , padre.TIUS_DESCRIPCION, padre.cuenta, padre.estado, padre.facturado)padre1  where 0=0  group by padre1.usuario_id, padre1.usu_apodo, padre1.usu_nombre, padre1.usu_apellido  ,padre1.USU_COD_AREA_TEL,padre1.USU_TELEFONO, padre1.USU_EMAIL,padre1.usu_localidad,padre1.prv_nombre  , padre1.TIUS_DESCRIPCION, padre1.cuenta, padre1.estado, padre1.facturado, padre1.pagado  order by usuario_id</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Buscador - Mapeo término categoria</Data></Cell>
			<Cell><Data ss:Type="String">select t.termino, c.CATE_ID, c.path  from sacar.BSQ_TERMINO_CATEGORIA t, (select cate_id, SYS_CONNECT_BY_PATH(cate_descripcion, &#39;-&gt;&#39;) PATH  from sacar.sac_categoria  start with cate_padre_id = 1  connect by prior cate_id = cate_padre_id) c  where t.categoria_id = c.cate_id</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Buscador - Uso de los buscadores (ultimos 10 dias)</Data></Cell>
			<Cell><Data ss:Type="String">select decode(machine,&#39;bsqavz&#39;,&#39;Nuevo (SolR)&#39;,&#39;Viejo (Oracle)&#39;) buscador, count(*) cantidad, avg(lobu_fecha_fin-lobu_fecha_inicio) tiempo_rta  from sacar.sac_log_busqueda  where lobu_fecha_creacion &gt; trunc(sysdate)-10   group by decode(machine,&#39;bsqavz&#39;,&#39;Nuevo (SolR)&#39;,&#39;Viejo (Oracle)&#39;)</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Buscador - Busquedas sin resultados (ultimos 10 dias)</Data></Cell>
			<Cell><Data ss:Type="String">select lower(lobu_titulo) keyword, count(*) cantidad  from sacar.sac_log_busqueda  where lobu_ocurrencias = 0  and lobu_titulo is not null  and lobu_vendedor_id is null  and lobu_categoria_id is null  and lobu_fecha_creacion &gt; trunc(sysdate)-10  and lower(lobu_titulo) not like &#39;compra prueba&#39;   group by lower(lobu_titulo)  order by 2 desc  </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Buscador - 25 Palabras mas buscadas (ultimos 10 días)</Data></Cell>
			<Cell><Data ss:Type="String">select *  from (  select lower(lobu_titulo) keyword, count(*) cantidad  from sacar.sac_log_busqueda  where lobu_titulo is not null  and lobu_vendedor_id is null  and lobu_categoria_id is null  and lobu_fecha_creacion &gt; trunc(sysdate)-10  and lower(lobu_titulo) not like &#39;compra prueba&#39;   group by lower(lobu_titulo)  order by 2 desc  )  where rownum &lt;= 25  </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - MENSUAL GMV Listing Live</Data></Cell>
			<Cell><Data ss:Type="String">select cat.DESCRIPCION_L1, decode(u.tius_id,1,&#39;BK&#39;,2,&#39;WEB&#39;)TU,count(1) CANTIDAD, a.AV_PRODUCTO_ESTADO  from sacar.bsq_agrupador_categoria cat, sacar.sac_aviso a, sacar.sac_usuario u  where 0=0  and a.usuario_id = u.usuario_id  and a.cate_id = cat.categoria_id  and a.av_estado=3  and trunc(a.AV_FECHA_CREACION) &gt;= $P{MO_reporting_filtro_fecha_desde_DATE}  and trunc(a.AV_FECHA_CREACION) &lt;= $P{MO_reporting_filtro_fecha_hasta_DATE}  group by cat.DESCRIPCION_L1, decode(u.tius_id,1,&#39;BK&#39;,2,&#39;WEB&#39;), a.AV_PRODUCTO_ESTADO  order by cat.DESCRIPCION_L1 </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Buscador - Busquedas con pocos resultados (ultimos 10 dias)</Data></Cell>
			<Cell><Data ss:Type="String">select lower(lobu_titulo) keyword, count(*) cantidad  from sacar.sac_log_busqueda  where lobu_ocurrencias &gt; 0 and lobu_ocurrencias &lt; 10  and lobu_titulo is not null  and lobu_vendedor_id is null  and lobu_categoria_id is null  and lobu_fecha_creacion &gt; trunc(sysdate)-10  and lower(lobu_titulo) not like &#39;compra prueba&#39;   group by lower(lobu_titulo)  order by 2 desc  </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Confronte - Listado de tiendas </Data></Cell>
			<Cell><Data ss:Type="String">SELECT  biz.name,          biz.legal_name,          biz.type,          biz.country,          biz.url,          biz.email,          biz.phone,  CASE biz.status   WHEN 1 THEN &#39;APPROVED&#39;  WHEN 2 THEN &#39;TO_BE_CONSIDERED&#39;   WHEN 3 THEN &#39;OFFERED&#39;   WHEN 10 THEN &#39;BLOCKED&#39;   ELSE &#39;DESCONOCIDO&#39; END status,          (SELECT         sum(o.count)           FROM offer_click o           where o.ts_2hour &gt;           UNIX_TIMESTAMP(date_sub(FROM_UNIXTIME(UNIX_TIMESTAMP(), &#39;%Y-%m-%e %H:%i:%s&#39;), interval 3 month))           and o.biz_fk = biz.id) clicks          FROM biz;</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Confronte - Productos más visitados</Data></Cell>
			<Cell><Data ss:Type="String">SELECT   rc.country,  p.search,   rc.min_price_currency_fk,   rc.min_price_ic,  rc.max_price_currency_fk,   rc.max_price_ic,  TRUNCATE(((rc.min_price_ic+rc.max_price_ic)/2),2) promedio,  rc.total_views,  c.name          FROMproduct p      LEFT JOINregion_cache rc            ONrc.product_fk = p.id    INNER JOINcategory c    ONc.id = p.category_fk         WHERErc.min_price_lc&gt;0           AND(p.flags &amp; 3)      ORDER BYrc.total_views DESC LIMIT 0,100;</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Confronte - Marcas más buscadas</Data></Cell>
			<Cell><Data ss:Type="String">select distinct sp.country,  LCASE(sp.phrase) phrase,  sp.count            from  search_phrase sp,  (SELECT lcase(fsv.value) descripcion    FROM feature f,         feature_std_value fsv    where fsv.feature_fk = f.id     and f.name = &#39;Marca&#39;  ) marca  where lcase(sp.phrase) REGEXP concat(&#39;[[:&lt;:]]&#39;,marca.descripcion,&#39;[[:&gt;:]]&#39;)             AND  sp.category_fk = 0     AND  sp.results &gt; 0      AND  sp.count &gt; 1000   order by sp.country, sp.count desc</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Confronte - Palabras más buscadas (No marcas)</Data></Cell>
			<Cell><Data ss:Type="String">select sp.country,  LCASE(sp.phrase) phrase,      sp.count            from  search_phrase sp           where  lcase(sp.phrase) not in(  SELECT lcase(fsv.value)    FROM feature f,         feature_std_value fsv    where fsv.feature_fk = f.id     and f.name = &#39;Marca&#39;  )             AND  sp.category_fk = 0     AND  sp.results &gt; 0      AND  sp.count &gt; 1000   order by sp.country, sp.count desc</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Categorias - Listado</Data></Cell>
			<Cell><Data ss:Type="String">select categoria_id, l1, descripcion_l1, path  from sacar.BSQ_AGRUPADOR_CATEGORIA</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Procesos de interfase con PRESEA corridos ayer</Data></Cell>
			<Cell><Data ss:Type="String">select proceso, nivel, count(*) as Cantidad  from sacar.GNR_LOG  where OBJETO_TIPO = &#39;INTERFAZ_PRESEA&#39;  and trunc(generacion) = trunc(sysdate)-1  and texto not like &#39;%No hubo nuevos registros para ser procesados&#39;  group by proceso, nivel  order by Cantidad desc</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - MENSUAL GMV x Mes x Tipo Cliente - Comisiones sobre Ventas</Data></Cell>
			<Cell><Data ss:Type="String">SELECT  SUM (DECODE (ca.aviso_moneda,&#39;P&#39;, ca.aviso_precio * ca.aviso_cantidad, &#39;D&#39;, ca.aviso_precio * ca.aviso_cantidad * (DECODE (TO_CHAR (ca.generacion, &#39;mm/yyyy&#39;), to_char(sysdate-10, &#39;mm/yyyy&#39;),3.82)))) AS gmv, u.tius_id  FROM sacar.sac_usuario u, sacar.cce_cuenta cu, sacar.cce_cargo ca  WHERE 0 = 0  AND ca.cuenta_id = cu.ID  AND ca.tipo_cargo_id = 1  AND u.usuario_id = cu.usuario_id  and trunc(ca.GENERACION) &gt;= $P{MO_reporting_filtro_fecha_desde_DATE}  and trunc(ca.GENERACION) &lt;= $P{MO_reporting_filtro_fecha_hasta_DATE}  GROUP BY u.tius_id</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - MENSUAL GMV x Mes x Tipo Producto</Data></Cell>
			<Cell><Data ss:Type="String">SELECT  SUM (DECODE (ca.aviso_moneda,&#39;P&#39;, ca.aviso_precio * ca.aviso_cantidad, &#39;D&#39;, ca.aviso_precio * ca.aviso_cantidad * (DECODE (TO_CHAR (ca.generacion, &#39;mm/yyyy&#39;),to_char(sysdate-10,&#39;mm/yyyy&#39;),3.82)))) AS gmv, a.AV_PRODUCTO_ESTADO  FROM sacar.cce_cargo ca, REPORTE_SACAR_AVISO a  WHERE 0 = 0  AND ca.tipo_cargo_id = 1  AND ca.AVISO_ID=a.AV_ID  and trunc(ca.GENERACION) &gt;= $P{MO_reporting_filtro_fecha_desde_DATE}  and trunc(ca.GENERACION) &lt;= $P{MO_reporting_filtro_fecha_hasta_DATE}  GROUP BY TO_CHAR (ca.generacion, &#39;mm/yyyy&#39;), a.AV_PRODUCTO_ESTADO</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Percepciones Recibidas</Data></Cell>
			<Cell><Data ss:Type="String">select TO_CHAR(PERCEP.FECHA_PERCEPCION, &#39;dd/mm/yyyy&#39;) as FECHA_FACTURA,         MOV.SUBTIPO_COMPROBANTE as TIPO_COMPROBANTE,         MOV.numero_comprobante as NUMERO_COMPROBANTE,         USUARIO.USUARIO_ID as ID_MO,         usuario.usu_apodo as APODO,         CUENTA.TIPO_CLIENTE_CODIGO as TIPO_US,         IVA.CONDICION as TIPORESP,          &#39;21%&#39; as ALIC_IVA,         PERCEP.MONTO_PERCEPCION  as PERCEPIB,         PERCEP.PORCENTAJE  as ALIC_IIBB,         MOV.IMPORTE_MOVIMIENTO as TOTAL_COMPROBANTE  from sacar.sac_usuario usuario,       sacar.ERP_PERCEPCION percep,       sacar.ERP_MOVIMIENTO mov,       sacar.CCE_DATOS_FACTURACION fact,       sacar.CCE_CONDICION_IVA iva,       sacar.CCE_CUENTA cuenta  where USUARIO.USUARIO_ID = PERCEP.ID_USUARIO  and USUARIO.USUARIO_ID = MOV.ID_USUARIO  and MOV.numero_comprobante = PERCEP.numero_comprobante  and USUARIO.USUARIO_ID = FACT.USUARIO_ID  and FACT.CONDICION_IVA_ID = IVA.ID  and USUARIO.USUARIO_ID = CUENTA.USUARIO_ID   and trunc(PERCEP.FECHA_PERCEPCION) = to_date($P{percep_filtro_fecha}, &#39;dd/mm/yyyy&#39;)  and (0 = DECODE($P{percep_filtro_tipo_usu} ,&#39;Seleccione Tipo Usuario&#39;,0,1) OR CUENTA.TIPO_CLIENTE_CODIGO = $P{percep_filtro_tipo_usu} )     AND (0 = DECODE($P{percep_filtro_apodo} ,&#39;Ingrese Apodo&#39;,0,1) OR usuario.usu_apodo = $P{percep_filtro_apodo} )     AND (0 = DECODE($P{percep_filtro_usuario} ,&#39;Ingrese Usuario&#39;,0,1) OR usuario.usuario_id = $P{percep_filtro_usuario} )  AND (0 = DECODE($P{percep_filtro_alicIIBB} ,&#39;0&#39;,0,1) OR PERCEP.PORCENTAJE = $P{percep_filtro_alicIIBB} )  AND (0 = DECODE($P{percep_filtro_iva} ,&#39;Seleccione Condicion IVA&#39;,0,1) OR FACT.CONDICION_IVA_ID = $P{percep_filtro_iva} )</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO-Reporte mensual Usuarios</Data></Cell>
			<Cell><Data ss:Type="String">select &#39;Usuarios Reg. (Stock)&#39;  as Descripcion, count(1) as cantidad from sacar.sac_usuario u, sacar.sac_usuario_registro ur  where 0=0  and u.usuario_id=ur.usuario_id  and trunc(u.usu_fecha_ingreso) &lt;  trunc(sysdate)  union  select  &#39;Usuarios Cert. (Stock)&#39;  as Descripcion, count(1) as cantidad from sacar.sac_usuario u, sacar.sac_usuario_registro ur  where 0=0  and u.usuario_id=ur.usuario_id  and trunc(ur.usu_fecha_certificacion) &lt;  trunc(sysdate)  and ur.USU_CERTIFICADO=&#39;S&#39;  union  select &#39;Usuarios Cert. (Stock) validados (cuenta y suspension)&#39; as descripcion, count(1) as cantidad from sacar.sac_usuario u, sacar.sac_usuario_registro ur  where 0=0  and u.usuario_id=ur.usuario_id  and ur.USU_CERTIFICADO=&#39;S&#39;  and u.usu_suspendido=&#39;N&#39;  and u.usuario_id not in (select usuario_id from sacar.cta_cuenta where ESTADO = &#39;INHABILITADA&#39;)  union  select  &#39;Usuarios No Cert. (Stock)&#39; as descripcion,  (max(usuarios_registrados)-min(usuarios_registrados)) as cantidad from  (select count(1) usuarios_registrados from sacar.sac_usuario u, sacar.sac_usuario_registro ur  where 0=0  and u.usuario_id=ur.usuario_id  and trunc(u.usu_fecha_ingreso) &lt;  trunc(sysdate)  union  select count(2) Usuarios_Cert from sacar.sac_usuario u, sacar.sac_usuario_registro ur  where 0=0  and u.usuario_id=ur.usuario_id  and trunc(ur.usu_fecha_certificacion) &lt;  trunc(sysdate)  and ur.USU_CERTIFICADO=&#39;S&#39;)  union  select &#39;Usuarios No Val (Stock)&#39; as descripcion, count(1) as cantidad from sacar.sac_usuario u, sacar.sac_usuario_registro ur  where 0=0  and u.usuario_id=ur.usuario_id  and ur.ESTADO_REGISTRO_ID=1  union  SELECT &#39;Suspendidos (Stock)&#39; || r.TIPO_SUSPENSION as descripcion, count(1) as cantidad  FROM SACAR.CTA_CUENTA C, SACAR.CRM_SUSPENSION_USUARIO S, SACAR.CRM_REGLA R  WHERE C.USUARIO_ID=S.USUARIO_ID  AND S.REGLA_ID=R.ID  group by r.tipo_suspension  union  select &#39;Inhabilitados (Stock)&#39; as descripcion, count(1) as cantidad  from sacar.sac_usuario u, sacar.sac_usuario_registro ur  where 0=0  and u.usuario_id=ur.usuario_id  and trunc(u.usu_fecha_ingreso) &lt;  trunc(sysdate)  and u.usuario_id  in (select usuario_id from sacar.cta_cuenta where ESTADO = &#39;INHABILITADA&#39;)  union  select &#39;Brokers (Stock)&#39; as descripcion, count(1) as cantidad from sacar.sac_usuario u, sacar.sac_usuario_registro ur  where 0=0  and u.usuario_id=ur.usuario_id  and trunc(u.usu_fecha_ingreso) &lt;  trunc(sysdate)  and u.tius_id=1  union  select &#39;Brokers suspendidos&#39; as descripcion, count(1) as cantidad  from sacar.sac_usuario u, sacar.sac_usuario_registro ur  where 0=0  and u.usuario_id=ur.usuario_id  and u.tius_id=1  and u.usu_suspendido = &#39;S&#39;  union  select &#39;Brokers Inhabilitados&#39; as descripcion, count(1) as cantidad  from sacar.sac_usuario u, sacar.sac_usuario_registro ur , sacar.cta_cuenta c  where 0=0  and u.usuario_id=ur.usuario_id  and trunc(u.usu_fecha_ingreso) &lt;  trunc(sysdate)  and u.TIUS_ID=1  and c.usuario_id=u.usuario_id  and c.ESTADO=&#39;INHABILITADA&#39;  union  select &#39;18 a 20 años&#39; as descripcion, count(1) as cantidad  from sacar.sac_usuario u, sacar.sac_usuario_registro ur  where 0=0  and u.usuario_id=ur.usuario_id  and u.usu_suspendido=&#39;N&#39;  and u.usuario_id not in (select usuario_id from sacar.cta_cuenta where ESTADO = &#39;INHABILITADA&#39;)  and ur.USU_CERTIFICADO = &#39;S&#39;  and trunc(months_between( trunc(sysdate),trunc(usu_fecha_nac)))&gt;=(18*12)  and trunc(months_between( trunc(sysdate),trunc(usu_fecha_nac)))&lt; (21*12)  union  select &#39;21 a 30 años&#39; as descripcion, count(1) as cantidad  from sacar.sac_usuario u, sacar.sac_usuario_registro ur  where 0=0  and u.usuario_id=ur.usuario_id  and u.usu_suspendido=&#39;N&#39;  and u.usuario_id not in (select usuario_id from sacar.cta_cuenta where ESTADO = &#39;INHABILITADA&#39;)  and ur.USU_CERTIFICADO = &#39;S&#39;  and trunc(months_between( trunc(sysdate),trunc(usu_fecha_nac)))&gt;=(21*12)  and trunc(months_between( trunc(sysdate),trunc(usu_fecha_nac)))&lt; (31*12)  union  select &#39;31 a 40 años&#39; as descripcion, count(1) as cantidad  from sacar.sac_usuario u, sacar.sac_usuario_registro ur...</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Confronte - Listado contacto Peugeot</Data></Cell>
			<Cell><Data ss:Type="String">select   nombre,  apellido,  email,  telefono,  comentario,  from_unixtime(ts) creado  from contacto_peugeot</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Usuarios generados los ultimos 7 días con publicaciones</Data></Cell>
			<Cell><Data ss:Type="String">select u.usuario_id, u.usu_apodo, to_char(u.usu_fecha_ingreso,&#39;yyyy-mm-dd&#39;) fecha_ingreso, u.usu_cod_area_tel, u.usu_telefono,          ( select nvl(sum(monto),0) from sacar.cce_cargo ca, sacar.cce_cuenta cu where ca.cuenta_id = cu.id and tipo_cargo_id = 2 and cu.usuario_id = u.usuario_id ) monto_destaques_contratados,           ( select count(*) from sacar.sac_aviso a1 where a1.usuario_id = u.usuario_id ) q_avisos_publicados,           ( select count(*) from sacar.sac_aviso a1, sacar.pgs_forma_pago p1 where a1.usuario_id = u.usuario_id and a1.av_id = p1.aviso_id and p1.medio_pago_id = 1 ) q_avisos_publicados_ps -- categoria publicada  ,U.USU_SUSPENDIDO  from sacar.sac_usuario u  where trunc(usu_fecha_ingreso) &gt;= trunc(sysdate-7)  and exists (      select 1      from sacar.sac_aviso a      where a.usuario_id = u.usuario_id   )   order by 6 desc  </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Usuarios sin CUIT y su inversion en destaques</Data></Cell>
			<Cell><Data ss:Type="String">select us.usu_apodo, us.tius_id, sum(ca.monto) monto, tipo_documento.tipo, nro_documento.nro_documento  from sacar.cce_cargo ca, sacar.cce_cuenta cu, sacar.sac_usuario us,       (select td1.TIPO, df1.usuario_id from sacar.cce_datos_facturacion df1, sacar.cce_tipo_documento td1 where df1.tipo_documento_id = td1.id  ) tipo_documento,      (select df1.NRO_DOCUMENTO, df1.usuario_id from sacar.cce_datos_facturacion df1  ) nro_documento  where ca.tipo_cargo_id = 2  and ca.cuenta_id = cu.id  and ca.ESTADO = &#39;EN_LOTE&#39;  and us.USU_SUSPENDIDO = &#39;N&#39;  and cu.usuario_id = us.usuario_id  and nro_documento.USUARIO_ID (+)= us.usuario_id  and tipo_documento.USUARIO_ID (+)= us.usuario_id    and ca.generacion &gt; $P{MO_reporting_filtro_fecha_desde_DATE}  and ca.generacion &lt; $P{MO_reporting_filtro_fecha_hasta_DATE}  and not exists (  select 1  from sacar.cce_datos_facturacion df  where us.usuario_id = df.USUARIO_ID  and df.TIPO_DOCUMENTO_ID = 80  )  and us.usu_apodo not like &#39;DirectSales&#39;  group by us.usu_apodo, us.tius_id, nro_documento.nro_documento, tipo_documento.tipo  having sum(ca.monto) &gt; 100  order by 3 desc    </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Club Cupon - Usuarios</Data></Cell>
			<Cell><Data ss:Type="String">SELECT *  FROM   (SELECT id,                 date_format(created, &#39;%Y-%m-%d %H:%i:%s&#39;) as created,                 date_format(modified, &#39;%Y-%m-%d %H:%i:%s&#39;) as modified,                 CASE user_type_id WHEN 1 THEN &#39;admin&#39; WHEN 2 THEN &#39;ususario&#39; WHEN 3 THEN &#39;empresa&#39; WHEN 4 THEN &#39;agencia&#39; END                   AS user_type,                 username,                 email,                 (select r.email from users r where u.referred_by_user_id = r.id) as referring_email,                 (select p.dni from user_profiles p where p.user_id = u.id) as DNI,                 fb_user_id,                 user_login_count,                 user_view_count,                 is_agree_terms_conditions,                 is_active,                 is_email_confirmed,                 bac_user_id,                 (SELECT sum(quantity)                  FROM   deal_users                  WHERE  user_id = u.id)                  compras,                 last_login_ip,                 signup_ip          FROM   users u) t  WHERE  t.compras &gt; $P{CC_cantidad}  and t.last_login_ip like $P{CC_last_login_ip}  and t.last_login_ip like $P{CC_signup_ip}  and t.email like $P{CC_email_like}  and t.username like $P{CC_username_like}  and t.last_login_ip like $P{CC_signup_ip}  and t.id like $P{CC_user_id}  and t.bac_user_id like $P{CC_bac_user_id}  order by t.compras desc;</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Confronte - Estado oferta tiendas</Data></Cell>
			<Cell><Data ss:Type="String"> SELECT b.id &#39;id_Tienda&#39;,   b.name &#39;Tienda&#39;,   b.type &#39;Tipo Tienda&#39;,   count(1)&#39;Ofertas&#39;,   SUM(o.seen) &#39;Visibles&#39;,           SUM(o.seen &amp;&amp; o.product_fk IS NOT NULL) &#39;Con producto&#39; ,           SUM(o.seen &amp;&amp; o.product_fk IS NULL &amp;&amp; o.category_fk IS NOT NULL) &#39;Sin producto/Con Categoria&#39;,           SUM(o.seen &amp;&amp; o.product_fk IS NULL &amp;&amp; o.brand_fk IS NOT NULL)  &#39;Sin producto/Con Marca&#39;,                    SUM(o.seen &amp;&amp; o.product_fk IS NULL &amp;&amp; o.category_fk IS NULL) &#39;Sin producto/Sin Categoria&#39;,           SUM(o.seen &amp;&amp; o.product_fk IS NULL &amp;&amp; o.brand_fk IS NULL)  &#39;Sin producto/Sin Marca&#39;,           SUM(o.seen = FALSE) &#39;No visibles&#39;,           &#39;NO&#39; as &#39;Paga&#39;     FROM  offer o,     biz b     where b.id = o.biz_fk    and b.country= &#39;AR&#39;       and b.id not in(      SELECT b.id         FROM biz b      LEFT JOIN budget bg          on bg.biz_fk = b.id      WHERE  b.id != 1000 AND b.country= &#39;AR&#39;     AND b.status = 1          AND ( premium &gt; 0 or bg.left_budget &gt; 0 ) )  group by b.id, b.name  union   SELECT b.id &#39;id_Tienda&#39;,   b.name &#39;Tienda&#39;,   b.type &#39;Tipo Tienda&#39;,   count(1),   SUM(o.seen) &#39;Visibles&#39;,           SUM(o.seen &amp;&amp; o.product_fk IS NOT NULL) &#39;Con producto&#39; ,           SUM(o.seen &amp;&amp; o.product_fk IS NULL &amp;&amp; o.category_fk IS NOT NULL) &#39;Sin producto/Con Categoria&#39;,           SUM(o.seen &amp;&amp; o.product_fk IS NULL &amp;&amp; o.brand_fk IS NOT NULL)  &#39;Sin producto/Con Marca&#39;,                    SUM(o.seen &amp;&amp; o.product_fk IS NULL &amp;&amp; o.category_fk IS NULL) &#39;Sin producto/Sin Categoria&#39;,           SUM(o.seen &amp;&amp; o.product_fk IS NULL &amp;&amp; o.brand_fk IS NULL)  &#39;Sin producto/Sin Marca&#39;,           SUM(o.seen = FALSE) &#39;No visibles&#39;,  &#39;SI&#39; as &#39;Paga&#39;     FROM  offer o,     biz b     where b.id = o.biz_fk    and b.id in(      SELECT b.id         FROM biz b      LEFT JOIN budget bg          on bg.biz_fk = b.id      WHERE  b.id != 1000 AND b.country= &#39;AR&#39;     AND b.status = 1          AND ( premium &gt; 0 or bg.left_budget &gt; 0 ) )  group by b.id, b.name          </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Club Cupon - Ofertas</Data></Cell>
			<Cell><Data ss:Type="String">select * from (  select  d.id deal_id,  d.created,  d.name oferta,  u.username usuario,  c.name empresa,  c.fiscal_name razon_social,  c.fiscal_cuit cuit,  i.name localidad,  d.is_side_deal destacado_lateral,        d.start_date fecha_inicio, d.end_date fecha_finalizacion,        d.original_price precio_original, d.discounted_price precio_con_descuento,        d.discount_percentage porcentaje_a_descontar, d.discount_amount importe_a_descontar,        CASE d.risk             WHEN 1 then &#39;Bajo&#39;             WHEN 2 then &#39;Medio&#39;             WHEN 3 then &#39;Alto&#39;                    else &#39;N/A&#39;        END &#39;Riesgo&#39;,        d.min_limit minimo, d.max_limit maximo,        (select sum(quantity) from deal_users du1 where du1.deal_id = d.id )  cantidad_vendida,        (select sum(quantity)*d.discounted_price from deal_users du1 where du1.deal_id = d.id )  monto_total_de_la_compra,        (select sum(internal_amount) from deal_externals du1 where du1.deal_id = d.id and external_status = &#39;A&#39; )  monto_pagado_monedero,        d.bonus_amount costo_fijo,        d.commission_percentage porcentaje_de_comision,        CASE d.pay_by_redeemed             WHEN 0 then &#39;No&#39;             WHEN 1 then &#39;Si&#39;                    else &#39;N/A&#39;        END &#39;Pago por Redimidos&#39;,        d.comment notas_privadas,        d.downpayment_percentage &#39;Fondo de garantia&#39;,        (select sum(quantity) from deal_users du1 where du1.deal_id = d.id and paid_date is not null ) cupones_ya_facturados,        (select sum(quantity) from deal_users du1 where du1.deal_id = d.id and paid_date is null ) cupones_a_facturar,        (select count(*) from anulled_coupons ac where ac.deal_id = d.id) cupones_anulados  from deals d, users u, companies c, cities i  where d.user_id = u.id  and d.company_id = c.id  and d.city_id = i.id  and ( d.deal_status_id = $P{CC_deal_status} or $P{CC_deal_status} = 0 )  ) t;</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Confronte - Consulta estado oferta AR</Data></Cell>
			<Cell><Data ss:Type="String">select * from(   select CASE b.type  WHEN 1 THEN &#39;Confronte&#39;   WHEN 2 THEN &#39;Shop1&#39; ELSE &#39;Desconocido&#39; END &#39;Type&#39;,  count(1) &#39;Visibles&#39;,    SUM(o.category_fk IS NOT NULL) &#39;Con Categoria&#39;,    SUM(o.category_fk IS NOT NULL &amp;&amp; o.flags &amp; 0x02) &#39;Con Categoria Confirmada&#39;,    SUM(o.product_fk IS NOT NULL) &#39;Con producto&#39; ,    SUM(o.product_fk IS NULL &amp;&amp; o.category_fk IS NOT NULL &amp;&amp; o.flags &amp; 0x02) &#39;Sin producto/Con Categoria Confirmada&#39;,    SUM(o.product_fk IS NULL &amp;&amp; o.brand_fk IS NOT NULL)  &#39;Sin producto/Con Marca&#39;,             SUM(o.product_fk IS NULL &amp;&amp; o.category_fk IS NULL) &#39;Sin producto/Sin Categoria&#39;,    SUM(o.product_fk IS NULL &amp;&amp; o.brand_fk IS NULL)  &#39;Sin producto/Sin Marca&#39;,    SUM(o.product_fk IS NULL &amp;&amp; o.brand_fk IS NULL &amp;&amp; o.category_fk IS NULL)  &#39;Sin producto/Sin Marca/Sin Categoria&#39;,    SUM(o.product_fk IS NOT NULL || o.brand_fk IS NOT NULL || o.category_fk IS NOT  NULL)  &#39;Con producto o Marca o Categoria&#39;   from biz b    inner join offer o on o.biz_fk = b.id  and o.showable = 1 and o.seen = 1   left outer join category c on c.id = o.category_fk     where b.status = 1   and b.country = &#39;AR&#39;  -- and b.id = 5829   group by b.type ) consulta  </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Confronte - Consulta Clementina categoría sin confirmar por tienda</Data></Cell>
			<Cell><Data ss:Type="String">select * from(   select b.id &#39;biz_id&#39;,  b.name &#39;biz_name&#39;,  c.id &#39;category_id&#39;,  c.name &#39;category_name&#39;,  count(1) &#39;cantidad&#39;   from biz b    inner join offer o on o.biz_fk = b.id  and o.str NOT LIKE &#39;%Ofertas%borradas%&#39; and !(o.flags &amp; 0x02) and o.product_fk IS NULL and o.showable = 1 and o.seen = 1   inner join category c on c.id = o.category_fk     where b.status = 1   and b.country = &#39;AR&#39;  -- and b.type = 1  and o.category_fk is not null   group by b.id, b.name, c.id, c.name           having count(1) &gt; 5   order by 1,5 desc) consulta</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Confronte - Consulta migración descuentos</Data></Cell>
			<Cell><Data ss:Type="String">select * from(   select be.bank_fk &#39;benefit_bank_fk&#39;,  ba.name &#39;bank_name&#39;,  ba.url &#39;bank_url&#39;,  ba.is_premium &#39;bank_is_premium&#39;,  be.category_fk &#39;benefit_category_fk&#39;,  pc.desc &#39;prom_category_desc&#39;,  be.id &#39;benefit_id&#39;,  be.discount &#39;benefit_discount&#39;,  be.description &#39;benefit_description&#39;,  be.terms_and_conditions &#39;benefit_term_and_conditions&#39;,  be.is_special &#39;benefit_is_special&#39;,  be.days &#39;benefit_days&#39;,  CONCAT_WS(&#39; &#39;,IF(be.days &amp;  1,&#39;Lu&#39;,&#39;  &#39;)   ,IF(be.days &amp;  2,&#39;Ma&#39;,&#39;  &#39;)   ,IF(be.days &amp;  4,&#39;Mi&#39;,&#39;  &#39;)   ,IF(be.days &amp;  8,&#39;Ju&#39;,&#39;  &#39;)   ,IF(be.days &amp; 16,&#39;Vi&#39;,&#39;  &#39;)   ,IF(be.days &amp; 32,&#39;Sa&#39;,&#39;  &#39;)   ,IF(be.days &amp; 64,&#39;Do&#39;,&#39;  &#39;)) &#39;dias&#39;,  be.store_fk &#39;benefit_store_fk&#39;,  st.name&#39;store_name&#39;,  st.url &#39;store_url&#39;,  st.online_sale &#39;store_online_sale&#39;,  st.shipping &#39;store_shipping&#39;,  st.email &#39;store_email&#39;,  st.hours &#39;store_hours&#39;,  st.biz_fk &#39;store_biz_fk&#39;,  be.url &#39;benefit_url&#39;,  be.max_ammount &#39;benefit_max_amount&#39;,  FROM_UNIXTIME(be.start_ts) &#39;benefit_start_ts&#39;,  FROM_UNIXTIME(be.end_ts) &#39;benefit_end_ts&#39;,  be.tags &#39;benefit_tags&#39;,  be.country_fk &#39;benefit_country_fk&#39;,  co.name &#39;country_name&#39;,  be.state_fk &#39;benefit_state_fk&#39;,  bs.name &#39;branch_state_name&#39;,  be.discount_type_fk &#39;benefit_discount_type_fk&#39;,  dt.name &#39;discount_type_name&#39;,  be.discount_format_fk &#39;benefit_discount_format_fk&#39;,  df.name &#39;discount_format_name&#39;,  FROM_UNIXTIME(be.insert_ts) &#39;benefit_insert_ts&#39;,  FROM_UNIXTIME(be.update_ts) &#39;benefit_update_ts&#39;   from benefit be  left outer join prom_category pc on pc.id = be.category_fk  left outer join bank ba on ba.id = be.bank_fk  left outer join store st on st.id = be.store_fk  left outer join country co on co.id = be.country_fk  left outer join branch_state bs on bs.id = be.state_fk  left outer join discount_format df on df.id = be.discount_format_fk  left outer join discount_type dt on dt.id = be.discount_type_fk  where (UNIX_TIMESTAMP() between be.start_ts and (be.end_ts + 43200))   order by be.bank_fk, pc.desc, be.id) consulta</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Usuarios con una unica compra (solo ultimos 6 meses)</Data></Cell>
			<Cell><Data ss:Type="String">select u.usuario_id, u.usu_email, u.usu_apodo, u.usu_nombre, u.usu_apellido, to_char(u.usu_fecha_ingreso,&#39;YYYY-MM-DD&#39;) fecha_ingreso, u.usu_cod_area_tel, u.usu_telefono, u.usu_suspendido  from sacar.sac_usuario u  where 1 =       (      select count(*)      from sacar.sac_movimiento m1      where m1.usuario_id = u.usuario_id        )      and exists (      select 1      from sacar.sac_movimiento m1      where m1.usuario_id = u.usuario_id      and m1.mov_fecha_creacion &gt;= $P{MO_reporting_filtro_fecha_desde_DATE}      and m1.mov_fecha_creacion &lt;= $P{MO_reporting_filtro_fecha_hasta_DATE}      ) </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Usuarios con avisos que se inactivaron ayer</Data></Cell>
			<Cell><Data ss:Type="String">select u.usuario_id, u.usu_apodo, u.usu_email,          sacar.GET_CATEGORIA_USUARIO(u.usuario_id) categoria,          (select count(distinct ea.av_id) from sacar.sac_estado_aviso ea           where trunc(ea.esav_fecha_creacion) = $P{MO_reporting_filtro_fecha_DATE}           and ea.esav_estado &lt;&gt; 3           and ea.esav_usuario_id = u.usuario_id) cant_avisos_inactivados_total,          (select count(distinct ea.av_id) from sacar.sac_estado_aviso ea           where trunc(ea.esav_fecha_creacion) = $P{MO_reporting_filtro_fecha_DATE}           and ea.esav_estado = 4           and ea.esav_usuario_id = u.usuario_id) cant_avisos_vencidos          from sacar.sac_usuario u  where exists (      select 1       from sacar.sac_estado_aviso ea      where trunc(ea.esav_fecha_creacion) = $P{MO_reporting_filtro_fecha_DATE}      and ea.esav_usuario_id = u.usuario_id      and ea.esav_estado &lt;&gt; 3   )  and u.usu_suspendido = &#39;N&#39;  and not exists (      select *      from sacar.cce_cuenta c      where u.usuario_id = c.usuario_id      and c.estado = &#39;INHABILITADA&#39;  )   order by 5 desc</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Club Cupon - Usuarios no validados</Data></Cell>
			<Cell><Data ss:Type="String">select id, user_type_id, created, modified, username, email,         cast(concat(&#39;http://www.clubcupon.com.ar/users/activation/&#39;,id,&#39;/&#39;,md5(concat(id,&#39;-e9a5561e42c5ab47c6c81c14f06c0b8281cfc3ce&#39;))) as char) link_activacion  from users  where is_email_confirmed = 0  and fb_user_id is null;</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Confronte - Crawleo tiendas Carolina 0 lecturas</Data></Cell>
			<Cell><Data ss:Type="String">select * from(    select b.id,    b.name,   fs.10_urls_read,   fs.20_offers_read,   fs.20_offers_inserted,   fs.20_offers_updated,   IFNULL(ofertas.cantidad, 0 ) Cant_ofertas_visibles,   IFNULL(ofer_for_banner.cantidad, 0) Cant_Offer_for_banner  from biz b   left join foursome_run fs on fs.biz_fk = b.id and fs.id = (select max(fsr.id) from foursome_run fsr where fsr.biz_fk = b.id)  left outer join (select of.biz_fk, count(1) cantidad from offer of where !(of.flags &amp; 0x4000) and of.showable = 1 and of.seen = 1 GROUP BY of.biz_fk) ofertas  on ofertas.biz_fk = b.id  left outer join (select off.biz_fk, count(1) cantidad from offer off where off.flags &amp; 0x4000 and off.showable = 1 and off.seen = 1 GROUP BY off.biz_fk) ofer_for_banner  on ofer_for_banner.biz_fk = b.id   where b.type = 1   and b.status = 1   and b.country = &#39;AR&#39;   and !(b.flags &amp; 0x80)   and fs.20_offers_read &lt; 1  order by fs.20_offers_read DESC) consulta</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">LOTES_ENVIADOS_A_FACTURAR</Data></Cell>
			<Cell><Data ss:Type="String">SELECT       LOTE.ID AS LOTE,      LOTE.TIPO_LOTE AS TIPO_LOTE,          LOTE.MONTO AS MONTO_LOTE,      LOTE.ALI_DEST AS ALICUOTA_DESTAQUE,      LOTE.IMP_DEST AS IMPORTE_DESTAQUE,      LOTE.BAS_DEST AS BASE_IMPONIB_DEST,          LOTE.ALI_PIB1 AS ALICUOTA_CABA,      LOTE.IMP_PIB1 AS IMPORTE_CABA,      LOTE.BAS_PIB1 AS BASE_IMPONIB_CABA,          LOTE.ALI_PIB2 AS ALICUOTA_TUCUMAN,      LOTE.IMP_PIB2 AS IMPORTE_TUCUMAN,      LOTE.BAS_PIB2 AS BASE_IMPONIB_TUCUMAN,          LOTE.ALI_PIVA AS ALICUOTA_IVA,      LOTE.IMP_PIVA AS IMPORTE_IVA,      LOTE.BAS_PIVA AS BASE_IMPONIB_IVA,      LOTE.RESPUESTA_IVA AS RESPUESTA_IVA,      TO_CHAR(LOTE.RESPUESTA_IVA_FECHA) AS RESPUESTA_IVA_FECHA,      (LOTE.MONTO + nvl(decode(nvl(LOTE.IMP_DEST, 0), 0, LOTE.IMP_PIB1, LOTE.IMP_DEST),0) + nvl(LOTE.IMP_PIB2,0) + nvl(LOTE.IMP_PIVA,0)) AS MONTO_TOTAL_A_FACTURAR,      LOTE.ESTADO AS LOTE_ESTADO,      CUENTA.USUARIO_ID AS USUARIO,      USU.TIUS_ID AS TIPO_USUARIO,      DF.TIPO_DOCUMENTO_ID AS TIPO_DOC,      DF.NRO_DOCUMENTO AS NUM_DOC,      DF.CONDICION_IVA_ID AS COND_IVA,      USU_REG.USU_DNI AS USU_DNI,      TO_CHAR(LOTE.GENERACION) AS GENERACION,      TO_CHAR(MOV.FECHA_MOVIMIENTO) AS FECHA_MOVIMIENTO,      MOV.TIPO_MOVIMIENTO AS TIPO_MOVIMIENTO,      MOV.SUBTIPO_COMPROBANTE AS SUBTIPO_COMPROBANTE,      MOV.DETALLE_MOVIMIENTO AS DETALLE_MOVIMIENTO,      MOV.NUMERO_COMPROBANTE AS NUMERO_COMPROBANTE,      MOV.IMPORTE_MOVIMIENTO AS IMPORTE_FACTURA,          TO_CHAR(MOV.FECHA_VENCIMIENTO) AS VENCIMIENTO                FROM       SACAR.CCE_LOTE LOTE,       SACAR.ERP_MOVIMIENTO MOV,      SACAR.CCE_CUENTA CUENTA,      SACAR.CCE_DATOS_FACTURACION DF,      SACAR.SAC_USUARIO_REGISTRO USU_REG,      SACAR.SAC_USUARIO USU  WHERE  CUENTA.ID = LOTE.CUENTA_ID  AND MOV.LOTES_ID(+) = TO_CHAR(LOTE.ID)  AND LOTE.ENVIO_ESTADO = &#39;ENVIADO&#39;  AND CUENTA.ENVIO_ESTADO = &#39;RECIBIDO&#39;  AND LOTE.TIPO_LOTE IN (&#39;C&#39;,&#39;D&#39;)   AND CUENTA.USUARIO_ID = DF.USUARIO_ID(+)  AND CUENTA.USUARIO_ID = USU_REG.USUARIO_ID  AND CUENTA.USUARIO_ID = USU.USUARIO_ID  AND TRUNC(LOTE.ENVIO_FECHA) BETWEEN TRUNC($P{filtro_fecha_desde_LF}) AND TRUNC($P{filtro_fecha_hasta_LF})  </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Confronte - Consulta bind job categoría</Data></Cell>
			<Cell><Data ss:Type="String"></Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Listing de usuarios con avisos cargados por VendedorPro</Data></Cell>
			<Cell><Data ss:Type="String">select u.usuario_id, u.usu_apodo, u.usu_email, to_char(u.usu_fecha_ingreso,&#39;YYYY-MM-DD&#39;) fecha_ingreso, decode(u.tius_id,2,&#39;Web&#39;,1,&#39;Broker&#39;,&#39;SMS&#39;) segmento,      c.puntaje, c.calificaciones_positivas, c.calificaciones_negativas,       ( select count(*) from sacar.sac_aviso a where a.usuario_id = u.usuario_id ) totales,      ( select count(*) from sacar.sac_aviso a where a.usuario_id = u.usuario_id and a.av_estado = 3 ) totales_activos,      ( select count(*) from sacar.sac_aviso a where a.usuario_id = u.usuario_id and a.av_estado &lt;&gt; 3 ) totales_no_activos,      ( select count(*) from sacar.sac_aviso a where av_creado_por = &#39;WEB&#39; and av_estado = 3 and a.usuario_id = u.usuario_id ) web_activos,      ( select count(*) from sacar.sac_aviso a where av_creado_por = &#39;WEB&#39; and av_estado &lt;&gt; 3 and a.usuario_id = u.usuario_id ) no_activos,           ( select count(*) from sacar.sac_aviso a where av_creado_por = &#39;CARGADOR&#39; and a.usuario_id = u.usuario_id ) cargador,      ( select count(*) from sacar.sac_aviso a where av_creado_por = &#39;CARGADOR&#39; and av_estado = 3 and a.usuario_id = u.usuario_id ) cargador_activos,      ( select count(*) from sacar.sac_aviso a where av_creado_por = &#39;CARGADOR&#39; and av_estado = 4 and a.usuario_id = u.usuario_id ) cargador_vencidos,      ( select count(*) from sacar.sac_aviso a where av_creado_por = &#39;CARGADOR&#39; and av_estado = 5 and a.usuario_id = u.usuario_id ) cargador_cerrados,      ( select count(*) from sacar.sac_aviso a where av_creado_por = &#39;CARGADOR&#39; and av_estado = 6 and a.usuario_id = u.usuario_id ) cargador_borrados,      ( select count(*) from sacar.sac_aviso a where av_creado_por = &#39;CARGADOR&#39; and av_estado = 7 and a.usuario_id = u.usuario_id ) cargador_rechazados,      ( select count(*) from sacar.sac_aviso a where av_creado_por = &#39;CARGADOR&#39; and av_estado = 8 and a.usuario_id = u.usuario_id ) cargador_archivado,      ( select count(*) from sacar.sac_aviso a where av_creado_por = &#39;CARGADOR&#39; and av_estado = 9 and a.usuario_id = u.usuario_id ) cargador_inactivo,      ( select count(*) from sacar.sac_aviso a where av_creado_por = &#39;CARGADOR&#39; and av_estado = 10 and a.usuario_id = u.usuario_id ) cargador_cuenta_inhabilitada,      ( select count(*) from sacar.sac_aviso a where av_creado_por = &#39;CARGADOR&#39; and av_estado = 11 and a.usuario_id = u.usuario_id ) cargador_a_archivar,      ( select count(*) from sacar.sac_aviso a where av_creado_por = &#39;CARGADOR&#39; and av_estado = 12 and a.usuario_id = u.usuario_id ) cargador_pausados,      ( select count(*) from sacar.sac_aviso a where av_creado_por = &#39;CARGADOR&#39; and av_estado = 12 and a.usuario_id = u.usuario_id ) cargador_borrado_logico,      ( select count(*) from sacar.sac_aviso a where av_creado_por = &#39;CARGADOR&#39; and av_estado = 12 and a.usuario_id = u.usuario_id ) cargador_baja_por_suspension,      (      select count(*) from sacar.cce_cargo ca, sacar.cce_cuenta cu       where ca.cuenta_id = cu.id and cu.usuario_id = u.usuario_id       and ca.tipo_cargo_id = 1 and to_char(ca.generacion,&#39;mm-yyyy&#39;) = to_char(sysdate-30,&#39;mm-yyyy&#39;)       ) ventas_mes1,      (      select count(*) from sacar.cce_cargo ca, sacar.cce_cuenta cu       where ca.cuenta_id = cu.id and cu.usuario_id = u.usuario_id       and ca.tipo_cargo_id = 1 and to_char(ca.generacion,&#39;mm-yyyy&#39;) = to_char(sysdate-60,&#39;mm-yyyy&#39;)       ) ventas_mes2,      (      select count(*) from sacar.cce_cargo ca, sacar.cce_cuenta cu       where ca.cuenta_id = cu.id and cu.usuario_id = u.usuario_id       and ca.tipo_cargo_id = 1 and to_char(ca.generacion,&#39;mm-yyyy&#39;) = to_char(sysdate-90,&#39;mm-yyyy&#39;)       ) ventas_mes3,      (      select sum(monto) from sacar.cce_cargo ca, sacar.cce_cuenta cu       where ca.cuenta_id = cu.id and cu.usuario_id = u.usuario_id        and ca.tipo_cargo_id in (2,7) and to_char(ca.generacion,&#39;mm-yyyy&#39;) = to_char(sysdate-30,&#39;mm-yyyy&#39;)       ) inversion_mes1,      (      select sum(monto) from sacar.cce_cargo ca, sacar.cce_cuenta cu       where ca.cuenta_id = cu.id and cu.usuario_id = u.usuario_id   ...</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Usuarios con avisos que se inactivaron ayer (BETA)</Data></Cell>
			<Cell><Data ss:Type="String">select u.usuario_id, u.usu_apodo, u.usu_email, c.descripcion_l1, sum(b.cant_avisos_cerrados) cant_avisos_cerrados, sum(b.cant_avisos_vencidos) cant_avisos_vencidos,  sum(b.cantidad_total) cantidad_total     from   (  select saca_1.usuario_id, saca_1.cate_id,  (select count(*) from sacar.sac_aviso where usuario_id = saca_1.usuario_id and av_estado = 5 and cate_id = saca_1.cate_id and av_estado not in (3)  and trunc(av_fecha_expiracion) &gt;= $P{MO_reporting_filtro_fecha_desde_DATE}  and trunc(av_fecha_expiracion) &lt;= $P{MO_reporting_filtro_fecha_hasta_DATE}  ) cant_avisos_cerrados,  (select count(*) from sacar.sac_aviso where usuario_id = saca_1.usuario_id and av_estado = 4 and cate_id = saca_1.cate_id and av_estado not in (3)  and trunc(av_fecha_expiracion) &gt;= $P{MO_reporting_filtro_fecha_desde_DATE}  and trunc(av_fecha_expiracion) &lt;= $P{MO_reporting_filtro_fecha_hasta_DATE}  ) cant_avisos_vencidos,  count(*) cantidad_total   from sacar.sac_aviso saca_1  where saca_1.av_estado not in (3)  and trunc(saca_1.av_fecha_expiracion) &gt;= $P{MO_reporting_filtro_fecha_desde_DATE}  and trunc(saca_1.av_fecha_expiracion) &lt;= $P{MO_reporting_filtro_fecha_hasta_DATE}  group by saca_1.usuario_id, saca_1.cate_id  ) b, sacar.bsq_agrupador_categoria c, sacar.sac_usuario u  where b.usuario_id = u.usuario_id  and b.cate_id = c.categoria_id  and u.usu_suspendido = &#39;N&#39;  group by u.usuario_id, u.usu_apodo, u.usu_email, c.descripcion_l1  order by cantidad_total desc, usu_apodo </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Confronte - Alertas Carolina Foursome</Data></Cell>
			<Cell><Data ss:Type="String"> select distinct   f.html html,  from_unixtime(f.ts) fecha   from feed f  where f.html like &#39;Carolina%&#39;  and FROM_UNIXTIME(f.ts) &gt; TIMESTAMPADD(MONTH,-1,NOW())   order by f.ts desc</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">FACTURACION_LOTES_EXCLUIDOS</Data></Cell>
			<Cell><Data ss:Type="String">(  SELECT      LOTE.ID AS LOTE,      LOTE.TIPO_LOTE AS TIPO_LOTE,      &#39;NO_DF&#39; AS TIPO_EXCLUSION,      LOTE.MONTO AS MONTO,      CUENTA.USUARIO_ID AS USUARIO,      TO_CHAR(LOTE.GENERACION) AS GENERACION,      NULL AS TIPO_SUSPENSION       FROM       SACAR.CCE_LOTE LOTE,      SACAR.CCE_CUENTA CUENTA,      SACAR.CCE_DATOS_FACTURACION DF,      SACAR.SAC_USUARIO_REGISTRO USU_REG  WHERE        LOTE.CUENTA_ID = CUENTA.ID       AND CUENTA.USUARIO_ID = DF.USUARIO_ID(+)      AND CUENTA.USUARIO_ID = USU_REG.USUARIO_ID      AND LOTE.ESTADO IN (&#39;CERRADO&#39;,&#39;EXCLUIDO&#39;)      AND LOTE.ENVIO_ESTADO = &#39;NO_ENVIADO&#39;      AND LOTE.TIPO_LOTE IN (&#39;C&#39;,&#39;D&#39;)       AND (MONTO / 1.21 &gt; 1000 AND DF.USUARIO_ID IS NULL AND USU_REG.USU_DNI IS NULL)  )  UNION  (  SELECT      LOTE.ID AS LOTE,      LOTE.TIPO_LOTE AS TIPO_LOTE,      &#39;SUSPENSION&#39; AS TIPO_EXCLUSION,      LOTE.MONTO AS MONTO,      CUENTA.USUARIO_ID AS USUARIO,      TO_CHAR(LOTE.GENERACION) AS GENERACION,      SUSP.TIPO_SUSPENSION AS TIPO_SUSPENSION      FROM       SACAR.CCE_LOTE LOTE      INNER JOIN SACAR.CCE_CUENTA CUENTA ON LOTE.CUENTA_ID = CUENTA.ID           INNER JOIN SACAR.CRM_SUSPENSION_USUARIO SUSP ON CUENTA.USUARIO_ID = SUSP.USUARIO_ID  WHERE       LOTE.ESTADO IN (&#39;CERRADO&#39;,&#39;EXCLUIDO&#39;)            AND LOTE.ENVIO_ESTADO = &#39;NO_ENVIADO&#39;      AND LOTE.TIPO_LOTE IN (&#39;C&#39;,&#39;D&#39;)       AND SUSP.ACTIVA = &#39;Y&#39; AND (SUSP.TIPO_SUSPENSION = &#39;GRAVE&#39; OR SUSP.TIPO_SUSPENSION = &#39;MODERADA&#39;)  )  UNION  (  SELECT       LOTE.ID AS LOTE,      LOTE.TIPO_LOTE AS TIPO_LOTE,      &#39;EXCLUIDO&#39; AS TIPO_EXCLUSION,      LOTE.MONTO AS MONTO,      CUENTA.USUARIO_ID AS USUARIO,      TO_CHAR(LOTE.GENERACION) AS GENERACION,      NULL AS TIPO_SUSPENSION      FROM       SACAR.CCE_LOTE LOTE,      SACAR.CCE_CUENTA CUENTA   WHERE       LOTE.CUENTA_ID = CUENTA.ID      AND LOTE.ESTADO = &#39;EXCLUIDO&#39;  )  union  (  SELECT      LOTE.ID AS LOTE,      LOTE.TIPO_LOTE AS TIPO_LOTE,      &#39;NO_CUENTA_PRESEA&#39; AS TIPO_EXCLUSION,      LOTE.MONTO AS MONTO,      CUENTA.USUARIO_ID AS USUARIO,      TO_CHAR(LOTE.GENERACION) AS GENERACION,      NULL AS TIPO_SUSPENSION       FROM       SACAR.CCE_LOTE LOTE,      SACAR.CCE_CUENTA CUENTA  WHERE        LOTE.CUENTA_ID = CUENTA.ID       AND LOTE.ESTADO IN (&#39;PERCEPCION&#39;, &#39;CERRADO&#39;)      AND LOTE.ENVIO_ESTADO = &#39;NO_ENVIADO&#39;      AND LOTE.TIPO_LOTE IN (&#39;C&#39;,&#39;D&#39;)   AND CUENTA.ENVIO_ESTADO = &#39;NO_ENVIADO&#39;  )</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Confronte - Crawleo tiendas Carolina más de 1 lectura</Data></Cell>
			<Cell><Data ss:Type="String">select * from(  select  b.id,          b.name,  if(b.flags &amp; 0x80,&#39;No foursome&#39;,&#39;&#39;) foursome,          fs.10_urls_read,          fs.20_offers_read,          fs.20_offers_inserted,          fs.20_offers_updated  from biz b  left outer join foursome_run fs on fs.biz_fk = b.id and fs.id = (select max(fsr.id) from foursome_run fsr where fsr.biz_fk = b.id)  where b.type = 1  and b.status = 1  and b.country = &#39;AR&#39;  and !(b.flags &amp; 0x80)  order by 1)consulta</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Log Publicación</Data></Cell>
			<Cell><Data ss:Type="String">select LP.ID_PUBLICACION, LP.ACCION, LP.TIPO_PUBLICACION, LP.DURACION_MS, LP.ID_USUARIO, LP.TRANSACCION_OK, to_char(LP.FECHA, &#39;DD/MM/YYYY&#39;) AS FECHA, LP.INFO_ADICIONAL from sacar.log_publicacion lp  where id_publicacion is not null  and trunc(fecha) between trunc(sysdate - 7) and trunc(sysdate) </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Club Cupon - Suscripciones por origen a xx fecha (a día cerrado)</Data></Cell>
			<Cell><Data ss:Type="String">select DATE_FORMAT($P{CC_fecha}, &#39;%Y-%m-%d&#39;) fecha, concat ( name, &#39; - &#39;, date(created) ) origen,  ( select count(*) from subscriptions s where created &lt; DATE($P{CC_fecha})           and ((city_id = $P{CC_City}) or ($P{CC_City} = -1) or ( ($P{CC_City} = -2) and 2&lt;= (select count(distinct city_id) from subscriptions s2 where s.email = s2.email)))           and ( is_subscribed = 1 or  ( is_subscribed = 0 and modified &gt; DATE($P{CC_fecha}))  )           and exists ( select 1 from subscription_origin so1 where so1.import_instance_id = sii.id and so1.subscription_id = s.id ) ) base_activa,  ( select count(*) from subscriptions s where date(created) &lt;= DATE($P{CC_fecha})           and ((city_id = $P{CC_City}) or ($P{CC_City} = -1) or ( ($P{CC_City} = -2) and 2&lt;= (select count(distinct city_id) from subscriptions s2 where s.email = s2.email)))          and exists ( select 1 from subscription_origin so1 where so1.import_instance_id = sii.id and so1.subscription_id = s.id ) ) altas_acumuladas,        ( SELECT count(*) FROM subscriptions s2 where is_subscribed = 0 and DATE(modified) &lt;= DATE($P{CC_fecha})          and ((city_id = $P{CC_City}) or ($P{CC_City} = -1) or ( ($P{CC_City} = -2) and 2&lt;= (select count(distinct city_id) from subscriptions s3 where s3.email = s2.email)))          and exists ( select 1 from subscription_origin so1 where so1.import_instance_id = sii.id and so1.subscription_id = s2.id ) ) bajas_acumuladas,        ( select count(*) from subscriptions s where date(created) &lt;= DATE($P{CC_fecha}) and user_id is not null          and ((city_id = $P{CC_City}) or ($P{CC_City} = -1) or ( ($P{CC_City} = -2) and 2&lt;= (select count(distinct city_id) from subscriptions s2 where s.email = s2.email)))          and exists ( select 1 from subscription_origin so1 where so1.import_instance_id = sii.id and so1.subscription_id = s.id ) ) registros,        ( select count(*) from subscriptions s where date(created) &lt;= DATE($P{CC_fecha}) and user_id is not null          and ((city_id = $P{CC_City}) or ($P{CC_City} = -1) or ( ($P{CC_City} = -2) and 2&lt;= (select count(distinct city_id) from subscriptions s2 where s.email = s2.email)))          and exists ( select 1 from subscription_origin so1 where so1.import_instance_id = sii.id and so1.subscription_id = s.id )          and exists ( select 1 from deal_users du where s.user_id = du.user_id)) con_compras  from subscription_import_instances sii  union  SELECT DATE_FORMAT(date(now()), &#39;%Y-%m-%d&#39;), &#39;Voluntaria&#39; origen,        ( select count(*) from subscriptions s where created &lt; DATE($P{CC_fecha})           and ((city_id = $P{CC_City}) or ($P{CC_City} = -1) or ( ($P{CC_City} = -2) and 2&lt;= (select count(distinct city_id) from subscriptions s2 where s.email = s2.email)))           and ( is_subscribed = 1 or  ( is_subscribed = 0 and modified &gt; DATE($P{CC_fecha}) ) )           and not exists ( select 1 from subscription_origin so1 where so1.subscription_id = s.id ) ) base_activa,        count(*) altas_acumuladas,        ( SELECT count(*) FROM subscriptions s2 where is_subscribed = 0 and DATE(s2.modified) &lt;= DATE($P{CC_fecha})          and ((city_id = $P{CC_City}) or ($P{CC_City} = -1) or ( ($P{CC_City} = -2) and 2&lt;= (select count(distinct city_id) from subscriptions s3 where s3.email = s2.email)))          and not exists ( select 1 from subscription_origin so1 where so1.subscription_id = s2.id ) ) bajas_acumuladas,        (select count(*) from subscriptions s3          where not exists (select 1 from subscription_origin so where so.subscription_id = s3.id )          and date(s.created) &lt;= date($P{CC_fecha})          and ((city_id = $P{CC_City}) or ($P{CC_City} = -1) or ( ($P{CC_City} = -2) and 2&lt;= (select count(distinct city_id) from subscriptions s2 where s3.email = s2.email)))          and user_id is not null) registros,        (select count(*) from subscriptions s3          where not exists (select 1 from subscription_origin so where so.subscription_id = s3.id )          and date(s.created) &lt;= date...</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Confronte - Confronte Offer for banner</Data></Cell>
			<Cell><Data ss:Type="String">select * from(   select b.id biz_id,  b.name biz_name,  o.id offer_id,  o.str offer_str,  o.flags offer_flags,  if(o.flags &amp; 0x4000, &#39;S&#39;, &#39;N&#39;) offer_for_banner,  if(o.flags &amp; 0x02, &#39;S&#39;, &#39;N&#39;) offer_category_ok,  o.currency_fk offer_currency,  o.price_ic offer_price,  o.brand_fk offer_brand_fk,  o.url offer_url,  o.img_url offer_img_url,  o.from_url offer_from_url,  FROM_UNIXTIME(o.insert_ts) offer_insert_ts,  FROM_UNIXTIME(o.last_mod_ts) offer_last_mod_ts,  FROM_UNIXTIME(o.last_seen_ts) offer_last_seen_ts,  FROM_UNIXTIME(o.associate_ts) offer_associate_ts,  o.weekly_clicks offer_weekly_clicks   from offer o   inner join biz b on b.id = o.biz_fk     where o.showable = 1    and o.seen = 1  and b.type = 1  and b.status = 1  and b.country = &#39;AR&#39;  and (o.flags &amp; 0x4000)  )consulta</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Estadistica - Destaques por hora</Data></Cell>
			<Cell><Data ss:Type="String">select * from (  select to_char(horas.hora,&#39;00&#39;) hora,           (select count(*) from sacar.cce_cargo where tipo_cargo_id in (2,7) and trunc(generacion) = trunc($P{MO_reporting_filtro_fecha_DATE}) and to_char(generacion,&#39;hh24&#39;) = horas.hora) destaques  from   (  select 0 hora from dual  union  select 1 hora from dual  union  select 2 from dual  union  select 3 from dual  union  select 4 from dual  union  select 5 from dual  union  select 6 from dual  union  select 7 from dual  union  select 8 from dual  union  select 9 from dual  union  select 10 from dual  union  select 11 from dual  union  select 12 from dual  union  select 13 from dual  union  select 14 from dual  union  select 15 from dual  union  select 16 from dual  union  select 17 from dual  union  select 18 from dual  union  select 19 from dual  union  select 20 from dual  union  select 21 from dual  union  select 22 from dual  union  select 23 from dual  ) horas  where (to_char(sysdate,&#39;hh24&#39;) &gt;= horas.hora or trunc($P{MO_reporting_filtro_fecha_DATE}) &lt;&gt; trunc(sysdate))  union  select &#39;TOTAL&#39;,          (select count(*) from sacar.cce_cargo where tipo_cargo_id in (2,7) and trunc(generacion) = trunc($P{MO_reporting_filtro_fecha_DATE})) destaques  from dual  )  order by 1</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Confronte - Crawler últimas corridas</Data></Cell>
			<Cell><Data ss:Type="String">  select b.id,    b.name,   fs.10_urls_read,   fs.20_offers_read,   fs.20_offers_inserted,   fs.20_offers_updated,   fs.30_offers_published  from biz b   left join foursome_run fs  on fs.biz_fk = b.id  and fs.id = (select max(fsr.id) from foursome_run fsr where fsr.biz_fk = b.id)   where b.type = 1   and b.status = 1   and b.country = &#39;AR&#39;  order by fs.20_offers_read DESC</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Confronte - Descuentos cantidad por store</Data></Cell>
			<Cell><Data ss:Type="String">select * from(  select st.id &#39;store_id&#39;,  ifnull(st.name, &#39;Sin Store asignado&#39;)&#39;store_name&#39;,  count(*) &#39;cantidad&#39;  from benefit be  left outer join prom_category pc on pc.id = be.category_fk  left outer join bank ba on ba.id = be.bank_fk  left outer join store st on st.id = be.store_fk  left outer join country co on co.id = be.country_fk  left outer join branch_state bs on bs.id = be.state_fk  left outer join discount_format df on df.id = be.discount_format_fk  left outer join discount_type dt on dt.id = be.discount_type_fk  where 1 = 1  and (UNIX_TIMESTAMP() between be.start_ts and (be.end_ts + 43200))  -- and st.id = 2870  -- and pc.id = 11  -- and be.terms_and_conditions like &#39;%neumen%&#39;  -- and ba.id = 2  -- and be.id = 7917  group by st.id  order by 3 desc, st.id) consulta</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Estadistica - Comisiones por hora</Data></Cell>
			<Cell><Data ss:Type="String">select * from  (  select to_char(horas.hora,&#39;00&#39;) hora,           (select count(*) from sacar.cce_cargo where tipo_cargo_id = 1 and trunc(generacion) = trunc($P{MO_reporting_filtro_fecha_DATE}) and to_char(generacion,&#39;hh24&#39;) = horas.hora) comisiones  from   (  select 0 hora from dual  union  select 1 hora from dual  union  select 2 from dual  union  select 3 from dual  union  select 4 from dual  union  select 5 from dual  union  select 6 from dual  union  select 7 from dual  union  select 8 from dual  union  select 9 from dual  union  select 10 from dual  union  select 11 from dual  union  select 12 from dual  union  select 13 from dual  union  select 14 from dual  union  select 15 from dual  union  select 16 from dual  union  select 17 from dual  union  select 18 from dual  union  select 19 from dual  union  select 20 from dual  union  select 21 from dual  union  select 22 from dual  union  select 23 from dual  ) horas  where (to_char(sysdate,&#39;hh24&#39;) &gt;= horas.hora or trunc($P{MO_reporting_filtro_fecha_DATE}) &lt;&gt; trunc(sysdate))  union  select &#39;TOTAL&#39;,          (select count(*) from sacar.cce_cargo where tipo_cargo_id = 1 and trunc(generacion) = trunc($P{MO_reporting_filtro_fecha_DATE})) comisiones  from dual  )  order by 1 </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Estadistica - Publicaciones por hora</Data></Cell>
			<Cell><Data ss:Type="String">select * from (  select to_char(horas.hora,&#39;00&#39;) hora,           (select count(*) from sacar.sac_aviso where av_creado_por = &#39;WEB&#39; and trunc(av_fecha_creacion) = trunc($P{MO_reporting_filtro_fecha_DATE}) and to_char(av_fecha_creacion,&#39;hh24&#39;) = horas.hora) publicaciones   from   (  select 0 hora from dual  union  select 1 hora from dual  union  select 2 from dual  union  select 3 from dual  union  select 4 from dual  union  select 5 from dual  union  select 6 from dual  union  select 7 from dual  union  select 8 from dual  union  select 9 from dual  union  select 10 from dual  union  select 11 from dual  union  select 12 from dual  union  select 13 from dual  union  select 14 from dual  union  select 15 from dual  union  select 16 from dual  union  select 17 from dual  union  select 18 from dual  union  select 19 from dual  union  select 20 from dual  union  select 21 from dual  union  select 22 from dual  union  select 23 from dual  ) horas  where (to_char(sysdate,&#39;hh24&#39;) &gt;= horas.hora or trunc($P{MO_reporting_filtro_fecha_DATE}) &lt;&gt; trunc(sysdate))  union  select &#39;TOTAL&#39;,          (select count(*) from sacar.sac_aviso where av_creado_por = &#39;WEB&#39; and trunc(av_fecha_creacion) = trunc($P{MO_reporting_filtro_fecha_DATE})) publicaciones   from dual  )  order by 1</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Usuarios que nunca compraron (filtrados por fechas de registro)</Data></Cell>
			<Cell><Data ss:Type="String">select u.usuario_id, u.usu_email, u.usu_apodo, u.usu_nombre, u.usu_apellido, to_char(u.usu_fecha_ingreso,&#39;YYYY-MM-DD&#39;) fecha_ingreso, u.usu_cod_area_tel, u.usu_telefono, u.usu_suspendido  from sacar.sac_usuario u  where usu_fecha_ingreso &gt;= $P{MO_reporting_filtro_ingreso_desde_DATE}  and usu_fecha_ingreso &lt;= $P{MO_reporting_filtro_ingreso_hasta_DATE}  and not exists (      select 1      from sacar.sac_movimiento m1      where m1.usuario_id = u.usuario_id   )  and not exists (      select 1      from sacar_h.sac_movimiento_h m2      where m2.usuario_id = u.usuario_id      )</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Confronte - Consulta estado oferta por categoría</Data></Cell>
			<Cell><Data ss:Type="String">select * from(   select c.id &#39;category_id&#39;,  ifnull(c.name,&#39;Categoría nula&#39;) &#39;category_name&#39;,  count(1) &#39;Visibles&#39;,    SUM(o.category_fk IS NOT NULL) &#39;Con Categoria&#39;,    SUM(o.category_fk IS NOT NULL &amp;&amp; o.flags &amp; 0x02) &#39;Con Categoria Confirmada&#39;,    SUM(o.category_fk IS NOT NULL) - SUM(o.category_fk IS NOT NULL &amp;&amp; o.flags &amp; 0x02) &#39;Con Categoria a Confirmar&#39;,    SUM(o.product_fk IS NOT NULL) &#39;Con producto&#39; ,    SUM(o.product_fk IS NULL &amp;&amp; o.category_fk IS NOT NULL &amp;&amp; o.flags &amp; 0x02) &#39;Sin producto/Con Categoria Confirmada&#39;,    SUM(o.product_fk IS NULL &amp;&amp; o.brand_fk IS NOT NULL)  &#39;Sin producto/Con Marca&#39;,             SUM(o.product_fk IS NULL &amp;&amp; o.category_fk IS NULL) &#39;Sin producto/Sin Categoria&#39;,    SUM(o.product_fk IS NULL &amp;&amp; o.brand_fk IS NULL)  &#39;Sin producto/Sin Marca&#39;,    SUM(o.product_fk IS NOT NULL || o.brand_fk IS NOT NULL || o.category_fk IS NOT  NULL)  &#39;Con producto o Marca o Categoria&#39;   from biz as b    inner join offer as  o on o.biz_fk = b.id  and o.str NOT LIKE &#39;%Ofertas%borradas%&#39; and o.showable = 1 and o.seen = 1    left outer join category as c on c.id = o.category_fk     where b.status = 1   and b.country = &#39;AR&#39;  and b.type = 1   group by c.id, c.name   order by 3 desc) consulta</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">ZZ_MO_Oper_PS500_16hs_reducido</Data></Cell>
			<Cell><Data ss:Type="String">select cargo.id cargo, cargo.monto, to_char(cargo.generacion,&#39;dd/mm/yyyy hh24:mi:ss&#39;) generacion, cargo.aviso_id,           cargo.transaccion_id, cargo.aviso_precio, cargo.aviso_cantidad, comprador.usuario_id comprador, comprador.usu_apodo apodo_comprador, comprador.usu_email mail_comprador,          vendedor.usuario_id vendedor, vendedor.usu_apodo apodo_vendedor, vendedor.usu_email mail_vendedor,          DECODE (vendedor.tius_id, 1, &#39;BK&#39;, 2, &#39;WEB&#39;) tuv  from sacar.pgs_operacion operacion, sacar.cce_cargo cargo,       sacar.sac_usuario comprador, sacar.sac_usuario vendedor  where operacion.cargo_id = cargo.id  and operacion.vendedor_id = vendedor.usuario_id  and operacion.comprador_id = comprador.usuario_id  AND cargo.aviso_precio_pesos &gt;= 500  and operacion.generacion &gt;  TO_DATE (to_char(sysdate,&#39;DD/MM/RRRR&#39;)||&#39; 08:00&#39;,&#39;DD/MM/RRRR hh24:mi&#39;)  and operacion.generacion &lt;=  TO_DATE (to_char(sysdate,&#39;DD/MM/RRRR&#39;)||&#39; 16:00&#39;,&#39;DD/MM/RRRR hh24:mi&#39;)</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Confronte/Shop1 - Crawleo tiendas Carolina 0 lecturas</Data></Cell>
			<Cell><Data ss:Type="String">select * from(   select CASE b.type  WHEN 1 THEN &#39;Confronte&#39;   WHEN 2 THEN &#39;Shop1&#39; ELSE &#39;Desconocido&#39; END &#39;Type&#39;,   b.id,    b.name,   fs.10_urls_read,   fs.20_offers_read,   fs.20_offers_inserted,   fs.20_offers_updated,   IFNULL(ofertas.cantidad, 0 ) Cant_ofertas_visibles,   IFNULL(ofer_for_banner.cantidad, 0) Cant_Offer_for_banner  from biz b   left join foursome_run fs on fs.biz_fk = b.id and fs.id = (select max(fsr.id) from foursome_run fsr where fsr.biz_fk = b.id)  left outer join (select of.biz_fk, count(1) cantidad from offer of where !(of.flags &amp; 0x4000) and of.showable = 1 and of.seen = 1 GROUP BY of.biz_fk) ofertas  on ofertas.biz_fk = b.id  left outer join (select off.biz_fk, count(1) cantidad from offer off where off.flags &amp; 0x4000 and off.showable = 1 and off.seen = 1 GROUP BY off.biz_fk) ofer_for_banner  on ofer_for_banner.biz_fk = b.id   where b.status = 1   and b.country = &#39;AR&#39;   and !(b.flags &amp; 0x80)   and fs.20_offers_read &lt; 1  order by 1,fs.20_offers_read DESC) consulta</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Confronte - Árbol de Categorías</Data></Cell>
			<Cell><Data ss:Type="String">select * from(   SELECT t1.id AS idlev1,  t1.name AS lev1,  t1.flags flev1,  t2.id AS idlev2,  t2.name as lev2,  t2.flags flev2,  t3.id AS idlev3,  t3.name as lev3,  t3.flags as flev3,  (t3.flags &amp; 2 ) &#39;contenedora&#39;,  (t3.flags &amp; 4 ) &#39;abstracta&#39;,  t4.id AS idlev4,  t4.name as lev4,  t4.flags as flev4,  t5.id AS idlev5,  t5.name as lev5,  t5.flags as flev5,  t6.id AS idlev6,  t6.name as lev6,  t6.flags as flev6   FROM category AS t1      LEFT outer JOIN category AS t2 ON t2.pcategory_id = t1.id AND !(t2.flags &amp; (1|8))      LEFT outer JOIN category AS t3 ON t3.pcategory_id = t2.id AND !(t3.flags &amp; (1|8))      LEFT outer JOIN category AS t4 ON t4.pcategory_id = t3.id AND !(t4.flags &amp; (1|8))      LEFT outer JOIN category AS t5 ON t5.pcategory_id = t4.id AND !(t5.flags &amp; (1|8))      LEFT outer JOIN category AS t6 ON t6.pcategory_id = t5.id AND !(t6.flags &amp; (1|8))          where t1.id in( 0, 4500)  AND !(t1.flags &amp; (1|8))            and t2.id not in(0, 4500)  )consulta</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Club Cupon - Pagos por fecha de deal</Data></Cell>
			<Cell><Data ss:Type="String">select * from (  SELECT          date_format(e.start_date,&#39;%Y-%m-%d&#39;) &#39;Fecha promocion&#39;,          c.name &#39;Nombre fantasia&#39;,          c.fiscal_name &#39;Razon social&#39;,          c.fiscal_cuit &#39;CUIT&#39;,          t.name &#39;Localidad&#39;,          t.name &#39;Nombre promocion&#39;,          e.original_price &#39;Precio original&#39;,          e.discount_percentage &#39;Descuento %&#39;,          CASE e.pay_by_redeemed               WHEN 0 then &#39;No&#39;               WHEN 1 then &#39;Si&#39;                      else &#39;N/A&#39;          END &#39;Pago por Redimidos&#39;,          e.discounted_price &#39;Precio oferta&#39;,          (select IFNULL (sum(quantity),0) from deal_users where deal_id = e.id ) &#39;Cantidad vendida&#39;,          e.commission_percentage &#39;Comision %&#39;,          e.comment &#39;Nota privada&#39;,          date_format(e.coupon_expiry_date,&#39;%Y-%m-%d&#39;) &#39;Vencimiento cupon&#39;,          CAST(d.id AS CHAR) deal_external_id,          CAST(u.id AS CHAR) user_id,          u.email user_email,          u.username,          CASE u.user_type_id WHEN 1 THEN &#39;admin&#39; WHEN 2 THEN &#39;web&#39; WHEN 3 then &#39;company&#39; WHEN 4 then &#39;agency&#39; END user_type_id,          CAST(u.fb_user_id AS CHAR) fb_user_id,          CAST(u.bac_user_id AS CHAR) bac_user_id,          CAST(d.payment_type_id AS CHAR) payment_type_id1,          d.quantity,          e.discounted_price * d.quantity - d.internal_amount monto,          CASE d.external_status WHEN &#39;C&#39; then &#39;Cancelado&#39; WHEN &#39;A&#39; then &#39;Acreditado&#39; WHEN &#39;P&#39; then &#39;Pendiente&#39; END external_status,          d.created,          d.updated,          d.is_gift  FROM deal_externals d, users u, deals e, cities t, companies c  where e.city_id = t.id  and d.user_id = u.id  and d.deal_id = e.id  and e.company_id = c.id  and date(e.start_date) &gt;= date($P{CC_fecha_desde})  and date(e.start_date) &lt;= date($P{CC_fecha_hasta})  ) t  ;  </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Confronte/Shop1 - Offer for banner</Data></Cell>
			<Cell><Data ss:Type="String">select * from(   select b.id biz_id,  b.name biz_name,  o.id offer_id,  o.str offer_str,  o.flags offer_flags,  if(o.flags &amp; 0x4000, &#39;S&#39;, &#39;N&#39;) offer_for_banner,  if(o.flags &amp; 0x02, &#39;S&#39;, &#39;N&#39;) offer_category_ok,  o.currency_fk offer_currency,  o.price_ic offer_price,  o.brand_fk offer_brand_fk,  o.url offer_url,  o.img_url offer_img_url,  o.from_url offer_from_url,  FROM_UNIXTIME(o.insert_ts) offer_insert_ts,  FROM_UNIXTIME(o.last_mod_ts) offer_last_mod_ts,  FROM_UNIXTIME(o.last_seen_ts) offer_last_seen_ts,  FROM_UNIXTIME(o.associate_ts) offer_associate_ts,  o.weekly_clicks offer_weekly_clicks   from offer o   inner join biz b on b.id = o.biz_fk     where o.showable = 1    and o.seen = 1  and b.type = 2  and b.status = 1  and b.country = &#39;AR&#39;  and (o.flags &amp; 0x4000)  )consulta</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Log Publicacion - Resumen</Data></Cell>
			<Cell><Data ss:Type="String">select * from (  select  LP.TIPO_PUBLICACION,           LP.ACCION,           TO_CHAR(((sum(decode( decode(LP.TRANSACCION_OK,&#39;N&#39;,1,0), 0, 0, case when decode( accion,&#39;CARGA_FOTO&#39;,SUBSTR(REPLACE(REPLACE(INFO_ADICIONAL,&#39;El peso de la imagen es de: &#39;,&#39;&#39;),&#39; bytes y la extension es: &#39;,&#39;&#39;),1,INSTR(REPLACE(REPLACE(INFO_ADICIONAL,&#39;El peso de la imagen es de: &#39;,&#39;&#39;),&#39; bytes y la extension es: &#39;,&#39;&#39;),&#39;.&#39;)-1),0) &lt; (1024*1024*2) then 1 else 0 end) )/count(*)))*100,&#39;990.99&#39;) tasa_error,           count(*) total_observaciones,           TO_CHAR(AVG(LP.DURACION_MS),&#39;99999990.9999&#39;) tiempo_promedio_ms    from sacar.log_publicacion lp  where id_publicacion is not null  and trunc(fecha) between trunc(sysdate - 1) and trunc(sysdate)  and tipo_publicacion is not null  group by LP.TIPO_PUBLICACION, LP.ACCION  UNION  select  LP.TIPO_PUBLICACION,           &#39;CARGA_FOTO_MAYOR_TAMAÑO&#39;,           TO_CHAR((count(*)/(select count(*) from sacar.log_publicacion lp where id_publicacion is not null and trunc(fecha) between trunc(sysdate - 1) and trunc(sysdate) and tipo_publicacion is not null and accion = &#39;CARGA_FOTO&#39;))*100,&#39;990.99&#39;) tasa_error,           count(*) total_observaciones,           TO_CHAR(AVG(LP.DURACION_MS),&#39;99999990.9999&#39;) tiempo_promedio_ms    from sacar.log_publicacion lp  where id_publicacion is not null  and trunc(fecha) between trunc(sysdate - 1) and trunc(sysdate)  and tipo_publicacion is not null  and accion = &#39;CARGA_FOTO&#39;  AND TRANSACCION_OK = &#39;N&#39;  AND SUBSTR(REPLACE(REPLACE(INFO_ADICIONAL,&#39;El peso de la imagen es de: &#39;,&#39;&#39;),&#39; bytes y la extension es: &#39;,&#39;&#39;),1,INSTR(REPLACE(REPLACE(INFO_ADICIONAL,&#39;El peso de la imagen es de: &#39;,&#39;&#39;),&#39; bytes y la extension es: &#39;,&#39;&#39;),&#39;.&#39;)-1) &gt;= 1024*1024*2  group by LP.TIPO_PUBLICACION, LP.ACCION  )  order by 1, 2</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">CARGOS_ENVIADOS_A_FACTURAR</Data></Cell>
			<Cell><Data ss:Type="String">SELECT       CAR.ID AS CARGO,      LOTE.ID AS LOTE,      LOTE.TIPO_LOTE AS TIPO_LOTE,      LOTE.ESTADO AS LOTE_ESTADO,  CAR.AV_PRODUCTO_ESTADO AS NUEVO_O_USADO,      CUENTA.USUARIO_ID AS USUARIO,      USU.USU_APODO AS USU_APODO,      CUENTA.ID AS CUENTA,      COMP.USUARIO_ID AS COMP_ID,      COMP.USU_APODO AS COMP_APODO,      PROV.PRV_NOMBRE AS COMP_PROV,      TO_CHAR(CAR.GENERACION) AS CARGO_GENERACION,          TO_CHAR(LOTE.GENERACION) AS LOTE_GENERACION,        CAR.MONTO AS CARGO_MONTO,      TRUNC(CAR.MONTO, 2) AS CARGO_MONTO_DOS_DIG,      CAR.AVISO_PRECIO_PESOS AS AVISO_PRECIO_PESOS,      CAR.AVISO_CANTIDAD AS AVISO_CANTIDAD,        LOTE.MONTO AS MONTO_LOTE,      (LOTE.MONTO + nvl(decode(nvl(LOTE.IMP_DEST, 0), 0, LOTE.IMP_PIB1, LOTE.IMP_DEST),0) + nvl(LOTE.IMP_PIB2,0) + nvl(LOTE.IMP_PIVA,0)) AS MONTO_TOTAL_A_FACTURAR,      LOTE.ALI_DEST AS ALICUOTA_DESTAQUE,      LOTE.IMP_DEST AS IMPORTE_DESTAQUE,      LOTE.BAS_DEST AS BASE_IMPONIB_DEST,          LOTE.ALI_PIB1 AS ALICUOTA_CABA,      LOTE.IMP_PIB1 AS IMPORTE_CABA,      LOTE.BAS_PIB1 AS BASE_IMPONIB_CABA,          LOTE.ALI_PIB2 AS ALICUOTA_TUCUMAN,      LOTE.IMP_PIB2 AS IMPORTE_TUCUMAN,      LOTE.BAS_PIB2 AS BASE_IMPONIB_TUCUMAN,          LOTE.ALI_PIVA AS ALICUOTA_IVA,      LOTE.IMP_PIVA AS IMPORTE_IVA,      LOTE.BAS_PIVA AS BASE_IMPONIB_IVA,      LOTE.RESPUESTA_IVA AS RESPUESTA_IVA,      TO_CHAR(LOTE.RESPUESTA_IVA_FECHA) AS RESPUESTA_IVA_FECHA  FROM       SACAR.CCE_LOTE LOTE,       SACAR.CCE_CARGO CAR       LEFT JOIN SACAR.SAC_MOVIMIENTO MOV ON CAR.TRANSACCION_ID = MOV.MOV_ID      LEFT JOIN SACAR.SAC_USUARIO COMP ON MOV.USUARIO_ID = COMP.USUARIO_ID      LEFT JOIN SACAR.SAC_PROVINCIAS PROV ON COMP.PRV_ID = PROV.PRV_ID,         SACAR.CCE_CUENTA CUENTA,      SACAR.SAC_USUARIO USU      WHERE  CUENTA.ID = LOTE.CUENTA_ID  AND LOTE.ENVIO_ESTADO = &#39;ENVIADO&#39;  AND LOTE.TIPO_LOTE IN (&#39;C&#39;,&#39;D&#39;)   AND LOTE.ID = CAR.LOTE_ID  AND CUENTA.ENVIO_ESTADO = &#39;RECIBIDO&#39;  AND CUENTA.USUARIO_ID = USU.USUARIO_ID  AND TRUNC(LOTE.ENVIO_FECHA) BETWEEN TRUNC($P{filtro_fecha_desde_LF}) AND TRUNC($P{filtro_fecha_hasta_LF})  </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Club Cupon - Subscripciones diarias voluntarias</Data></Cell>
			<Cell><Data ss:Type="String">select * from  (  (  select &#39;TOTAL&#39; fecha_suscripcion, null receptores_mail, count(*) altas,        (select count(*) from subscriptions s1 where is_subscribed = 0 and (      (city_id = $P{CC_City})      or      ($P{CC_City} = -1)      or        (          ($P{CC_City} = -2)          and          2&lt;= (select count(distinct city_id) from subscriptions s2 where s1.email = s2.email)        )      ) and not exists (select 1 from subscription_origin s2 where s1.id = s2.subscription_id) ) bajas_segun_fecha_de_baja,        (select count(*) from subscriptions s1 where is_subscribed = 0 and (      (city_id = $P{CC_City})      or      ($P{CC_City} = -1)      or        (          ($P{CC_City} = -2)          and          2&lt;= (select count(distinct city_id) from subscriptions s2 where s1.email = s2.email)        )      ) and not exists (select 1 from subscription_origin s2 where s1.id = s2.subscription_id) ) bajas_segun_fecha_de_alta  from subscriptions s  where not exists (select 1 from subscription_origin s2 where s.id = s2.subscription_id)  and (      (city_id = $P{CC_City})      or      ($P{CC_City} = -1)      or        (          ($P{CC_City} = -2)          and          2&lt;= (select count(distinct city_id) from subscriptions s2 where s.email = s2.email)        )      )  )  UNION  (    select DATE_FORMAT(s.fecha_suscripcion, &#39;%Y-%m-%d&#39;),            ( select count(*) from subscriptions s1              where created &lt; DATE(s.fecha_suscripcion)              and (      (city_id = $P{CC_City})      or      ($P{CC_City} = -1)      or        (          ($P{CC_City} = -2)          and          2&lt;= (select count(distinct city_id) from subscriptions s2 where s1.email = s2.email)        )      )              and ( is_subscribed = 1 or  ( is_subscribed = 0 and modified &gt; DATE(s.fecha_suscripcion) ) )              and not exists (select 1 from subscription_origin s2 where s1.id = s2.subscription_id)            ) receptores_mail,            s.altas, s.bajas_segun_fecha_de_baja, s.bajas_segun_fecha_de_alta    from    (    SELECT created fecha_suscripcion,        count(*) altas,        ( SELECT count(*) FROM subscriptions s2 where is_subscribed = 0 and (      (city_id = $P{CC_City})      or      ($P{CC_City} = -1)      or        (          ($P{CC_City} = -2)          and          2&lt;= (select count(distinct city_id) from subscriptions s3 where s3.email = s2.email)        )      ) and DATE_FORMAT(s2.modified, &#39;%Y-%m-%d&#39;) = DATE_FORMAT(s.created, &#39;%Y-%m-%d&#39;)          and not exists (select 1 from subscription_origin s1 where s2.id = s1.subscription_id) ) bajas_segun_fecha_de_baja,        ( SELECT count(*) FROM subscriptions s3 where is_subscribed = 0 and (      (city_id = $P{CC_City})      or      ($P{CC_City} = -1)      or        (          ($P{CC_City} = -2)          and          2&lt;= (select count(distinct city_id) from subscriptions s2 where s3.email = s2.email)        )      ) and DATE_FORMAT(s3.created, &#39;%Y-%m-%d&#39;) = DATE_FORMAT(s.created, &#39;%Y-%m-%d&#39;)          and not exists (select 1 from subscription_origin s2 where s3.id = s2.subscription_id)) bajas_segun_fecha_de_alta    FROM subscriptions s    where  (      (city_id = $P{CC_City})      or      ($P{CC_City} = -1)      or        (          ($P{CC_City} = -2)          and          2&lt;= (select count(distinct city_id) from subscriptions s2 where s.email = s2.email)        )      )    and date(s.created) &gt;= date($P{CC_fecha_desde})    and date(s.created) &lt;= date($P{CC_fecha_hasta})    and not exists (select 1 from subscription_origin s2 where s.id = s2.subscription_id)    group by DATE_FORMAT(created, &#39;%Y-%m-%d&#39;)    ) s  )  ) t  order by 1 desc  ;    </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Estadistica - Registros por hora</Data></Cell>
			<Cell><Data ss:Type="String">select * from  (  select to_char(horas.hora,&#39;00&#39;) hora,           (select count(*) from sacar.sac_usuario where trunc(usu_fecha_ingreso) = trunc($P{MO_reporting_filtro_fecha_DATE}) and to_char(usu_fecha_ingreso,&#39;hh24&#39;) = horas.hora) registros   from   (  select 0 hora from dual  union  select 1 hora from dual  union  select 2 from dual  union  select 3 from dual  union  select 4 from dual  union  select 5 from dual  union  select 6 from dual  union  select 7 from dual  union  select 8 from dual  union  select 9 from dual  union  select 10 from dual  union  select 11 from dual  union  select 12 from dual  union  select 13 from dual  union  select 14 from dual  union  select 15 from dual  union  select 16 from dual  union  select 17 from dual  union  select 18 from dual  union  select 19 from dual  union  select 20 from dual  union  select 21 from dual  union  select 22 from dual  union  select 23 from dual  ) horas  where (to_char(sysdate,&#39;hh24&#39;) &gt;= horas.hora or trunc($P{MO_reporting_filtro_fecha_DATE}) &lt;&gt; trunc(sysdate))  union  select &#39;TOTAL&#39;,          (select count(*) from sacar.sac_usuario where trunc(usu_fecha_ingreso) = trunc($P{MO_reporting_filtro_fecha_DATE})) registros   from dual  )  order by 1 </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Usuarios que tuvieron listing activo en los ultimos 3 meses</Data></Cell>
			<Cell><Data ss:Type="String">select u.usuario_id, u.usu_apodo, u.usu_email, to_char(u.usu_fecha_ingreso,&#39;YYYY-MM-DD&#39;) fecha_ingreso, decode(u.tius_id,2,&#39;Web&#39;,1,&#39;Broker&#39;,&#39;SMS&#39;) segmento,      (select c.puntaje from sacar.cal_reputacion c where u.usuario_id = c.usuario_id ) puntaje,      (select c.calificaciones_positivas from sacar.cal_reputacion c where u.usuario_id = c.usuario_id ) calificaciones_positivas,       (select c.calificaciones_negativas from sacar.cal_reputacion c where u.usuario_id = c.usuario_id ) calificaciones_negativas,        ( select count(*) from sacar.sac_aviso a where a.usuario_id = u.usuario_id ) totales,      ( select count(*) from sacar.sac_aviso a where a.usuario_id = u.usuario_id and a.av_estado = 3 ) totales_activos,      ( select count(*) from sacar.sac_aviso a where a.usuario_id = u.usuario_id and a.av_estado &lt;&gt; 3 ) totales_no_activos,      ( select count(*) from sacar.sac_aviso a where av_creado_por = &#39;WEB&#39; and av_estado = 3 and a.usuario_id = u.usuario_id ) web_activos,      ( select count(*) from sacar.sac_aviso a where av_creado_por = &#39;WEB&#39; and av_estado &lt;&gt; 3 and a.usuario_id = u.usuario_id ) no_activos,           ( select count(*) from sacar.sac_aviso a where av_creado_por = &#39;CARGADOR&#39; and a.usuario_id = u.usuario_id ) cargador,      ( select count(*) from sacar.sac_aviso a where av_creado_por = &#39;CARGADOR&#39; and av_estado = 3 and a.usuario_id = u.usuario_id ) cargador_activos,      ( select count(*) from sacar.sac_aviso a where av_creado_por = &#39;CARGADOR&#39; and av_estado &lt;&gt; 3 and a.usuario_id = u.usuario_id ) cargador_no_activos,      (      select count(*) from sacar.cce_cargo ca, sacar.cce_cuenta cu       where ca.cuenta_id = cu.id and cu.usuario_id = u.usuario_id       and ca.tipo_cargo_id = 1 and to_char(ca.generacion,&#39;mm-yyyy&#39;) = to_char(sysdate-30,&#39;mm-yyyy&#39;)       ) ventas_mes1,      (      select count(*) from sacar.cce_cargo ca, sacar.cce_cuenta cu       where ca.cuenta_id = cu.id and cu.usuario_id = u.usuario_id       and ca.tipo_cargo_id = 1 and to_char(ca.generacion,&#39;mm-yyyy&#39;) = to_char(sysdate-60,&#39;mm-yyyy&#39;)       ) ventas_mes2,      (      select count(*) from sacar.cce_cargo ca, sacar.cce_cuenta cu       where ca.cuenta_id = cu.id and cu.usuario_id = u.usuario_id       and ca.tipo_cargo_id = 1 and to_char(ca.generacion,&#39;mm-yyyy&#39;) = to_char(sysdate-90,&#39;mm-yyyy&#39;)       ) ventas_mes3,      (      select sum(monto) from sacar.cce_cargo ca, sacar.cce_cuenta cu       where ca.cuenta_id = cu.id and cu.usuario_id = u.usuario_id        and ca.tipo_cargo_id in (2,7) and to_char(ca.generacion,&#39;mm-yyyy&#39;) = to_char(sysdate-30,&#39;mm-yyyy&#39;)       ) inversion_mes1,      (      select sum(monto) from sacar.cce_cargo ca, sacar.cce_cuenta cu       where ca.cuenta_id = cu.id and cu.usuario_id = u.usuario_id       and ca.tipo_cargo_id in (2,7) and to_char(ca.generacion,&#39;mm-yyyy&#39;) = to_char(sysdate-60,&#39;mm-yyyy&#39;)       ) inversion_mes2,      (      select sum(monto) from sacar.cce_cargo ca, sacar.cce_cuenta cu       where ca.cuenta_id = cu.id and cu.usuario_id = u.usuario_id       and ca.tipo_cargo_id in (2,7) and to_char(ca.generacion,&#39;mm-yyyy&#39;) = to_char(sysdate-90,&#39;mm-yyyy&#39;)       ) inversion_mes3              from sacar.sac_usuario u  where exists (      select 1      from sacar.sac_aviso a1      where ( av_estado = 3 or av_fecha_expiracion &gt; (sysdate-90) )      and a1.usuario_id = u.usuario_id      and a1.portal_id = u.portal_id      )  </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Confronte - Cantidad de Descuentos Activos (fecha particular)</Data></Cell>
			<Cell><Data ss:Type="String">select * from(   select be.bank_fk banco_id,  ba.name banco,  be.description,  be.url,   be.price,   be.real_price,  min(date(from_unixtime(be.start_ts))) min_fecha_desde,  max(date(from_unixtime(be.end_ts))) max_fecha_desde,  count(*) cantidad,  SUM(be.purchased) suma   from benefit be   inner join bank ba on ba.id = be.bank_fk   inner join prom_category pc on pc.id = be.category_fk  left outer join store s on s.id = be.store_fk  where be.discount_type_fk = 5   AND STR_TO_DATE($P{CO_fecha},&#39;%Y-%m-%d&#39;) between date(from_unixtime(start_ts)) and DATE_ADD(date(from_unixtime(end_ts)),INTERVAL 0 DAY)         group by be.bank_fk, ba.name, be.description, be.url, be.price, be.real_price   having sum(be.purchased) &gt; 0   order by be.bank_fk, be.description, be.url, date(from_unixtime(be.start_ts)) desc, sum(be.purchased) desc  )consulta</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Club Cupon - Cupones generados en meses posteriores</Data></Cell>
			<Cell><Data ss:Type="String"></Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Confronte - Reporte control de precios</Data></Cell>
			<Cell><Data ss:Type="String">select * from(   select b.id biz_id,  b.name biz_name,  o.id offer_id,  o.str offer_str,  o.flags offer_flags,  if(o.flags &amp; 0x4000, &#39;S&#39;, &#39;N&#39;) offer_for_banner,  if(o.flags &amp; 0x02, &#39;S&#39;, &#39;N&#39;) offer_category_ok,  o.currency_fk offer_currency,  o.price_ic offer_price,  o.price_lc offer_local_price,  p.id product_id,  p.model product_model,   o.brand_fk offer_brand_fk,  fv.value offer_marca,  c.id category_id,  c.name category_name,  o.url offer_url,  o.img_url offer_img_url,  o.from_url offer_from_url,  FROM_UNIXTIME(o.insert_ts) offer_insert_ts,  FROM_UNIXTIME(o.last_mod_ts) offer_last_mod_ts,  FROM_UNIXTIME(o.last_seen_ts) offer_last_seen_ts,  FROM_UNIXTIME(o.associate_ts) offer_associate_ts,  o.weekly_clicks offer_weekly_clicks,  o.admin   from offer o   inner join biz b on b.id = o.biz_fk  left join category c on c.id = o.category_fk        left join feature_std_value fv ON (fv.sort = o.brand_fk AND fv.feature_fk = 1)      left join product p ON (p.id = o.product_fk)     where 1 = 1       and o.showable = 1    and o.seen = 1  and b.status = 1  and b.country = &#39;AR&#39;  and b.type = 1  and o.price_lc &gt;  $P{CO_precio}  and c.id = $P{CO_categoria}         order by offer_for_banner, o.last_mod_ts desc  ) consulta</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Confronte - Cantidad de Productos por Categoría</Data></Cell>
			<Cell><Data ss:Type="String">select * from(               SELECT c.id &#39;category_id&#39;,  c.name &#39;category_name&#39;,  cl.level  &#39;category_level&#39;,  count(p.id) &#39;cantidad&#39;         FROM product p           INNER JOIN feature_for_product fp ON (fp.product_fk = p.id AND fp.feature_fk=1)   INNER JOIN feature_std_value fv ON (fv.sort = fp.sort and fv.feature_fk = 1)   INNER JOIN category c ON (c.id = p.category_fk)   INNER JOIN categories_level cl ON cl.id = c.id     GROUP BY  c.id, c.name, cl.level  )consulta</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Confronte - Cantidad de Cupones Vendidos Agrupado</Data></Cell>
			<Cell><Data ss:Type="String">select * from(   select be.bank_fk banco_id,  ba.name banco,  be.description,  be.url,   be.price,   be.real_price,  min(date(from_unixtime(be.start_ts))) min_fecha_start,  max(date(from_unixtime(be.end_ts))) max_fecha_end,  count(*) cupones_agrupados,  GROUP_CONCAT(be.purchased                     ORDER BY be.start_ts SEPARATOR &#39; - &#39;) vendidos_detalle,  MAX(be.purchased) max_dia_vendido,  SUM(be.purchased) suma_vendido   from benefit be   inner join bank ba on ba.id = be.bank_fk   inner join prom_category pc on pc.id = be.category_fk  left outer join store s on s.id = be.store_fk  where be.discount_type_fk = 5   AND date(from_unixtime(start_ts)) &gt;= STR_TO_DATE($P{CO_filtro_fecha_desde},&#39;%Y-%m-%d&#39;)   and DATE_ADD(date(from_unixtime(end_ts)),INTERVAL 0 DAY) &lt;= STR_TO_DATE($P{CO_filtro_fecha_hasta},&#39;%Y-%m-%d&#39;)   group by be.bank_fk, ba.name, be.description, be.url, be.price, be.real_price   having sum(be.purchased) &gt; 0   order by be.bank_fk, be.description, be.url, date(from_unixtime(be.start_ts)) desc, sum(be.purchased) desc  )consulta</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Carga de fotos - Detalle</Data></Cell>
			<Cell><Data ss:Type="String">select  SUBSTR(INFO_ADICIONAL,INSTR(INFO_ADICIONAL,&#39;.&#39;)+1,LENGTH(INFO_ADICIONAL)) extension,          case when SUBSTR(REPLACE(REPLACE(INFO_ADICIONAL,&#39;El peso de la imagen es de: &#39;,&#39;&#39;),&#39; bytes y la extension es: &#39;,&#39;&#39;),1,INSTR(REPLACE(REPLACE(INFO_ADICIONAL,&#39;El peso de la imagen es de: &#39;,&#39;&#39;),&#39; bytes y la extension es: &#39;,&#39;&#39;),&#39;.&#39;)-1) &gt;= 1024*1024*2 then &#39;LIMITE_SUPERADO&#39; else &#39;LIMITE_OK&#39; END as peso,          TRANSACCION_OK,          count(*) total_observaciones,           TO_CHAR(AVG(LP.DURACION_MS),&#39;99999990.9999&#39;) tiempo_promedio_ms  from sacar.log_publicacion lp  where id_publicacion is not null  and trunc(fecha) between trunc(sysdate - 1) and trunc(sysdate)  and tipo_publicacion is not null  and accion = &#39;CARGA_FOTO&#39;  group by SUBSTR(INFO_ADICIONAL,INSTR(INFO_ADICIONAL,&#39;.&#39;)+1,LENGTH(INFO_ADICIONAL)),          case when SUBSTR(REPLACE(REPLACE(INFO_ADICIONAL,&#39;El peso de la imagen es de: &#39;,&#39;&#39;),&#39; bytes y la extension es: &#39;,&#39;&#39;),1,INSTR(REPLACE(REPLACE(INFO_ADICIONAL,&#39;El peso de la imagen es de: &#39;,&#39;&#39;),&#39; bytes y la extension es: &#39;,&#39;&#39;),&#39;.&#39;)-1) &gt;= 1024*1024*2 then &#39;LIMITE_SUPERADO&#39; else &#39;LIMITE_OK&#39; END,          TRANSACCION_OK  order by 1, 2, 3 </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO_ARCIBA_MENSUAL</Data></Cell>
			<Cell><Data ss:Type="String">select       lo.tipo_lote,      to_char(trunc(LO.ENVIO_FECHA)) as fecha_envio_presea,      lo.tipo_comprobante,      lo.codigo_factura as nro_comprobante,      lo.ali_dest as percep_destaque,      lo.bas_dest as base_destaque,      LO.IMP_DEST as importe_destaque,      lo.ali_pib1 as percep_comision,      lo.bas_pib1 as base_comision,      LO.IMP_PIB1 as importe_comision,      DF.NRO_DOCUMENTO as cuit,      US.USUARIO_ID as usuario_id,      US.USU_APODO as apodo,      decode(nvl(ii.agente_percepcion, &#39;AR&#39;), &#39;AR&#39;, &#39;&#39;, &#39;AR&#39;) as AR,      decode(nvl(sim.percepcion, 99), 99, &#39;&#39;, &#39;RS&#39;) as RS,      decode(tipo_lote , &#39;D&#39;          ,decode(ali_dest, 3, &#39;16&#39;, decode(ali_dest, 2,decode(decode(nvl(sim.percepcion, 99), 99, &#39;&#39;, &#39;RS&#39;) , &#39;RS&#39; , &#39;18&#39; , &#39;14&#39;) , &#39;14&#39;))           ,decode(ali_pib1, 3, &#39;24&#39;, decode(ali_pib1, 1.5, &#39;23&#39;, &#39;18&#39;))) as codigo_norma     from sacar.cce_lote lo,       sacar.cce_cuenta cu,      sacar.sac_usuario us,      SACAR.CCE_DATOS_FACTURACION df,      SACAR.CCE_ALTO_RIESGO_IIBB ii,      SACAR.CCE_REGIMEN_SIMPLIFICADO sim  where lo.estado = &#39;FACTURADO&#39;       and trunc(lo.envio_fecha, &#39;MONTH&#39;) = trunc($P{CC_fecha}, &#39;MONTH&#39;)      and lo.tipo_comprobante in (&#39;FCB&#39;, &#39;FCA&#39;)       and (lo.ali_dest is not null or lo.ali_pib1 is not null)      and LO.CUENTA_ID = CU.ID      and CU.USUARIO_ID = US.USUARIO_ID      and US.USUARIO_ID = DF.USUARIO_ID (+)      and DF.NRO_DOCUMENTO = II.CUIT (+)      and DF.NRO_DOCUMENTO = SIM.CUIT (+)      and (0= decode($P{GC_filtro_apodo_PROD},&#39;Ingresar Apodo&#39;,0,1) or us.usu_APODO = $P{GC_filtro_apodo_PROD})      and (0=decode($P{GC_filtro_id_usuario_PROD},0,0,1) or us.usuario_id=to_number($P{GC_filtro_id_usuario_PROD}))      and (0= decode($P{ARCIBA_CUIT},&#39;Ingresar cuit&#39;,0,1) or DF.NRO_DOCUMENTO = $P{ARCIBA_CUIT})      and (0= decode($P{ARCIBA_NRO_COMPROBANTE},&#39;Ingresar nro comprobante&#39;,0,1) or lo.codigo_factura = $P{ARCIBA_NRO_COMPROBANTE})  order by lo.tipo_lote asc, nro_comprobante asc</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Club Cupon - Cantidad de suscriptos y cupones acumulados y por periodo</Data></Cell>
			<Cell><Data ss:Type="String">select fechas.antiguedad_suscripcion, fechas.mes,         (select count(*) from subscriptions s where EXTRACT(YEAR_MONTH FROM s.created) = fechas.ym           and ((s.city_id = $P{CC_City}) or ($P{CC_City} = -1) or ($P{CC_City} = -2) )           and ( $P{CC_Suscripcion} = &#39;TODOS&#39;               or ( $P{CC_Suscripcion} = &#39;VOLUNTARIA&#39; and not exists (select 1 from subscription_origin so where s.id = so.subscription_id) )               or ( $P{CC_Suscripcion} = &#39;FORZADA&#39; and exists (select 1 from subscription_origin so where s.id = so.subscription_id) )           )           and date(s.created) &lt;= $P{CC_fecha_hasta}) subscripciones,         (select count(*) from subscriptions s where is_subscribed = 0 and EXTRACT(YEAR_MONTH FROM s.modified) = fechas.ym           and ( $P{CC_Suscripcion} = &#39;TODOS&#39;               or ( $P{CC_Suscripcion} = &#39;VOLUNTARIA&#39; and not exists (select 1 from subscription_origin so where s.id = so.subscription_id) )               or ( $P{CC_Suscripcion} = &#39;FORZADA&#39; and exists (select 1 from subscription_origin so where s.id = so.subscription_id) )           )           and date(s.created) &lt;= $P{CC_fecha_hasta} ) bajas_del_mes,         (select count(*) from subscriptions s           where ( ( is_subscribed = 1 and EXTRACT(YEAR_MONTH FROM s.created) &lt;= fechas.ym )              or ( is_subscribed = 0 and EXTRACT(YEAR_MONTH FROM s.created) &lt;= fechas.ym and EXTRACT(YEAR_MONTH FROM s.modified) &gt; fechas.ym ) )              and ( $P{CC_Suscripcion} = &#39;TODOS&#39;               or ( $P{CC_Suscripcion} = &#39;VOLUNTARIA&#39; and not exists (select 1 from subscription_origin so where s.id = so.subscription_id) )               or ( $P{CC_Suscripcion} = &#39;FORZADA&#39; and exists (select 1 from subscription_origin so where s.id = so.subscription_id) )           )           and date(s.created) &lt;= $P{CC_fecha_hasta} ) base_activa,         (select sum(du.quantity) from deal_users du, users u, subscriptions s where du.user_id = u.id and u.id = s.user_id           and EXTRACT(YEAR_MONTH FROM s.created) = fechas.ym           and ((s.city_id = $P{CC_City}) or ($P{CC_City} = -1) or ($P{CC_City} = -2) )           and ( $P{CC_Suscripcion} = &#39;TODOS&#39;               or ( $P{CC_Suscripcion} = &#39;VOLUNTARIA&#39; and not exists (select 1 from subscription_origin so where s.id = so.subscription_id) )               or ( $P{CC_Suscripcion} = &#39;FORZADA&#39; and exists (select 1 from subscription_origin so where s.id = so.subscription_id) )           )           and date(s.created) &lt;= $P{CC_fecha_hasta}) cupones_acumulados,         (select count(distinct u.id) from deal_users du, users u, subscriptions s where du.user_id = u.id and u.id = s.user_id           and EXTRACT(YEAR_MONTH FROM s.created) = fechas.ym           and ((s.city_id = $P{CC_City}) or ($P{CC_City} = -1) or ($P{CC_City} = -2) )           and ( $P{CC_Suscripcion} = &#39;TODOS&#39;               or ( $P{CC_Suscripcion} = &#39;VOLUNTARIA&#39; and not exists (select 1 from subscription_origin so where s.id = so.subscription_id) )               or ( $P{CC_Suscripcion} = &#39;FORZADA&#39; and exists (select 1 from subscription_origin so where s.id = so.subscription_id) )           )           and date(s.created) &lt;= $P{CC_fecha_hasta}) subscriptos_que_compraron,         (select sum(du.quantity) from deal_users du, users u, subscriptions s where du.user_id = u.id and u.id = s.user_id           and EXTRACT(YEAR_MONTH FROM du.created) = fechas.ym           and EXTRACT(YEAR_MONTH FROM s.created) = fechas.ym           and ((s.city_id = $P{CC_City}) or ($P{CC_City} = -1) or ($P{CC_City} = -2) )           and ( $P{CC_Suscripcion} = &#39;TODOS&#39;               or ( $P{CC_Suscripcion} = &#39;VOLUNTARIA&#39; and not exists (select 1 from subscription_origin so where s.id = so.subscription_id) )               or ( $P{CC_Suscripcion} = &#39;FORZADA&#39; and exists (select 1 from subscription_origin so where s.id = so.subscription_id) )           )           and date(s.created) &lt;= $P{CC_fecha_hasta}) cupones_periodo,         (select sum(du.quantity) from deal_users du, users...</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Moderacion - Avisos con video de ayer</Data></Cell>
			<Cell><Data ss:Type="String">SELECT usu.usu_apodo||&#39;  |  &#39;||&#39;http://www.masoportunidades.com.ar/aviso/&#39; || av.av_id || &#39;-&#39; avisos_con_video    FROM SACAR.sac_aviso av, SACAR.sac_usuario usu   WHERE TRUNC (av.actualizacion) = TRUNC (SYSDATE)     AND av.av_creado_por NOT IN                      (&#39;CARGADOR&#39;, &#39;REPUBLICACION_MASIVA_POPUP&#39;, &#39;MIG BROKERS&#39;)     AND av.av_estado = 3     AND av.av_url_video IS NOT NULL     AND av.usuario_id = usu.usuario_id</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Confronte - Cantidad de Cupones Vendidos. Detallado</Data></Cell>
			<Cell><Data ss:Type="String">select * from(   select   be.bank_fk banco_id,  ba.name banco,  date(from_unixtime(be.start_ts)) fecha_inicio,  date(from_unixtime(be.end_ts)) fecha_fin,  pc.name categoria,  be.description descuento,  s.name store,  st.state_name,  be.price precio,  be.real_price precio_real,  SUM(be.purchased) suma   from benefit be   inner join bank ba on ba.id = be.bank_fk   inner join prom_category pc on pc.id = be.category_fk  left outer join store s on s.id = be.store_fk  left outer join state st on st.state = be.state_fk  where be.discount_type_fk = 5   and DATE_ADD(date(from_unixtime(start_ts)),INTERVAL 0 DAY) &gt;= STR_TO_DATE($P{CO_fecha_d},&#39;%Y-%m-%d&#39;)   and DATE_ADD(date(from_unixtime(end_ts)),INTERVAL 0 DAY) &lt;= STR_TO_DATE($P{CO_fecha_h},&#39;%Y-%m-%d&#39;)   group by be.bank_fk, ba.name, date(from_unixtime(be.start_ts)), date(from_unixtime(be.end_ts)), pc.name, be.description, s.name   order by date(from_unixtime(be.start_ts)) desc, sum(be.purchased) desc)consulta</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Confronte - Cantidad de Cupones Vendidos</Data></Cell>
			<Cell><Data ss:Type="String">select * from(   select be.bank_fk banco_id,  ba.name banco,  date(from_unixtime(be.start_ts)) fecha_inicio,  date(from_unixtime(be.end_ts)) fecha_fin,  SUM(be.purchased) suma   from benefit be   inner join bank ba on ba.id = be.bank_fk   inner join prom_category pc on pc.id = be.category_fk  left outer join store s on s.id = be.store_fk  where be.discount_type_fk = 5  AND STR_TO_DATE($P{CO_fecha},&#39;%Y-%m-%d&#39;) between date(from_unixtime(start_ts)) and DATE_ADD(date(from_unixtime(end_ts)),INTERVAL 0 DAY)         group by be.bank_fk, ba.name, date(from_unixtime(be.start_ts)), date(from_unixtime(be.end_ts))   having sum(be.purchased) &gt; 0   order by date(from_unixtime(be.start_ts)) desc, sum(be.purchased) desc)consulta</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Confronte - Productos por Categoría</Data></Cell>
			<Cell><Data ss:Type="String">select * from(               SELECT c.id &#39;category_id&#39;,  c.name &#39;category_name&#39;,  cl.level  &#39;category_level&#39;,  p.id &#39;product_id&#39;,  p.model&#39;product_model&#39;,  p.search&#39;product_search&#39;,  fv.sort&#39;marca_id&#39;,  fv.value&#39;marca&#39;         FROM product p           INNER JOIN feature_for_product fp ON (fp.product_fk = p.id AND fp.feature_fk=1)   INNER JOIN feature_std_value fv ON (fv.sort = fp.sort and fv.feature_fk = 1)   INNER JOIN category c ON (c.id = p.category_fk)   INNER JOIN categories_level cl ON cl.id = c.id   ORDER BY p.id  )consulta</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Facturacion_Tipo_Lote - Resumen</Data></Cell>
			<Cell><Data ss:Type="String">select       CL.tipo_lote,   cue.tipo_cliente,      sum(CL.MONTO) as monto,       sum(decode(IMP_DEST, null, 0 ,IMP_DEST) + decode(IMP_PIB1, null, 0 ,IMP_PIB1) + decode(IMP_PIB2, null, 0 ,IMP_PIB2) + decode(IMP_PIVA, null, 0 ,IMP_PIVA)) as percepcion,      sum(CL.MONTO) + sum(decode(IMP_DEST, null, 0 ,IMP_DEST) + decode(IMP_PIB1, null, 0 ,IMP_PIB1) + decode(IMP_PIB2, null, 0 ,IMP_PIB2) + decode(IMP_PIVA, null, 0 ,IMP_PIVA)) as total   from sacar.cce_lote CL, sacar.erp_movimiento em, (select cu.id,   DECODE (cu.tipo_cliente_codigo,  &#39;BROKER&#39;, &#39;GV&#39;,  &#39;WEB&#39;     ) AS tipo_cliente  from SACAR.cce_cuenta cu  where cu.tipo_cliente_codigo IN (  --seleccionamos del indice el valor del parametro  SELECT val    FROM (  --la columna ind es el valor del parametro y val lo que representa  SELECT &#39;Indistinto&#39; AS ind, &#39;FIDEDIGNO&#39; AS val    FROM DUAL  UNION  SELECT &#39;Indistinto&#39; AS ind, &#39;PARTICULAR&#39; AS val    FROM DUAL  UNION  SELECT &#39;Indistinto&#39; AS ind, &#39;BROKER&#39; AS val    FROM DUAL  UNION  SELECT &#39;Indistinto&#39; AS ind, &#39;CERTIFICADO&#39; AS val    FROM DUAL  UNION  SELECT &#39;Web&#39; AS ind, &#39;FIDEDIGNO&#39; AS val    FROM DUAL  UNION  SELECT &#39;Web&#39; AS ind, &#39;PARTICULAR&#39; AS val    FROM DUAL  UNION  SELECT &#39;Web&#39; AS ind, &#39;CERTIFICADO&#39; AS val    FROM DUAL  UNION  SELECT &#39;Broker&#39; AS ind, &#39;BROKER&#39; AS val    FROM DUAL)   WHERE ind = $P{GC_filtro_tipo_usuario_PROD})) cue  where CL.estado = &#39;FACTURADO&#39;  and CL.tipo_lote in (&#39;C&#39;,&#39;D&#39;,&#39;B&#39;)  and CL.CODIGO_FACTURA = EM.NUMERO_COMPROBANTE and CL.TIPO_COMPROBANTE = EM.SUBTIPO_COMPROBANTE                          and (trunc(EM.FECHA_MOVIMIENTO) between trunc($P{filtro_fecha_desde_FTL}) and trunc($P{filtro_fecha_hasta_FTL}))  AND cl.CUENTA_ID = cue.id  group by cl.tipo_lote, cue.tipo_cliente  ORDER BY tipo_lote, tipo_cliente</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">MO - Log - Carga tarifario cliente</Data></Cell>
			<Cell><Data ss:Type="String">select  SUBSTR(INFO_ADICIONAL,                 INSTR(INFO_ADICIONAL,&#39;:&#39;)+1,                 INSTR(INFO_ADICIONAL,&#39;|&#39;)-(INSTR(INFO_ADICIONAL,&#39;:&#39;)+1)                 ) soporta_javascript,           SUBSTR(INFO_ADICIONAL,                 INSTR(INFO_ADICIONAL,&#39;|&#39;)+1,                 INSTR(INFO_ADICIONAL,&#39;|&#39;,INSTR(INFO_ADICIONAL,&#39;|&#39;)+1)-(INSTR(INFO_ADICIONAL,&#39;|&#39;)+1)) resolucion,          SUBSTR(INFO_ADICIONAL,                 INSTR(INFO_ADICIONAL,&#39;|&#39;,INSTR(INFO_ADICIONAL,&#39;|&#39;)+1)+1,                 INSTR(INFO_ADICIONAL,&#39;|&#39;,INSTR(INFO_ADICIONAL,&#39;|&#39;,INSTR(INFO_ADICIONAL,&#39;|&#39;)+1)+1)-(INSTR(INFO_ADICIONAL,&#39;|&#39;,INSTR(INFO_ADICIONAL,&#39;|&#39;)+1)+1)) so,          SUBSTR(INFO_ADICIONAL,                 INSTR(INFO_ADICIONAL,&#39;|&#39;,INSTR(INFO_ADICIONAL,&#39;|&#39;,INSTR(INFO_ADICIONAL,&#39;|&#39;)+1)+1)+1,                 INSTR(INFO_ADICIONAL,&#39;|&#39;,INSTR(INFO_ADICIONAL,&#39;|&#39;,INSTR(INFO_ADICIONAL,&#39;|&#39;,INSTR(INFO_ADICIONAL,&#39;|&#39;)+1)+1)+1)-(INSTR(INFO_ADICIONAL,&#39;|&#39;,INSTR(INFO_ADICIONAL,&#39;|&#39;,INSTR(INFO_ADICIONAL,&#39;|&#39;)+1)+1)+1)) browser,          SUBSTR(INFO_ADICIONAL,                 INSTR(INFO_ADICIONAL,&#39;|&#39;,INSTR(INFO_ADICIONAL,&#39;|&#39;,INSTR(INFO_ADICIONAL,&#39;|&#39;,INSTR(INFO_ADICIONAL,&#39;|&#39;)+1)+1)+1)+1                 ) err,          TRANSACCION_OK, count(*) cantidad_operaciones, count(distinct id_usuario) cantidad_usuarios, avg(duracion_ms) duracion_promedio    from sacar.log_publicacion lp  where accion in (&#39;CARGA_TARIFARIO_CLIENTE&#39;)  and id_publicacion is not null  and trunc(fecha) between trunc(sysdate - 30) and trunc(sysdate)  and tipo_publicacion is not null  group by SUBSTR(INFO_ADICIONAL,                 INSTR(INFO_ADICIONAL,&#39;:&#39;)+1,                 INSTR(INFO_ADICIONAL,&#39;|&#39;)-(INSTR(INFO_ADICIONAL,&#39;:&#39;)+1)                 ),           SUBSTR(INFO_ADICIONAL,                 INSTR(INFO_ADICIONAL,&#39;|&#39;)+1,                 INSTR(INFO_ADICIONAL,&#39;|&#39;,INSTR(INFO_ADICIONAL,&#39;|&#39;)+1)-(INSTR(INFO_ADICIONAL,&#39;|&#39;)+1)),          SUBSTR(INFO_ADICIONAL,                 INSTR(INFO_ADICIONAL,&#39;|&#39;,INSTR(INFO_ADICIONAL,&#39;|&#39;)+1)+1,                 INSTR(INFO_ADICIONAL,&#39;|&#39;,INSTR(INFO_ADICIONAL,&#39;|&#39;,INSTR(INFO_ADICIONAL,&#39;|&#39;)+1)+1)-(INSTR(INFO_ADICIONAL,&#39;|&#39;,INSTR(INFO_ADICIONAL,&#39;|&#39;)+1)+1)) ,          SUBSTR(INFO_ADICIONAL,                 INSTR(INFO_ADICIONAL,&#39;|&#39;,INSTR(INFO_ADICIONAL,&#39;|&#39;,INSTR(INFO_ADICIONAL,&#39;|&#39;)+1)+1)+1,                 INSTR(INFO_ADICIONAL,&#39;|&#39;,INSTR(INFO_ADICIONAL,&#39;|&#39;,INSTR(INFO_ADICIONAL,&#39;|&#39;,INSTR(INFO_ADICIONAL,&#39;|&#39;)+1)+1)+1)-(INSTR(INFO_ADICIONAL,&#39;|&#39;,INSTR(INFO_ADICIONAL,&#39;|&#39;,INSTR(INFO_ADICIONAL,&#39;|&#39;)+1)+1)+1)) ,          SUBSTR(INFO_ADICIONAL,                 INSTR(INFO_ADICIONAL,&#39;|&#39;,INSTR(INFO_ADICIONAL,&#39;|&#39;,INSTR(INFO_ADICIONAL,&#39;|&#39;,INSTR(INFO_ADICIONAL,&#39;|&#39;)+1)+1)+1)+1                 ) ,          TRANSACCION_OK</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Confronte - Cantidad de Descuentos Activos</Data></Cell>
			<Cell><Data ss:Type="String">select * from (  select bank.id as &#39;Id&#39;, bank.name as &#39;Establecimiento&#39;, count(1) as &#39;Cantidad&#39;  from benefit,        bank  where bank.id = benefit.bank_fk  AND date(FROM_UNIXTIME(UNIX_TIMESTAMP())) between date(from_unixtime(start_ts)) and DATE_ADD(date(from_unixtime(end_ts)),INTERVAL 0 DAY)        group by bank.id, bank.name  order by bank.id) Descuentos</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Confronte - Usuarios</Data></Cell>
			<Cell><Data ss:Type="String">select *  from person;  </Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">BAC - Cuenta Corriente - Listado de pagos con mas parametros </Data></Cell>
			<Cell><Data ss:Type="String">SELECT p.id_pago,          o.id_producto,          CONCAT(o.nombre,&#39; - &#39;,o.descripcion) producto,          ROUND(p.monto_final * p.cotizacion,2) monto_$ARG, p.monto_final, p.id_moneda, p.estado, NULL AS status_description,          DATE_FORMAT(p.generacion,&#39;%Y-%m-%d %H:%i:%s&#39;) generacion_pago,          DATE_FORMAT(p.generacion,&#39;%Y-%m-%d&#39;) generacion_a_dia_cerrado,          DATE_FORMAT(p.actualizacion,&#39;%Y-%m-%d %H:%i:%s&#39;) actualizacion_pago,          DATE_FORMAT(p.actualizacion,&#39;%Y-%m-%d&#39;) actualizacion_a_dia_cerrado,          DATE_FORMAT(pdm.actualizacion,&#39;%Y-%m-%d&#39;) fecha_conciliacion,          CASE p.id_gateway WHEN 100 THEN &#39;---&#39; ELSE  pdm.medio_pago END medio_pago,          p.id_pago_portal,          usu.id_usuario, usu.id_portal, usu.id_usuario_portal, p.id_cliente, ec.id_cliente_facturador,          p.comprobante_tipo, p.comprobante_numero,          usu.id_tipo_usuario, usu.login, usu.email, usu.id_pais, a.nombre pais, DATE_FORMAT(usu.generacion,&#39;%Y-%m-%d&#39;) alta_usuario,          /*          ( select m.comprobante_numero from cce_cargo c, erp_movimiento m where c.id_pago = p.id_pago and c.id_lote = m.id_lote ) factura_numero,          ( select m.comprobante_tipo from cce_cargo c, erp_movimiento m where c.id_pago = p.id_pago and c.id_lote = m.id_lote ) factura_tipo,          */          g.descripcion gateway  FROM cce_pago p, cce_usuario usu, cce_pago_dm pdm, bac_gateway g, cce_cargo c, bac_producto o, bac_pais a, erp_cliente ec  WHERE usu.id_usuario = p.id_usuario  AND p.id_pago = c.id_pago  AND c.id_producto = o.id_producto  AND ec.id_cliente = p.id_cliente  AND usu.id_pais = a.id_pais  AND p.id_pago = pdm.id_pago  AND p.id_gateway = g.id_gateway  AND p.id_gateway = $P{Copy_bac_gateway}  AND ( usu.id_portal = $P{Copy_bac_portal} OR $P{Copy_bac_portal} = 0 )  AND ec.id_portal=usu.id_portal  AND ( usu.id_usuario_portal = $P{cce_usuario_portal} OR $P{cce_usuario_portal} = 0 )  AND ( p.estado IN ($P!{Copy_cce_estado_pago})  )  AND CASE WHEN $P{bac_tipo_fecha} = 1 THEN DATE(pdm.fecha)           WHEN $P{bac_tipo_fecha} = 2 THEN DATE(p.generacion)           ELSE DATE(pdm.actualizacion) END      &gt;= $P{bac_desde}  AND CASE WHEN $P{bac_tipo_fecha} = 1 THEN DATE(pdm.fecha)           WHEN $P{bac_tipo_fecha} = 2 THEN DATE(p.generacion)           ELSE DATE(pdm.actualizacion) END      &lt;= $P{bac_hasta}  UNION  SELECT p.id_pago,          o.id_producto,          CONCAT(o.nombre,&#39; - &#39;,o.descripcion) producto,          ROUND(p.monto_final * p.cotizacion,2) monto_$ARG, p.monto_final, p.id_moneda, p.estado, NULL AS status_description,          DATE_FORMAT(p.generacion,&#39;%Y-%m-%d %H:%i:%s&#39;) generacion_pago,          DATE_FORMAT(p.generacion,&#39;%Y-%m-%d&#39;) generacion_a_dia_cerrado,          DATE_FORMAT(p.actualizacion,&#39;%Y-%m-%d %H:%i:%s&#39;) actualizacion_pago,          DATE_FORMAT(p.actualizacion,&#39;%Y-%m-%d&#39;) actualizacion_a_dia_cerrado,          DATE_FORMAT(pnps.pos_date_time,&#39;%Y-%m-%d&#39;) fecha_conciliacion,          mp.nombre medio_pago,          p.id_pago_portal,          usu.id_usuario, usu.id_portal, usu.id_usuario_portal, p.id_cliente, ec.id_cliente_facturador,          p.comprobante_tipo, p.comprobante_numero,          usu.id_tipo_usuario, usu.login, usu.email, usu.id_pais, a.nombre pais, DATE_FORMAT(usu.generacion,&#39;%Y-%m-%d&#39;) alta_usuario,          /*          ( select m.comprobante_numero from cce_cargo c, erp_movimiento m where c.id_pago = p.id_pago and c.id_lote = m.id_lote ) factura_numero,          ( select m.comprobante_tipo from cce_cargo c, erp_movimiento m where c.id_pago = p.id_pago and c.id_lote = m.id_lote ) factura_tipo,          */          g.descripcion gateway  FROM cce_pago p, cce_usuario usu, cce_pago_nps pnps, bac_medio_pago mp, bac_gateway g, cce_cargo c, bac_producto o, bac_pais a, erp_cliente ec  WHERE usu.id_usuario = p.id_usuario  AND p.id_pago = c.id_pago  AND c.id_producto = o.id_producto  AND usu.id_pais = a.id_pais  AND p.id_pago = pnps.id_pago  AND p.id_medio_pago = mp.id_medio_pago  AND p.id_gateway = g.id_gateway  AND ec.id_cliente = p.id_cliente   AND p.id_gateway =  $P{Copy_bac_gateway}  AND ( usu.id_portal = $P{Copy_bac_portal} OR $P{Copy_bac_portal} = 0 )  AND ec.id_portal=usu.id_portal  AND ( usu.id_usuario_portal = $P{cce_usuario_portal} OR $P{cce_usuario_portal} = 0 )  AND ( p.estado IN ($P!{Copy_cce_estado_pago})  )  AND CASE WHEN $P{bac_tipo_fecha} = 1 THEN DATE(pnps.pos_date_time)           WHEN $P{bac_tipo_fecha} = 2 THEN DATE(p.generacion)           ELSE DATE(pnps.actualizacion) END      &gt;= $P{bac_desde}  AND CASE WHEN $P{bac_tipo_fecha} = 1 THEN DATE(pnps.pos_date_time)           WHEN $P{bac_tipo_fecha} = 2 THEN DATE(p.generacion)           ELSE DATE(pnps.actualizacion) END      &lt;= $P{bac_hasta}  UNION  SELECT p.id_pago,          o.id_producto,          CONCAT(o.nombre,&#39; - &#39;,o.descripcion) producto,          ROUND(p.monto_final * p.cotizacion,2) monto_$ARG, p.monto_final, p.id_moneda, p.estado, pmp.status_description,          DATE_FORMAT(p.generacion,&#39;%Y-%m-%d %H:%i:%s&#39;) generacion_pago,          DATE_FORMAT(p.generacion,&#39;%Y-%m-%d&#39;) generacion_a_dia_cerrado,          DATE_FORMAT(p.actualizacion,&#39;%Y-%m-%d %H:%i:%s&#39;) actualizacion_pago,          DATE_FORMAT(p.actualizacion,&#39;%Y-%m-%d&#39;) actualizacion_a_dia_cerrado,          DATE_FORMAT(pmp.actualizacion,&#39;%Y-%m-%d&#39;) fecha_conciliacion,          pmp.payment_method medio_pago,          p.id_pago_portal,          usu.id_usuario, usu.id_portal, usu.id_usuario_portal, p.id_cliente, ec.id_cliente_facturador,          p.comprobante_tipo, p.comprobante_numero,          usu.id_tipo_usuario, usu.login, usu.email, usu.id_pais, a.nombre pais, DATE_FORMAT(usu.generacion,&#39;%Y-%m-%d&#39;) alta_usuario,          /*          ( select m.comprobante_numero from cce_cargo c, erp_movimiento m where c.id_pago = p.id_pago and c.id_lote = m.id_lote ) factura_numero,          ( select m.comprobante_tipo from cce_cargo c, erp_movimiento m where c.id_pago = p.id_pago and c.id_lote = m.id_lote ) factura_tipo,          */          g.descripcion gateway  FROM cce_pago p, cce_usuario usu, cce_pago_mp pmp, bac_gateway g, cce_cargo c, bac_producto o, bac_pais a, erp_cliente ec  WHERE usu.id_usuario = p.id_usuario  AND p.id_pago = pmp.id_pago  AND p.id_pago = c.id_pago  AND c.id_producto = o.id_producto  AND usu.id_pais = a.id_pais  AND p.id_gateway = g.id_gateway  AND ec.id_cliente = p.id_cliente  AND p.id_gateway = $P{Copy_bac_gateway}  AND ( usu.id_portal = $P{Copy_bac_portal} OR $P{Copy_bac_portal} = 0 )  AND ec.id_portal=usu.id_portal  AND ( usu.id_usuario_portal = $P{cce_usuario_portal} OR $P{cce_usuario_portal} = 0 )  AND ( p.estado IN ($P!{Copy_cce_estado_pago})  )  AND CASE WHEN $P{bac_tipo_fecha} = 1 THEN DATE(pmp.actualizacion)           WHEN $P{bac_tipo_fecha} = 2 THEN DATE(p.generacion)           ELSE DATE(pmp.actualizacion) END      &gt;= $P{bac_desde}  AND CASE WHEN $P{bac_tipo_fecha} = 1 THEN DATE(pmp.actualizacion)           WHEN $P{bac_tipo_fecha} = 2 THEN DATE(p.generacion)           ELSE DATE(pmp.actualizacion) END      &lt;= $P{bac_hasta}  UNION  SELECT p.id_pago,          o.id_producto,          CONCAT(o.nombre,&#39; - &#39;,o.descripcion) producto,          ROUND(p.monto_final * p.cotizacion,2) monto_$ARG, p.monto_final, p.id_moneda, p.estado, NULL AS status_description,          DATE_FORMAT(p.generacion,&#39;%Y-%m-%d %H:%i:%s&#39;) generacion_pago,          DATE_FORMAT(p.generacion,&#39;%Y-%m-%d&#39;) generacion_a_dia_cerrado,          DATE_FORMAT(p.actualizacion,&#39;%Y-%m-%d %H:%i:%s&#39;) actualizacion_pago,          DATE_FORMAT(p.actualizacion,&#39;%Y-%m-%d&#39;) actualizacion_a_dia_cerrado,          DATE_FORMAT(ppsc.actualizacion,&#39;%Y-%m-%d&#39;) fecha_conciliacion,          &#39;---&#39;,          p.id_pago_portal,          usu.id_usuario, usu.id_portal, usu.id_usuario_portal, p.id_cliente, ec.id_cliente_facturador,          p.comprobante_tipo, p.comprobante_numero,          usu.id_tipo_usuario, usu.login, usu.email, usu.id_pais, a.nombre pais, DATE_FORMAT(usu.generacion,&#39;%Y-%m-%d&#39;) alta_usuario,          /*          ( select m.comprobante_numero from cce_cargo c, erp_movimiento m where c.id_pago = p.id_pago and c.id_lote = m.id_lote ) factura_numero,          ( select m.comprobante_tipo from cce_cargo c, erp_movimiento m where c.id_pago = p.id_pago and c.id_lote = m.id_lote ) factura_tipo,          */          g.descripcion gateway  FROM cce_pago p, cce_usuario usu, cce_pago_psc ppsc, bac_gateway g, cce_cargo c, bac_producto o, bac_pais a, erp_cliente ec  WHERE usu.id_usuario = p.id_usuario  AND p.id_pago = ppsc.id_pago  AND p.id_pago = c.id_pago  AND c.id_producto = o.id_producto  AND usu.id_pais = a.id_pais  AND p.id_gateway = g.id_gateway  AND ec.id_cliente = p.id_cliente  AND p.id_gateway = $P{Copy_bac_gateway}  AND ( usu.id_portal = $P{Copy_bac_portal} OR $P{Copy_bac_portal} = 0 )  AND ec.id_portal=usu.id_portal  AND ( usu.id_usuario_portal = $P{cce_usuario_portal} OR $P{cce_usuario_portal} = 0 )  AND ( p.estado IN ($P!{Copy_cce_estado_pago})  )  AND CASE WHEN $P{bac_tipo_fecha} = 1 THEN DATE(ppsc.actualizacion)           WHEN $P{bac_tipo_fecha} = 2 THEN DATE(p.generacion)           ELSE DATE(ppsc.actualizacion) END      &gt;= $P{bac_desde}  AND CASE WHEN $P{bac_tipo_fecha} = 1 THEN DATE(ppsc.actualizacion)           WHEN $P{bac_tipo_fecha} = 2 THEN DATE(p.generacion)           ELSE DATE(ppsc.actualizacion) END      &lt;= $P{bac_hasta}      UNION  SELECT p.id_pago,          o.id_producto,          CONCAT(o.nombre,&#39; - &#39;,o.descripcion) producto,          ROUND(p.monto_final * p.cotizacion,2) monto_$ARG, p.monto_final, p.id_moneda, p.estado, NULL AS status_description,          DATE_FORMAT(p.generacion,&#39;%Y-%m-%d %H:%i:%s&#39;) generacion_pago,          DATE_FORMAT(p.generacion,&#39;%Y-%m-%d&#39;) generacion_a_dia_cerrado,          DATE_FORMAT(p.actualizacion,&#39;%Y-%m-%d %H:%i:%s&#39;) actualizacion_pago,          DATE_FORMAT(p.actualizacion,&#39;%Y-%m-%d&#39;) actualizacion_a_dia_cerrado,          &#39;---&#39; fecha_conciliacion,          &#39;---&#39;,          p.id_pago_portal,          usu.id_usuario, usu.id_portal, usu.id_usuario_portal, p.id_cliente, ec.id_cliente_facturador,          p.comprobante_tipo, p.comprobante_numero,          usu.id_tipo_usuario, usu.login, usu.email, usu.id_pais, a.nombre pais, DATE_FORMAT(usu.generacion,&#39;%Y-%m-%d&#39;) alta_usuario,          /*          ( select m.comprobante_numero from cce_cargo c, erp_movimiento m where c.id_pago = p.id_pago and c.id_lote = m.id_lote ) factura_numero,          ( select m.comprobante_tipo from cce_cargo c, erp_movimiento m where c.id_pago = p.id_pago and c.id_lote = m.id_lote ) factura_tipo,          */          g.descripcion gateway  FROM cce_pago p, cce_usuario usu, bac_gateway g, cce_cargo c, bac_producto o, bac_pais a, erp_cliente ec  WHERE usu.id_usuario = p.id_usuario  AND p.id_pago = c.id_pago  AND c.id_producto = o.id_producto  AND usu.id_pais = a.id_pais  AND p.id_gateway = g.id_gateway  AND ec.id_cliente = p.id_cliente  AND p.id_gateway = $P{Copy_bac_gateway} and p.id_gateway=200  AND ( usu.id_portal = $P{Copy_bac_portal} OR $P{Copy_bac_portal} = 0 )  AND ec.id_portal=usu.id_portal  AND ( usu.id_usuario_portal = $P{cce_usuario_portal} OR $P{cce_usuario_portal} = 0 )  AND ( p.estado IN ($P!{Copy_cce_estado_pago})  )  AND CASE WHEN $P{bac_tipo_fecha} = 1 THEN DATE(p.actualizacion)           WHEN $P{bac_tipo_fecha} = 2 THEN DATE(p.generacion)           ELSE DATE(p.actualizacion) END      &gt;= $P{bac_desde}  AND CASE WHEN $P{bac_tipo_fecha} = 1 THEN DATE(p.actualizacion)           WHEN $P{bac_tipo_fecha} = 2 THEN DATE(p.generacion)           ELSE DATE(p.actualizacion) END      &lt;= $P{bac_hasta}   ;</Data></Cell>
		</Row>
		<Row>
			<Cell><Data ss:Type="String">Mundo Gaturro - Pagos acreditados a MG en el día</Data></Cell>
			<Cell><Data ss:Type="String">select p.id_pago, p.monto_final, p.id_moneda, p.estado,          date_format(p.generacion,&#39;%Y-%m-%d %H:%i:%s&#39;) generacion_pago,          date_format(p.generacion,&#39;%Y-%m-%d&#39;) generacion_a_dia_cerrado,          date_format(p.actualizacion,&#39;%Y-%m-%d %H:%i:%s&#39;) actualizacion_pago,          date_format(p.actualizacion,&#39;%Y-%m-%d&#39;) actualizacion_a_dia_cerrado,          date_format(pdm.fecha,&#39;%Y-%m-%d&#39;) fecha_conciliacion,          CASE pdm.medio_pago WHEN &#39;Pago F¿cil&#39; THEN &#39;Pago Facil&#39; WHEN &#39;Pago Fácil&#39; THEN &#39;Pago Facil&#39; ELSE  pdm.medio_pago END medio_pago,          p.id_pago_portal,          usu.id_usuario, usu.id_portal, usu.id_usuario_portal,          ( select ec.id_cliente_facturador from erp_cliente ec where ec.id_cliente = p.id_cliente ) id_cliente_facturador,          usu.id_tipo_usuario, usu.login, usu.email, date_format(usu.generacion,&#39;%Y-%m-%d&#39;) alta_usuario,          &#39;DM&#39; gateway, p.id_gateway  from cce_pago p, cce_usuario usu, cce_pago_dm pdm  where usu.id_usuario = p.id_usuario  and p.id_pago = pdm.id_pago  and p.id_portal = 1  and ( p.estado in (&#39;ACREDITADO&#39;)  )  and date(pdm.actualizacion) &gt;= date($P{bac_desde})  and date(pdm.actualizacion) &lt;= date($P{bac_hasta})  UNION  select p.id_pago, p.monto_final, p.id_moneda, p.estado,          date_format(p.generacion,&#39;%Y-%m-%d %H:%i:%s&#39;) generacion_pago,          date_format(p.generacion,&#39;%Y-%m-%d&#39;) generacion_a_dia_cerrado,          date_format(p.actualizacion,&#39;%Y-%m-%d %H:%i:%s&#39;) actualizacion_pago,          date_format(p.actualizacion,&#39;%Y-%m-%d&#39;) actualizacion_a_dia_cerrado,          date_format(pnps.pos_date_time,&#39;%Y-%m-%d&#39;) fecha_conciliacion,          mp.nombre medio_pago,          p.id_pago_portal,          usu.id_usuario, usu.id_portal, usu.id_usuario_portal,          ( select ec.id_cliente_facturador from erp_cliente ec where ec.id_cliente = p.id_cliente ) id_cliente_facturador,          usu.id_tipo_usuario, usu.login, usu.email, date_format(usu.generacion,&#39;%Y-%m-%d&#39;) alta_usuario,          &#39;NPS&#39; gateway, p.id_gateway  from cce_pago p, cce_usuario usu, cce_pago_nps pnps, bac_medio_pago mp  where usu.id_usuario = p.id_usuario  and p.id_pago = pnps.id_pago  and p.id_portal = 1  and p.id_medio_pago = mp.id_medio_pago  and ( p.estado in (&#39;ACREDITADO&#39;)  )  and date(pnps.actualizacion) &gt;= date($P{bac_desde})  and date(pnps.actualizacion) &lt;= date($P{bac_hasta})  </Data></Cell>
		</Row>	</Table>
</Worksheet>
</Workbook>
